
Rang.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  00002e0c  00002ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  00800318  00800318  00002fb8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009ad  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002777  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003df  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002036  00000000  00000000  000064db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  00008514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f3  00000000  00000000  00008bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d5  00000000  00000000  000095e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00009dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_5>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_51>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <MOVE_RIGHT+0x2>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e0       	ldi	r30, 0x0C	; 12
     17e:	fe e2       	ldi	r31, 0x2E	; 46
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 31       	cpi	r26, 0x18	; 24
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	15 e0       	ldi	r17, 0x05	; 5
     192:	a8 e1       	ldi	r26, 0x18	; 24
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ad 30       	cpi	r26, 0x0D	; 13
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <main>
     1a4:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <servo1_pin_config>:
 * The following three fucntions intialize and configure
 * the servo motors.
 */
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     1ac:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     1ae:	2d 9a       	sbi	0x05, 5	; 5
}
     1b0:	08 95       	ret

000001b2 <servo2_pin_config>:

void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     1b2:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     1b4:	2e 9a       	sbi	0x05, 6	; 5
}
     1b6:	08 95       	ret

000001b8 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     1b8:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     1ba:	2f 9a       	sbi	0x05, 7	; 5
}
     1bc:	08 95       	ret

000001be <timer1_init>:
 * WGM: 7) PWM 10bit fast, TOP=0x03FF
 * actual value: 42.187Hz 
 */
void timer1_init(void)
{
 TCCR1B = 0x00; /*! stop */
     1be:	e1 e8       	ldi	r30, 0x81	; 129
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	10 82       	st	Z, r1
 TCNT1H = 0xFC; /*! Counter high value to which OCR1xH value is to be compared with */
     1c4:	8c ef       	ldi	r24, 0xFC	; 252
     1c6:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	/*! Counter low value to which OCR1xH value is to be compared with */
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	/*! Output compare eegister high value for servo 1 */
     1d0:	93 e0       	ldi	r25, 0x03	; 3
     1d2:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	/*! Output Compare Register low Value For servo 1  */
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	/*! Output compare eegister high value for servo 2 */
     1dc:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	/*! Output Compare Register low Value For servo 2  */
     1e0:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	/*! Output compare eegister high value for servo 3  */
     1e4:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	/*! Output Compare Register low Value For servo 3 */
     1e8:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     1ec:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     1f0:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*! 
     1f4:	8b ea       	ldi	r24, 0xAB	; 171
     1f6:	80 93 80 00 	sts	0x0080, r24
                 * {COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}s
                 * For Overriding normal port functionalit to OCRnA outputs.
				 * {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode
				 */
 TCCR1C = 0x00;
     1fa:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; /*! WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256) */
     1fe:	8c e0       	ldi	r24, 0x0C	; 12
     200:	80 83       	st	Z, r24
}
     202:	08 95       	ret

00000204 <port_servo_init>:
 * The following three fucntions intialize and configure
 * the servo motors.
 */
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     204:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     206:	2d 9a       	sbi	0x05, 5	; 5
}

void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     208:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     20a:	2e 9a       	sbi	0x05, 6	; 5
}

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     20c:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     20e:	2f 9a       	sbi	0x05, 7	; 5
void port_servo_init(void)
{
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}
     210:	08 95       	ret

00000212 <servo_1>:
///Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
 PositionPanServo = ((float)degrees / 2.25) + 21.0;
 OCR1AH = 0x00;
     212:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e1       	ldi	r20, 0x10	; 16
     22a:	50 e4       	ldi	r21, 0x40	; 64
     22c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	48 ea       	ldi	r20, 0xA8	; 168
     236:	51 e4       	ldi	r21, 0x41	; 65
     238:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__addsf3>
     23c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     240:	60 93 88 00 	sts	0x0088, r22
}
     244:	08 95       	ret

00000246 <servo_2>:
///Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
 OCR1BH = 0x00;
     246:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	bc 01       	movw	r22, r24
     252:	cd 01       	movw	r24, r26
     254:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e1       	ldi	r20, 0x10	; 16
     25e:	50 e4       	ldi	r21, 0x40	; 64
     260:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	48 ea       	ldi	r20, 0xA8	; 168
     26a:	51 e4       	ldi	r21, 0x41	; 65
     26c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__addsf3>
     270:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     274:	60 93 8a 00 	sts	0x008A, r22
}
     278:	08 95       	ret

0000027a <servo_3>:
///Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
 OCR1CH = 0x00;
     27a:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionTiltServo;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e1       	ldi	r20, 0x10	; 16
     292:	50 e4       	ldi	r21, 0x40	; 64
     294:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	48 ea       	ldi	r20, 0xA8	; 168
     29e:	51 e4       	ldi	r21, 0x41	; 65
     2a0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__addsf3>
     2a4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     2a8:	60 93 8c 00 	sts	0x008C, r22
}
     2ac:	08 95       	ret

000002ae <servo_1_free>:
 * and make them free by giving 100% duty cycle at the PWM. This function can be used to 
 * reduce the power consumption of the motor if it is holding load against the gravity.
*/
void servo_1_free (void) /// makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     2b4:	8f ef       	ldi	r24, 0xFF	; 255
     2b6:	80 93 88 00 	sts	0x0088, r24
}
     2ba:	08 95       	ret

000002bc <servo_2_free>:



void servo_2_free (void) /// makes servo 2 free rotating
{
 OCR1BH = 0x03;
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	80 93 8a 00 	sts	0x008A, r24
}
     2c8:	08 95       	ret

000002ca <servo_3_free>:

void servo_3_free (void) /// makes servo 3 free rotating
{
 OCR1CH = 0x03;
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	80 93 8c 00 	sts	0x008C, r24
} 
     2d6:	08 95       	ret

000002d8 <pen_up>:
                 
/*!
 * This function blocks the opening of the hopper containing 
 * the rangoli powder.                 
*/
void pen_up(){
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
	servo_1(140);
     2e8:	8c e8       	ldi	r24, 0x8C	; 140
     2ea:	0e 94 09 01 	call	0x212	; 0x212 <servo_1>
	_delay_ms(wait);
     2ee:	60 91 00 02 	lds	r22, 0x0200
     2f2:	70 91 01 02 	lds	r23, 0x0201
     2f6:	88 27       	eor	r24, r24
     2f8:	77 fd       	sbrc	r23, 7
     2fa:	80 95       	com	r24
     2fc:	98 2f       	mov	r25, r24
     2fe:	0e 94 0f 11 	call	0x221e	; 0x221e <__floatsisf>
     302:	5b 01       	movw	r10, r22
     304:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	4a e7       	ldi	r20, 0x7A	; 122
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     312:	7b 01       	movw	r14, r22
     314:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e8       	ldi	r20, 0x80	; 128
     31c:	5f e3       	ldi	r21, 0x3F	; 63
     31e:	0e 94 df 10 	call	0x21be	; 0x21be <__ltsf2>
     322:	88 23       	and	r24, r24
     324:	1c f4       	brge	.+6      	; 0x32c <pen_up+0x54>
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	24 c0       	rjmp	.+72     	; 0x374 <pen_up+0x9c>
		__ticks = 1;
	else if (__tmp > 65535)
     32c:	c8 01       	movw	r24, r16
     32e:	b7 01       	movw	r22, r14
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	3f ef       	ldi	r19, 0xFF	; 255
     334:	4f e7       	ldi	r20, 0x7F	; 127
     336:	57 e4       	ldi	r21, 0x47	; 71
     338:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__gtsf2>
     33c:	18 16       	cp	r1, r24
     33e:	b4 f4       	brge	.+44     	; 0x36c <pen_up+0x94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	40 e2       	ldi	r20, 0x20	; 32
     34a:	51 e4       	ldi	r21, 0x41	; 65
     34c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     350:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     354:	89 e1       	ldi	r24, 0x19	; 25
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	05 c0       	rjmp	.+10     	; 0x364 <pen_up+0x8c>
     35a:	fc 01       	movw	r30, r24
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <pen_up+0x84>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     360:	61 50       	subi	r22, 0x01	; 1
     362:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     364:	61 15       	cp	r22, r1
     366:	71 05       	cpc	r23, r1
     368:	c1 f7       	brne	.-16     	; 0x35a <pen_up+0x82>
     36a:	07 c0       	rjmp	.+14     	; 0x37a <pen_up+0xa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     36c:	c8 01       	movw	r24, r16
     36e:	b7 01       	movw	r22, r14
     370:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     374:	cb 01       	movw	r24, r22
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <pen_up+0x9e>
}
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	08 95       	ret

0000038c <pen_down>:

/*!
 * This function unblocks the opening of the hopper containing
 * the rangoli powder.
 */
void pen_down(){
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
	servo_1(150);
     39c:	86 e9       	ldi	r24, 0x96	; 150
     39e:	0e 94 09 01 	call	0x212	; 0x212 <servo_1>
	servo_1(90);
     3a2:	8a e5       	ldi	r24, 0x5A	; 90
     3a4:	0e 94 09 01 	call	0x212	; 0x212 <servo_1>
	_delay_ms(dropping_time);  // delay
     3a8:	60 91 02 02 	lds	r22, 0x0202
     3ac:	70 91 03 02 	lds	r23, 0x0203
     3b0:	88 27       	eor	r24, r24
     3b2:	77 fd       	sbrc	r23, 7
     3b4:	80 95       	com	r24
     3b6:	98 2f       	mov	r25, r24
     3b8:	0e 94 0f 11 	call	0x221e	; 0x221e <__floatsisf>
     3bc:	5b 01       	movw	r10, r22
     3be:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4a e7       	ldi	r20, 0x7A	; 122
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     3cc:	7b 01       	movw	r14, r22
     3ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 df 10 	call	0x21be	; 0x21be <__ltsf2>
     3dc:	88 23       	and	r24, r24
     3de:	1c f4       	brge	.+6      	; 0x3e6 <pen_down+0x5a>
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	24 c0       	rjmp	.+72     	; 0x42e <pen_down+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
     3e6:	c8 01       	movw	r24, r16
     3e8:	b7 01       	movw	r22, r14
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	4f e7       	ldi	r20, 0x7F	; 127
     3f0:	57 e4       	ldi	r21, 0x47	; 71
     3f2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__gtsf2>
     3f6:	18 16       	cp	r1, r24
     3f8:	b4 f4       	brge	.+44     	; 0x426 <pen_down+0x9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     40a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     40e:	89 e1       	ldi	r24, 0x19	; 25
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	05 c0       	rjmp	.+10     	; 0x41e <pen_down+0x92>
     414:	fc 01       	movw	r30, r24
     416:	31 97       	sbiw	r30, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <pen_down+0x8a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41a:	61 50       	subi	r22, 0x01	; 1
     41c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     41e:	61 15       	cp	r22, r1
     420:	71 05       	cpc	r23, r1
     422:	c1 f7       	brne	.-16     	; 0x414 <pen_down+0x88>
     424:	07 c0       	rjmp	.+14     	; 0x434 <pen_down+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     426:	c8 01       	movw	r24, r16
     428:	b7 01       	movw	r22, r14
     42a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     42e:	cb 01       	movw	r24, r22
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <pen_down+0xa4>
}
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	08 95       	ret

00000446 <vibrate>:
          
/*!
 * This function taps the rangoli hopper so that the flow of 
 * the rangoli powder is maintained.
 */          
void vibrate(){
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
 	for(vt=0;vt<2;vt++){
     44a:	10 92 fd 04 	sts	0x04FD, r1
     44e:	10 92 fc 04 	sts	0x04FC, r1
     452:	c9 e1       	ldi	r28, 0x19	; 25
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	1d c0       	rjmp	.+58     	; 0x492 <vibrate+0x4c>
		servo_2(105);
     458:	89 e6       	ldi	r24, 0x69	; 105
     45a:	0e 94 23 01 	call	0x246	; 0x246 <servo_2>
     45e:	88 eb       	ldi	r24, 0xB8	; 184
     460:	9b e0       	ldi	r25, 0x0B	; 11
     462:	fe 01       	movw	r30, r28
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <vibrate+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     468:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	d9 f7       	brne	.-10     	; 0x462 <vibrate+0x1c>
		_delay_ms(300);
		servo_2(165);
     46c:	85 ea       	ldi	r24, 0xA5	; 165
     46e:	0e 94 23 01 	call	0x246	; 0x246 <servo_2>
     472:	88 eb       	ldi	r24, 0xB8	; 184
     474:	9b e0       	ldi	r25, 0x0B	; 11
     476:	fe 01       	movw	r30, r28
     478:	31 97       	sbiw	r30, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <vibrate+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     47c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47e:	d9 f7       	brne	.-10     	; 0x476 <vibrate+0x30>
/*!
 * This function taps the rangoli hopper so that the flow of 
 * the rangoli powder is maintained.
 */          
void vibrate(){
 	for(vt=0;vt<2;vt++){
     480:	80 91 fc 04 	lds	r24, 0x04FC
     484:	90 91 fd 04 	lds	r25, 0x04FD
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	90 93 fd 04 	sts	0x04FD, r25
     48e:	80 93 fc 04 	sts	0x04FC, r24
     492:	80 91 fc 04 	lds	r24, 0x04FC
     496:	90 91 fd 04 	lds	r25, 0x04FD
     49a:	02 97       	sbiw	r24, 0x02	; 2
     49c:	ec f2       	brlt	.-70     	; 0x458 <vibrate+0x12>
		_delay_ms(300);
		servo_2(165);
		_delay_ms(300);
	}
	
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <servo_init>:

/*! Intialize the servo motors */
void servo_init(){
cli();
     4a4:	f8 94       	cli
 * The following three fucntions intialize and configure
 * the servo motors.
 */
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     4a6:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     4a8:	2d 9a       	sbi	0x05, 5	; 5
}

void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     4aa:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     4ac:	2e 9a       	sbi	0x05, 6	; 5
}

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     4ae:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     4b0:	2f 9a       	sbi	0x05, 7	; 5

/*! Intialize the servo motors */
void servo_init(){
cli();
 port_servo_init();
 timer1_init();
     4b2:	0e 94 df 00 	call	0x1be	; 0x1be <timer1_init>
 sei(); //re-enable interrupts 
     4b6:	78 94       	sei
}
     4b8:	08 95       	ret

000004ba <get_isFwd>:
char ch[3];

int get_isFwd() 		// Returns the value of is_Fwd
{
	return is_Fwd;
}
     4ba:	80 91 0a 02 	lds	r24, 0x020A
     4be:	90 91 0b 02 	lds	r25, 0x020B
     4c2:	08 95       	ret

000004c4 <get_movementstate>:
int get_movementstate()		// Returns the value of movementState
{
	return movementState;
}
     4c4:	80 91 04 02 	lds	r24, 0x0204
     4c8:	90 91 05 02 	lds	r25, 0x0205
     4cc:	08 95       	ret

000004ce <get_botmove>:
int get_botmove()		// Returns the value of botMove
{
	return botMove;
}
     4ce:	80 91 b6 04 	lds	r24, 0x04B6
     4d2:	90 91 b7 04 	lds	r25, 0x04B7
     4d6:	08 95       	ret

000004d8 <isDraw>:
int isDraw()			// Returns the value of inputFinished
{
	return inputFinished;
}
     4d8:	80 91 b2 04 	lds	r24, 0x04B2
     4dc:	90 91 b3 04 	lds	r25, 0x04B3
     4e0:	08 95       	ret

000004e2 <set_currentCol>:


void set_currentCol()		// Set bot parameters when its ready to draw the next line.
{
	currentRow++;
     4e2:	80 91 06 02 	lds	r24, 0x0206
     4e6:	90 91 07 02 	lds	r25, 0x0207
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	90 93 07 02 	sts	0x0207, r25
     4f0:	80 93 06 02 	sts	0x0206, r24
	currentCol=0;
     4f4:	10 92 09 02 	sts	0x0209, r1
     4f8:	10 92 08 02 	sts	0x0208, r1
	endofRow=0;
     4fc:	10 92 0d 02 	sts	0x020D, r1
     500:	10 92 0c 02 	sts	0x020C, r1
	movementState=0;
     504:	10 92 05 02 	sts	0x0205, r1
     508:	10 92 04 02 	sts	0x0204, r1
	if(is_Fwd==0)
     50c:	80 91 0a 02 	lds	r24, 0x020A
     510:	90 91 0b 02 	lds	r25, 0x020B
     514:	89 2b       	or	r24, r25
     516:	39 f4       	brne	.+14     	; 0x526 <set_currentCol+0x44>
		is_Fwd=1;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 0b 02 	sts	0x020B, r25
     520:	80 93 0a 02 	sts	0x020A, r24
     524:	08 95       	ret
	else
		is_Fwd=0;
     526:	10 92 0b 02 	sts	0x020B, r1
     52a:	10 92 0a 02 	sts	0x020A, r1
     52e:	08 95       	ret

00000530 <maxRow>:
}
int maxRow()			// Returns whether we have drawn all rows or not.
{
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	20 91 06 02 	lds	r18, 0x0206
     538:	30 91 07 02 	lds	r19, 0x0207
     53c:	80 91 ac 04 	lds	r24, 0x04AC
     540:	90 91 ad 04 	lds	r25, 0x04AD
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	14 f0       	brlt	.+4      	; 0x54e <maxRow+0x1e>
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
	if(currentRow < max_row)
		return 0;
	else
		return 1;
		
}
     54e:	ca 01       	movw	r24, r20
     550:	08 95       	ret

00000552 <maxCol>:
int maxCol()			// Returns whether we have drawn all columns of a row or not.
{
	if(currentCol < max_col)
     552:	20 91 08 02 	lds	r18, 0x0208
     556:	30 91 09 02 	lds	r19, 0x0209
     55a:	80 91 ae 04 	lds	r24, 0x04AE
     55e:	90 91 af 04 	lds	r25, 0x04AF
     562:	28 17       	cp	r18, r24
     564:	39 07       	cpc	r19, r25
     566:	1c f4       	brge	.+6      	; 0x56e <maxCol+0x1c>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	08 c0       	rjmp	.+16     	; 0x57e <maxCol+0x2c>
		return 0;
	else
	{
		

		endofRow=1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 0d 02 	sts	0x020D, r25
     576:	80 93 0c 02 	sts	0x020C, r24
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
		return 1;

	}
}
     57e:	c9 01       	movw	r24, r18
     580:	08 95       	ret

00000582 <get_col>:
int get_col()					// Returns the color value.
{
     582:	e0 91 b8 04 	lds	r30, 0x04B8
     586:	f0 91 b9 04 	lds	r31, 0x04B9
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	e4 5e       	subi	r30, 0xE4	; 228
     590:	fc 4f       	sbci	r31, 0xFC	; 252
	return colourValue[cellCountinImage];
}
     592:	80 81       	ld	r24, Z
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	08 95       	ret

00000598 <get_length>:
int get_length()				// Returns the length value.
{
     598:	e0 91 b8 04 	lds	r30, 0x04B8
     59c:	f0 91 b9 04 	lds	r31, 0x04B9
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ec 51       	subi	r30, 0x1C	; 28
     5a6:	fc 4f       	sbci	r31, 0xFC	; 252
	return noofpixels[cellCountinImage];

}
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	08 95       	ret

000005ae <increase_cell_count>:
void increase_cell_count()			// Increment cell count.
{
	currentCol+=noofpixels[cellCountinImage];
     5ae:	40 91 b8 04 	lds	r20, 0x04B8
     5b2:	50 91 b9 04 	lds	r21, 0x04B9
     5b6:	fa 01       	movw	r30, r20
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ec 51       	subi	r30, 0x1C	; 28
     5be:	fc 4f       	sbci	r31, 0xFC	; 252
     5c0:	80 91 08 02 	lds	r24, 0x0208
     5c4:	90 91 09 02 	lds	r25, 0x0209
     5c8:	20 81       	ld	r18, Z
     5ca:	31 81       	ldd	r19, Z+1	; 0x01
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	90 93 09 02 	sts	0x0209, r25
     5d4:	80 93 08 02 	sts	0x0208, r24
	cellCountinImage++;
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	50 93 b9 04 	sts	0x04B9, r21
     5e0:	40 93 b8 04 	sts	0x04B8, r20
}
     5e4:	08 95       	ret

000005e6 <DELAY>:

void DELAY(int val)				// Delay
{
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
	_delay_ms(val);
     5f6:	aa 27       	eor	r26, r26
     5f8:	97 fd       	sbrc	r25, 7
     5fa:	a0 95       	com	r26
     5fc:	ba 2f       	mov	r27, r26
     5fe:	bc 01       	movw	r22, r24
     600:	cd 01       	movw	r24, r26
     602:	0e 94 0f 11 	call	0x221e	; 0x221e <__floatsisf>
     606:	5b 01       	movw	r10, r22
     608:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4a e7       	ldi	r20, 0x7A	; 122
     610:	53 e4       	ldi	r21, 0x43	; 67
     612:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     616:	7b 01       	movw	r14, r22
     618:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e8       	ldi	r20, 0x80	; 128
     620:	5f e3       	ldi	r21, 0x3F	; 63
     622:	0e 94 df 10 	call	0x21be	; 0x21be <__ltsf2>
     626:	88 23       	and	r24, r24
     628:	1c f4       	brge	.+6      	; 0x630 <DELAY+0x4a>
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	24 c0       	rjmp	.+72     	; 0x678 <DELAY+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     630:	c8 01       	movw	r24, r16
     632:	b7 01       	movw	r22, r14
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	3f ef       	ldi	r19, 0xFF	; 255
     638:	4f e7       	ldi	r20, 0x7F	; 127
     63a:	57 e4       	ldi	r21, 0x47	; 71
     63c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__gtsf2>
     640:	18 16       	cp	r1, r24
     642:	b4 f4       	brge	.+44     	; 0x670 <DELAY+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     644:	c6 01       	movw	r24, r12
     646:	b5 01       	movw	r22, r10
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e2       	ldi	r20, 0x20	; 32
     64e:	51 e4       	ldi	r21, 0x41	; 65
     650:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
     654:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     658:	89 e1       	ldi	r24, 0x19	; 25
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	05 c0       	rjmp	.+10     	; 0x668 <DELAY+0x82>
     65e:	fc 01       	movw	r30, r24
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <DELAY+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     664:	61 50       	subi	r22, 0x01	; 1
     666:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     668:	61 15       	cp	r22, r1
     66a:	71 05       	cpc	r23, r1
     66c:	c1 f7       	brne	.-16     	; 0x65e <DELAY+0x78>
     66e:	07 c0       	rjmp	.+14     	; 0x67e <DELAY+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     670:	c8 01       	movw	r24, r16
     672:	b7 01       	movw	r22, r14
     674:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     678:	cb 01       	movw	r24, r22
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <DELAY+0x94>
}
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	bf 90       	pop	r11
     68c:	af 90       	pop	r10
     68e:	08 95       	ret

00000690 <set_bot_move>:

void set_bot_move()				// Returns botMove status.
{
	botMove=0;
     690:	10 92 b7 04 	sts	0x04B7, r1
     694:	10 92 b6 04 	sts	0x04B6, r1
}
     698:	08 95       	ret

0000069a <set_movement_state>:

void set_movement_state()			// Increments movementState
{
	movementState++;
     69a:	80 91 04 02 	lds	r24, 0x0204
     69e:	90 91 05 02 	lds	r25, 0x0205
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	90 93 05 02 	sts	0x0205, r25
     6a8:	80 93 04 02 	sts	0x0204, r24
}
     6ac:	08 95       	ret

000006ae <set_shaft_l>:
void set_shaft_l()				// Set the leftShaftCounter to 0
{
	leftShaftCounter=0;
     6ae:	10 92 1b 03 	sts	0x031B, r1
     6b2:	10 92 1a 03 	sts	0x031A, r1
}
     6b6:	08 95       	ret

000006b8 <get_shaft_l>:
int get_shaft_l()				// Returns the value of leftShaftCounter
{
	return leftShaftCounter;
}
     6b8:	80 91 1a 03 	lds	r24, 0x031A
     6bc:	90 91 1b 03 	lds	r25, 0x031B
     6c0:	08 95       	ret

000006c2 <__vector_5>:
ISR(INT4_vect)					// Shaft Counter Interrupt call.
{
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
	leftShaftCounter++;
     6d0:	80 91 1a 03 	lds	r24, 0x031A
     6d4:	90 91 1b 03 	lds	r25, 0x031B
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	90 93 1b 03 	sts	0x031B, r25
     6de:	80 93 1a 03 	sts	0x031A, r24
}
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <uart0_init>:
// baud rate:9600
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
  UCSR2B = 0x00; //disable while setting baud rate
     6f0:	e1 ed       	ldi	r30, 0xD1	; 209
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     6f6:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     6fa:	86 e0       	ldi	r24, 0x06	; 6
     6fc:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     700:	8f e5       	ldi	r24, 0x5F	; 95
     702:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     706:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     70a:	88 e9       	ldi	r24, 0x98	; 152
     70c:	80 83       	st	Z, r24
}
     70e:	08 95       	ret

00000710 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	ef 93       	push	r30
     72a:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR0 in 'data' variable 
     72c:	40 91 d6 00 	lds	r20, 0x00D6
     730:	40 93 03 05 	sts	0x0503, r20

	UDR2 = data; 				//echo data back to PC
     734:	40 93 d6 00 	sts	0x00D6, r20

i = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	90 93 00 05 	sts	0x0500, r25
     740:	80 93 ff 04 	sts	0x04FF, r24
		if(data >= 0x30 && data <=0x39) //ASCII value of 0 - 9
     744:	84 2f       	mov	r24, r20
     746:	80 53       	subi	r24, 0x30	; 48
     748:	8a 30       	cpi	r24, 0x0A	; 10
     74a:	08 f0       	brcs	.+2      	; 0x74e <__vector_51+0x3e>
     74c:	61 c0       	rjmp	.+194    	; 0x810 <__vector_51+0x100>
		{

 			if (xbeeImageInsert ==0)
     74e:	80 91 b4 04 	lds	r24, 0x04B4
     752:	90 91 b5 04 	lds	r25, 0x04B5
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	49 f4       	brne	.+18     	; 0x76c <__vector_51+0x5c>
			{
				colourValue[imageInput]*=10;
     75a:	e0 91 b0 04 	lds	r30, 0x04B0
     75e:	f0 91 b1 04 	lds	r31, 0x04B1
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e4 5e       	subi	r30, 0xE4	; 228
     768:	fc 4f       	sbci	r31, 0xFC	; 252
     76a:	0b c0       	rjmp	.+22     	; 0x782 <__vector_51+0x72>
				colourValue[imageInput]+=(int)data-48;
			}
			if (xbeeImageInsert ==1)
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	91 05       	cpc	r25, r1
     770:	e9 f4       	brne	.+58     	; 0x7ac <__vector_51+0x9c>
			{
				noofpixels[imageInput]*=10;
     772:	e0 91 b0 04 	lds	r30, 0x04B0
     776:	f0 91 b1 04 	lds	r31, 0x04B1
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ec 51       	subi	r30, 0x1C	; 28
     780:	fc 4f       	sbci	r31, 0xFC	; 252
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	9c 01       	movw	r18, r24
     788:	22 0f       	add	r18, r18
     78a:	33 1f       	adc	r19, r19
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	28 0f       	add	r18, r24
     79a:	39 1f       	adc	r19, r25
				noofpixels[imageInput]+=(int)data-48;
     79c:	84 2f       	mov	r24, r20
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	c0 97       	sbiw	r24, 0x30	; 48
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	80 83       	st	Z, r24
     7aa:	32 c0       	rjmp	.+100    	; 0x810 <__vector_51+0x100>
			}
			if (xbeeImageInsert ==2)
     7ac:	82 30       	cpi	r24, 0x02	; 2
     7ae:	91 05       	cpc	r25, r1
     7b0:	b9 f4       	brne	.+46     	; 0x7e0 <__vector_51+0xd0>
			{
				max_row*=10;
				max_row+=(int)data-48;
     7b2:	80 91 ac 04 	lds	r24, 0x04AC
     7b6:	90 91 ad 04 	lds	r25, 0x04AD
     7ba:	9c 01       	movw	r18, r24
     7bc:	f3 e0       	ldi	r31, 0x03	; 3
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	fa 95       	dec	r31
     7c4:	e1 f7       	brne	.-8      	; 0x7be <__vector_51+0xae>
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	28 0f       	add	r18, r24
     7cc:	39 1f       	adc	r19, r25
     7ce:	24 0f       	add	r18, r20
     7d0:	31 1d       	adc	r19, r1
     7d2:	20 53       	subi	r18, 0x30	; 48
     7d4:	30 40       	sbci	r19, 0x00	; 0
     7d6:	30 93 ad 04 	sts	0x04AD, r19
     7da:	20 93 ac 04 	sts	0x04AC, r18
     7de:	18 c0       	rjmp	.+48     	; 0x810 <__vector_51+0x100>
			}
			if (xbeeImageInsert ==3)
     7e0:	03 97       	sbiw	r24, 0x03	; 3
     7e2:	b1 f4       	brne	.+44     	; 0x810 <__vector_51+0x100>
			{
				max_col*=10;
				max_col+=(int)data-48;
     7e4:	80 91 ae 04 	lds	r24, 0x04AE
     7e8:	90 91 af 04 	lds	r25, 0x04AF
     7ec:	9c 01       	movw	r18, r24
     7ee:	f3 e0       	ldi	r31, 0x03	; 3
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	fa 95       	dec	r31
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <__vector_51+0xe0>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	28 0f       	add	r18, r24
     7fe:	39 1f       	adc	r19, r25
     800:	24 0f       	add	r18, r20
     802:	31 1d       	adc	r19, r1
     804:	20 53       	subi	r18, 0x30	; 48
     806:	30 40       	sbci	r19, 0x00	; 0
     808:	30 93 af 04 	sts	0x04AF, r19
     80c:	20 93 ae 04 	sts	0x04AE, r18
			}

		}
		if(data == 0x61) //ASCII value of a  -- indicates end of a digit for a cell
     810:	41 36       	cpi	r20, 0x61	; 97
     812:	e9 f4       	brne	.+58     	; 0x84e <__vector_51+0x13e>
		{
			imageInput++;
     814:	e0 91 b0 04 	lds	r30, 0x04B0
     818:	f0 91 b1 04 	lds	r31, 0x04B1
     81c:	31 96       	adiw	r30, 0x01	; 1
     81e:	f0 93 b1 04 	sts	0x04B1, r31
     822:	e0 93 b0 04 	sts	0x04B0, r30
			if(xbeeImageInsert ==0)
     826:	80 91 b4 04 	lds	r24, 0x04B4
     82a:	90 91 b5 04 	lds	r25, 0x04B5
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	29 f4       	brne	.+10     	; 0x83c <__vector_51+0x12c>
				colourValue[imageInput]=0;
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	e4 5e       	subi	r30, 0xE4	; 228
     838:	fc 4f       	sbci	r31, 0xFC	; 252
     83a:	06 c0       	rjmp	.+12     	; 0x848 <__vector_51+0x138>
			if (xbeeImageInsert ==1)
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	d9 f5       	brne	.+118    	; 0x8b6 <__vector_51+0x1a6>
				noofpixels[imageInput]=0;
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ec 51       	subi	r30, 0x1C	; 28
     846:	fc 4f       	sbci	r31, 0xFC	; 252
     848:	11 82       	std	Z+1, r1	; 0x01
     84a:	10 82       	st	Z, r1
     84c:	34 c0       	rjmp	.+104    	; 0x8b6 <__vector_51+0x1a6>

		}
		if(data == 0x62) //ASCII value of b  -- indicates end of an array or a veriable
     84e:	42 36       	cpi	r20, 0x62	; 98
     850:	b1 f4       	brne	.+44     	; 0x87e <__vector_51+0x16e>
		{
			imageInput=0;
     852:	10 92 b1 04 	sts	0x04B1, r1
     856:	10 92 b0 04 	sts	0x04B0, r1
			xbeeImageInsert++;
     85a:	80 91 b4 04 	lds	r24, 0x04B4
     85e:	90 91 b5 04 	lds	r25, 0x04B5
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	90 93 b5 04 	sts	0x04B5, r25
     868:	80 93 b4 04 	sts	0x04B4, r24
			if(xbeeImageInsert==4)
     86c:	04 97       	sbiw	r24, 0x04	; 4
     86e:	19 f5       	brne	.+70     	; 0x8b6 <__vector_51+0x1a6>
				inputFinished=1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	90 93 b3 04 	sts	0x04B3, r25
     878:	80 93 b2 04 	sts	0x04B2, r24
     87c:	1c c0       	rjmp	.+56     	; 0x8b6 <__vector_51+0x1a6>


		}
		if(data == 0x6A) //ASCII value of j  -- indicates the Bot should move left
     87e:	4a 36       	cpi	r20, 0x6A	; 106
     880:	19 f4       	brne	.+6      	; 0x888 <__vector_51+0x178>
		{
			botMove=2;
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	13 c0       	rjmp	.+38     	; 0x8ae <__vector_51+0x19e>
		}
		if(data == 0x6C) //ASCII value of l  -- indicates  the Bot should move right
     888:	4c 36       	cpi	r20, 0x6C	; 108
     88a:	19 f4       	brne	.+6      	; 0x892 <__vector_51+0x182>
		{
			botMove=1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__vector_51+0x19e>
		}
		if(data == 0x69) //ASCII value of i  -- indicates  the Bot should move forward
     892:	49 36       	cpi	r20, 0x69	; 105
     894:	19 f4       	brne	.+6      	; 0x89c <__vector_51+0x18c>
		{
			botMove=3;
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__vector_51+0x19e>
		}
		if(data == 0x6B) //ASCII value of k  -- indicates  the Bot should move backward
     89c:	4b 36       	cpi	r20, 0x6B	; 107
     89e:	19 f4       	brne	.+6      	; 0x8a6 <__vector_51+0x196>
		{
			botMove=4;
     8a0:	84 e0       	ldi	r24, 0x04	; 4
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__vector_51+0x19e>
		}
		if(data == 0x64) //ASCII value of d  -- indicates  the Bot is in proper position and it can start drawing the row.
     8a6:	44 36       	cpi	r20, 0x64	; 100
     8a8:	31 f4       	brne	.+12     	; 0x8b6 <__vector_51+0x1a6>
		{
			botMove=5;
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	90 93 b7 04 	sts	0x04B7, r25
     8b2:	80 93 b6 04 	sts	0x04B6, r24
		}

}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0b be       	out	0x3b, r0	; 59
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <init_xbee>:


//Function To Initialize all The Devices
void init_xbee()
{
 cli(); //Clears the global interrupts
     8d2:	f8 94       	cli


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     8d4:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     8d6:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     8d8:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     8dc:	10 92 08 01 	sts	0x0108, r1
// baud rate:9600
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
  UCSR2B = 0x00; //disable while setting baud rate
     8e0:	e1 ed       	ldi	r30, 0xD1	; 209
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     8e6:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     8ea:	86 e0       	ldi	r24, 0x06	; 6
     8ec:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     8f0:	8f e5       	ldi	r24, 0x5F	; 95
     8f2:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     8f6:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     8fa:	88 e9       	ldi	r24, 0x98	; 152
     8fc:	80 83       	st	Z, r24
void init_xbee()
{
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart0_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
     8fe:	78 94       	sei
}
     900:	08 95       	ret

00000902 <motion_pin_config>:
// motion functions


void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     902:	81 b1       	in	r24, 0x01	; 1
     904:	8f 60       	ori	r24, 0x0F	; 15
     906:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     908:	82 b1       	in	r24, 0x02	; 2
     90a:	80 7f       	andi	r24, 0xF0	; 240
     90c:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     90e:	ea e0       	ldi	r30, 0x0A	; 10
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	80 81       	ld	r24, Z
     914:	88 61       	ori	r24, 0x18	; 24
     916:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     918:	eb e0       	ldi	r30, 0x0B	; 11
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	80 81       	ld	r24, Z
     91e:	88 61       	ori	r24, 0x18	; 24
     920:	80 83       	st	Z, r24
}
     922:	08 95       	ret

00000924 <init_intrrupt>:
init_xbee();
}

void init_intrrupt()
{
	EIMSK = 0x10;
     924:	80 e1       	ldi	r24, 0x10	; 16
     926:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x00;
     928:	10 92 69 00 	sts	0x0069, r1
	EICRB = 0x02;
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	80 93 6a 00 	sts	0x006A, r24
}
     932:	08 95       	ret

00000934 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     934:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     936:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     938:	8f 70       	andi	r24, 0x0F	; 15
     93a:	89 2b       	or	r24, r25
 PORTA = PortARestore;                         // setting the command to the port
     93c:	82 b9       	out	0x02, r24	; 2

}
     93e:	08 95       	ret

00000940 <MOVE_FWD>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     940:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     942:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     944:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore;                         // setting the command to the port
     946:	82 b9       	out	0x02, r24	; 2


void MOVE_FWD(void) //both wheels forward
{
  motion_set(0x06);
}
     948:	08 95       	ret

0000094a <MOVE_REV>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     94a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     94c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     94e:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore;                         // setting the command to the port
     950:	82 b9       	out	0x02, r24	; 2
}

void MOVE_REV(void) //both wheels backward
{
  motion_set(0x09);
}
     952:	08 95       	ret

00000954 <MOVE_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     954:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     956:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     958:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore;                         // setting the command to the port
     95a:	82 b9       	out	0x02, r24	; 2
}

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     95c:	08 95       	ret

0000095e <MOVE_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     95e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     960:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     962:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore;                         // setting the command to the port
     964:	82 b9       	out	0x02, r24	; 2
}

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     966:	08 95       	ret

00000968 <MOVE_SOFT_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     968:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     96a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     96c:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore;                         // setting the command to the port
     96e:	82 b9       	out	0x02, r24	; 2
}

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     970:	08 95       	ret

00000972 <MOVE_SOFT_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     972:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     974:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     976:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore;                         // setting the command to the port
     978:	82 b9       	out	0x02, r24	; 2
}

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     97a:	08 95       	ret

0000097c <MOVE_INPLACE_LEFT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     97c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     97e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     980:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore;                         // setting the command to the port
     982:	82 b9       	out	0x02, r24	; 2
}

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     984:	08 95       	ret

00000986 <MOVE_INPLACE_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     986:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     988:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
     98a:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore;                         // setting the command to the port
     98c:	82 b9       	out	0x02, r24	; 2
}

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     98e:	08 95       	ret

00000990 <STOP>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     990:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     992:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore;                         // setting the command to the port
     994:	82 b9       	out	0x02, r24	; 2
}

void STOP (void)
{
  motion_set(0x00);
}
     996:	08 95       	ret

00000998 <timer5_init>:
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
        TCCR5B = 0x00;        //Stop
     998:	e1 e2       	ldi	r30, 0x21	; 33
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	10 82       	st	Z, r1
        TCNT5H = 0xFF;        //Counter higher 8-bit value to which OCR5xH value is compared with
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	90 93 25 01 	sts	0x0125, r25
        TCNT5L = 0x01;        //Counter lower 8-bit value to which OCR5xH value is compared with
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 24 01 	sts	0x0124, r24
        OCR5AH = 0x00;        //Output compare register high value for Left Motor
     9aa:	10 92 29 01 	sts	0x0129, r1
        OCR5AL = 0xFF;        //Output compare register low value for Left Motor
     9ae:	90 93 28 01 	sts	0x0128, r25
        OCR5BH = 0x00;        //Output compare register high value for Right Motor
     9b2:	10 92 2b 01 	sts	0x012B, r1
        OCR5BL = 0xFF;        //Output compare register low value for Right Motor
     9b6:	90 93 2a 01 	sts	0x012A, r25
        OCR5CH = 0x00;        //Output compare register high value for Motor C1
     9ba:	10 92 2d 01 	sts	0x012D, r1
        OCR5CL = 0xFF;        //Output compare register low value for Motor C1
     9be:	90 93 2c 01 	sts	0x012C, r25
        TCCR5A = 0xA9;        /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     9c2:	89 ea       	ldi	r24, 0xA9	; 169
     9c4:	80 93 20 01 	sts	0x0120, r24
                                           For Overriding normal port functionalit to OCRnA outputs.
                                            {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit
Mode*/
        
        TCCR5B = 0x0B;        //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     9c8:	8b e0       	ldi	r24, 0x0B	; 11
     9ca:	80 83       	st	Z, r24
}
     9cc:	08 95       	ret

000009ce <velocity>:
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
        OCR5AL = (unsigned char)left_motor;
     9ce:	80 93 28 01 	sts	0x0128, r24
        OCR5BL = (unsigned char)right_motor;
     9d2:	60 93 2a 01 	sts	0x012A, r22
}
     9d6:	08 95       	ret

000009d8 <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
    if ( val > 254 )   //limiting the max velocity
     9d8:	8f 3f       	cpi	r24, 0xFF	; 255
     9da:	91 05       	cpc	r25, r1
     9dc:	14 f0       	brlt	.+4      	; 0x9e2 <MOTOR_LEFT_SPEED+0xa>
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	90 e0       	ldi	r25, 0x00	; 0
           val = 255;        
    OCR5AL = (unsigned char) val;
     9e2:	80 93 28 01 	sts	0x0128, r24
}
     9e6:	08 95       	ret

000009e8 <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
  if ( val > 254 )     //limiting the max velocity
     9e8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ea:	91 05       	cpc	r25, r1
     9ec:	14 f0       	brlt	.+4      	; 0x9f2 <MOTOR_RIGHT_SPEED+0xa>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	90 e0       	ldi	r25, 0x00	; 0
          val = 255;
  OCR5BL = (unsigned char) val;
     9f2:	80 93 2a 01 	sts	0x012A, r24
}
     9f6:	08 95       	ret

000009f8 <SERVO_A_DIRECTION>:
/********************************************************
                        Servo 
********************************************************/
void SERVO_A_DIRECTION(int val)
{        
        servo_1((unsigned char)val);
     9f8:	0e 94 09 01 	call	0x212	; 0x212 <servo_1>
     9fc:	80 e3       	ldi	r24, 0x30	; 48
     9fe:	95 e7       	ldi	r25, 0x75	; 117
     a00:	29 e1       	ldi	r18, 0x19	; 25
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	f9 01       	movw	r30, r18
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <SERVO_A_DIRECTION+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a0c:	d9 f7       	brne	.-10     	; 0xa04 <SERVO_A_DIRECTION+0xc>
        _delay_ms(3000);
}
     a0e:	08 95       	ret

00000a10 <SERVO_B_DIRECTION>:
void SERVO_B_DIRECTION(unsigned char val)
{        
        servo_2(val);
     a10:	0e 94 23 01 	call	0x246	; 0x246 <servo_2>
     a14:	80 e3       	ldi	r24, 0x30	; 48
     a16:	95 e7       	ldi	r25, 0x75	; 117
     a18:	29 e1       	ldi	r18, 0x19	; 25
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <SERVO_B_DIRECTION+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a24:	d9 f7       	brne	.-10     	; 0xa1c <SERVO_B_DIRECTION+0xc>
        _delay_ms(3000);
}
     a26:	08 95       	ret

00000a28 <SERVO_C_DIRECTION>:
void SERVO_C_DIRECTION(unsigned char val)
{        
        servo_3(val);
     a28:	0e 94 3d 01 	call	0x27a	; 0x27a <servo_3>
     a2c:	80 e3       	ldi	r24, 0x30	; 48
     a2e:	95 e7       	ldi	r25, 0x75	; 117
     a30:	29 e1       	ldi	r18, 0x19	; 25
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <SERVO_C_DIRECTION+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	d9 f7       	brne	.-10     	; 0xa34 <SERVO_C_DIRECTION+0xc>
        _delay_ms(3000);
}
     a3e:	08 95       	ret

00000a40 <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     a40:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     a42:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     a44:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     a48:	10 92 08 01 	sts	0x0108, r1
}
     a4c:	08 95       	ret

00000a4e <port_init>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     a4e:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     a50:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     a52:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     a56:	10 92 08 01 	sts	0x0108, r1
void port_init()
{
        
        adc_pin_config();
                
}
     a5a:	08 95       	ret

00000a5c <init_adc>:



void init_adc()
{
        ADCSRA = 0x00;
     a5c:	ea e7       	ldi	r30, 0x7A	; 122
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	10 82       	st	Z, r1
        ADCSRB = 0x00;                //MUX5 = 0
     a62:	10 92 7b 00 	sts	0x007B, r1
        ADMUX = 0x20;                //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     a66:	80 e2       	ldi	r24, 0x20	; 32
     a68:	80 93 7c 00 	sts	0x007C, r24
        ACSR = 0x80;
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	80 bf       	out	0x30, r24	; 48
        ADCSRA = 0x86;                //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     a70:	86 e8       	ldi	r24, 0x86	; 134
     a72:	80 83       	st	Z, r24
}
     a74:	08 95       	ret

00000a76 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     a76:	98 2f       	mov	r25, r24
        unsigned char a;
        if(Ch>7)
     a78:	88 30       	cpi	r24, 0x08	; 8
     a7a:	18 f0       	brcs	.+6      	; 0xa82 <ADC_Conversion+0xc>
        {
                ADCSRB = 0x08;
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	80 93 7b 00 	sts	0x007B, r24
        }
        Ch = Ch & 0x07;                          
        ADMUX= 0x20| Ch;                           
     a82:	97 70       	andi	r25, 0x07	; 7
     a84:	90 62       	ori	r25, 0x20	; 32
     a86:	90 93 7c 00 	sts	0x007C, r25
        ADCSRA = ADCSRA | 0x40;                //Set start conversion bit
     a8a:	80 91 7a 00 	lds	r24, 0x007A
     a8e:	80 64       	ori	r24, 0x40	; 64
     a90:	80 93 7a 00 	sts	0x007A, r24
        while((ADCSRA&0x10)==0);        //Wait for conversion to complete
     a94:	80 91 7a 00 	lds	r24, 0x007A
     a98:	84 ff       	sbrs	r24, 4
     a9a:	fc cf       	rjmp	.-8      	; 0xa94 <ADC_Conversion+0x1e>
        a=ADCH;
     a9c:	80 91 79 00 	lds	r24, 0x0079
        ADCSRA = ADCSRA|0x10;
     aa0:	90 91 7a 00 	lds	r25, 0x007A
     aa4:	90 61       	ori	r25, 0x10	; 16
     aa6:	90 93 7a 00 	sts	0x007A, r25
        ADCSRB = 0x00;
     aaa:	10 92 7b 00 	sts	0x007B, r1
        return a;
}
     aae:	08 95       	ret

00000ab0 <init_ir>:
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
        DDRF = 0x00; 
     ab0:	10 ba       	out	0x10, r1	; 16
        PORTF = 0x00;
     ab2:	11 ba       	out	0x11, r1	; 17
        DDRA = 0x0F;
     ab4:	8f e0       	ldi	r24, 0x0F	; 15
     ab6:	81 b9       	out	0x01, r24	; 1
        PORTA = 0x00;
     ab8:	12 b8       	out	0x02, r1	; 2
        DDRL = 0x18;
     aba:	88 e1       	ldi	r24, 0x18	; 24
     abc:	80 93 0a 01 	sts	0x010A, r24
        PORTL = 0x18;
     ac0:	80 93 0b 01 	sts	0x010B, r24
        DDRC = 0xFF;
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	87 b9       	out	0x07, r24	; 7
        PORTC = 0x00;
     ac8:	18 b8       	out	0x08, r1	; 8
        DDRJ = 0x00;
     aca:	10 92 04 01 	sts	0x0104, r1
        PORTJ = 0xFF;
     ace:	80 93 05 01 	sts	0x0105, r24
}
     ad2:	08 95       	ret

00000ad4 <init_lcd>:
int i;


void init_lcd()
{
        DDRF = 0x00; 
     ad4:	10 ba       	out	0x10, r1	; 16
        PORTF = 0x00;
     ad6:	11 ba       	out	0x11, r1	; 17
        DDRA = 0x0F;
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	81 b9       	out	0x01, r24	; 1
        PORTA = 0x00;
     adc:	12 b8       	out	0x02, r1	; 2
        DDRL = 0x18;
     ade:	88 e1       	ldi	r24, 0x18	; 24
     ae0:	80 93 0a 01 	sts	0x010A, r24
        PORTL = 0x18;
     ae4:	80 93 0b 01 	sts	0x010B, r24
        DDRC = 0xFF;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	87 b9       	out	0x07, r24	; 7
        PORTC = 0x00;
     aec:	18 b8       	out	0x08, r1	; 8
        DDRJ = 0x00;
     aee:	10 92 04 01 	sts	0x0104, r1
        PORTJ = 0xFF;
     af2:	80 93 05 01 	sts	0x0105, r24
}
     af6:	08 95       	ret

00000af8 <lcd_set_4bit>:
     af8:	8a ef       	ldi	r24, 0xFA	; 250
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
        _delay_ms(1);

        cbit(lcd_port,RS);                                //RS=0 --- Command Input
     b02:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);                                //RW=0 --- Writing to LCD
     b04:	41 98       	cbi	0x08, 1	; 8
        lcd_port = 0x30;                                //Sending 3
     b06:	40 e3       	ldi	r20, 0x30	; 48
     b08:	48 b9       	out	0x08, r20	; 8
        sbit(lcd_port,EN);                                //Set Enable Pin
     b0a:	42 9a       	sbi	0x08, 2	; 8
     b0c:	22 ee       	ldi	r18, 0xE2	; 226
     b0e:	34 e0       	ldi	r19, 0x04	; 4
     b10:	f9 01       	movw	r30, r18
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <lcd_set_4bit+0x1a>
        _delay_ms(5);                                        //Delay
        cbit(lcd_port,EN);                                //Clear Enable Pin
     b16:	42 98       	cbi	0x08, 2	; 8
     b18:	fc 01       	movw	r30, r24
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <lcd_set_4bit+0x22>

        _delay_ms(1);

        cbit(lcd_port,RS);                                //RS=0 --- Command Input
     b1e:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);                                //RW=0 --- Writing to LCD
     b20:	41 98       	cbi	0x08, 1	; 8
        lcd_port = 0x30;                                //Sending 3
     b22:	48 b9       	out	0x08, r20	; 8
        sbit(lcd_port,EN);                                //Set Enable Pin
     b24:	42 9a       	sbi	0x08, 2	; 8
     b26:	f9 01       	movw	r30, r18
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <lcd_set_4bit+0x30>
        _delay_ms(5);                                        //Delay
        cbit(lcd_port,EN);                                //Clear Enable Pin
     b2c:	42 98       	cbi	0x08, 2	; 8
     b2e:	fc 01       	movw	r30, r24
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <lcd_set_4bit+0x38>

        _delay_ms(1);

        cbit(lcd_port,RS);                                //RS=0 --- Command Input
     b34:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);                                //RW=0 --- Writing to LCD
     b36:	41 98       	cbi	0x08, 1	; 8
        lcd_port = 0x30;                                //Sending 3
     b38:	48 b9       	out	0x08, r20	; 8
        sbit(lcd_port,EN);                                //Set Enable Pin
     b3a:	42 9a       	sbi	0x08, 2	; 8
     b3c:	f9 01       	movw	r30, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <lcd_set_4bit+0x46>
        _delay_ms(5);                                        //Delay
        cbit(lcd_port,EN);                                //Clear Enable Pin
     b42:	42 98       	cbi	0x08, 2	; 8
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <lcd_set_4bit+0x4c>

        _delay_ms(1);

        cbit(lcd_port,RS);                                //RS=0 --- Command Input
     b48:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);                                //RW=0 --- Writing to LCD
     b4a:	41 98       	cbi	0x08, 1	; 8
        lcd_port = 0x20;                                //Sending 2 to initialise LCD 4-bit mode
     b4c:	80 e2       	ldi	r24, 0x20	; 32
     b4e:	88 b9       	out	0x08, r24	; 8
        sbit(lcd_port,EN);                                //Set Enable Pin
     b50:	42 9a       	sbi	0x08, 2	; 8
     b52:	c9 01       	movw	r24, r18
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <lcd_set_4bit+0x5c>
        _delay_ms(5);                                        //Delay
        cbit(lcd_port,EN);                                //Clear Enable Pin
     b58:	42 98       	cbi	0x08, 2	; 8

        
}
     b5a:	08 95       	ret

00000b5c <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
        unsigned char temp;
        temp = cmd;
        temp = temp & 0xF0;
        lcd_port &= 0x0F;
     b5c:	98 b1       	in	r25, 0x08	; 8
     b5e:	9f 70       	andi	r25, 0x0F	; 15
     b60:	98 b9       	out	0x08, r25	; 8
        lcd_port |= temp;
     b62:	28 b1       	in	r18, 0x08	; 8
     b64:	98 2f       	mov	r25, r24
     b66:	90 7f       	andi	r25, 0xF0	; 240
     b68:	92 2b       	or	r25, r18
     b6a:	98 b9       	out	0x08, r25	; 8
        cbit(lcd_port,RS);
     b6c:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);
     b6e:	41 98       	cbi	0x08, 1	; 8
        sbit(lcd_port,EN);
     b70:	42 9a       	sbi	0x08, 2	; 8
     b72:	22 ee       	ldi	r18, 0xE2	; 226
     b74:	34 e0       	ldi	r19, 0x04	; 4
     b76:	f9 01       	movw	r30, r18
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <lcd_wr_command+0x1c>
        _delay_ms(5);
        cbit(lcd_port,EN);
     b7c:	42 98       	cbi	0x08, 2	; 8
        
        cmd = cmd & 0x0F;
        cmd = cmd<<4;
        lcd_port &= 0x0F;
     b7e:	98 b1       	in	r25, 0x08	; 8
     b80:	9f 70       	andi	r25, 0x0F	; 15
     b82:	98 b9       	out	0x08, r25	; 8
        lcd_port |= cmd;
     b84:	98 b1       	in	r25, 0x08	; 8
     b86:	82 95       	swap	r24
     b88:	80 7f       	andi	r24, 0xF0	; 240
     b8a:	98 2b       	or	r25, r24
     b8c:	98 b9       	out	0x08, r25	; 8
        cbit(lcd_port,RS);
     b8e:	40 98       	cbi	0x08, 0	; 8
        cbit(lcd_port,RW);
     b90:	41 98       	cbi	0x08, 1	; 8
        sbit(lcd_port,EN);
     b92:	42 9a       	sbi	0x08, 2	; 8
     b94:	c9 01       	movw	r24, r18
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <lcd_wr_command+0x3a>
        _delay_ms(5);
        cbit(lcd_port,EN);
     b9a:	42 98       	cbi	0x08, 2	; 8
}
     b9c:	08 95       	ret

00000b9e <lcd_init>:
     b9e:	8a ef       	ldi	r24, 0xFA	; 250
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
        _delay_ms(1);

        lcd_wr_command(0x28);                        //LCD 4-bit mode and 2 lines.
     ba6:	88 e2       	ldi	r24, 0x28	; 40
     ba8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
        lcd_wr_command(0x01);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
        lcd_wr_command(0x06);
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
        lcd_wr_command(0x0E);
     bb8:	8e e0       	ldi	r24, 0x0E	; 14
     bba:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
        lcd_wr_command(0x80);
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
                
}
     bc4:	08 95       	ret

00000bc6 <init_devices>:
 */

//Function to initialize ports
void init_devices()
{
cli();
     bc6:	f8 94       	cli
// motion functions


void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
     bc8:	81 b1       	in	r24, 0x01	; 1
     bca:	8f 60       	ori	r24, 0x0F	; 15
     bcc:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     bce:	82 b1       	in	r24, 0x02	; 2
     bd0:	80 7f       	andi	r24, 0xF0	; 240
     bd2:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     bd4:	2a e0       	ldi	r18, 0x0A	; 10
     bd6:	31 e0       	ldi	r19, 0x01	; 1
     bd8:	f9 01       	movw	r30, r18
     bda:	80 81       	ld	r24, Z
     bdc:	88 61       	ori	r24, 0x18	; 24
     bde:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     be0:	ab e0       	ldi	r26, 0x0B	; 11
     be2:	b1 e0       	ldi	r27, 0x01	; 1
     be4:	8c 91       	ld	r24, X
     be6:	88 61       	ori	r24, 0x18	; 24
     be8:	8c 93       	st	X, r24


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     bea:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     bec:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     bee:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     bf2:	10 92 08 01 	sts	0x0108, r1



void init_adc()
{
        ADCSRA = 0x00;
     bf6:	ea e7       	ldi	r30, 0x7A	; 122
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	10 82       	st	Z, r1
        ADCSRB = 0x00;                //MUX5 = 0
     bfc:	10 92 7b 00 	sts	0x007B, r1
        ADMUX = 0x20;                //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     c00:	80 e2       	ldi	r24, 0x20	; 32
     c02:	80 93 7c 00 	sts	0x007C, r24
        ACSR = 0x80;
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	80 bf       	out	0x30, r24	; 48
        ADCSRA = 0x86;                //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     c0a:	86 e8       	ldi	r24, 0x86	; 134
     c0c:	80 83       	st	Z, r24
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
        TCCR5B = 0x00;        //Stop
     c0e:	e1 e2       	ldi	r30, 0x21	; 33
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	10 82       	st	Z, r1
        TCNT5H = 0xFF;        //Counter higher 8-bit value to which OCR5xH value is compared with
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	90 93 25 01 	sts	0x0125, r25
        TCNT5L = 0x01;        //Counter lower 8-bit value to which OCR5xH value is compared with
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 24 01 	sts	0x0124, r24
        OCR5AH = 0x00;        //Output compare register high value for Left Motor
     c20:	10 92 29 01 	sts	0x0129, r1
        OCR5AL = 0xFF;        //Output compare register low value for Left Motor
     c24:	90 93 28 01 	sts	0x0128, r25
        OCR5BH = 0x00;        //Output compare register high value for Right Motor
     c28:	10 92 2b 01 	sts	0x012B, r1
        OCR5BL = 0xFF;        //Output compare register low value for Right Motor
     c2c:	90 93 2a 01 	sts	0x012A, r25
        OCR5CH = 0x00;        //Output compare register high value for Motor C1
     c30:	10 92 2d 01 	sts	0x012D, r1
        OCR5CL = 0xFF;        //Output compare register low value for Motor C1
     c34:	90 93 2c 01 	sts	0x012C, r25
        TCCR5A = 0xA9;        /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     c38:	89 ea       	ldi	r24, 0xA9	; 169
     c3a:	80 93 20 01 	sts	0x0120, r24
                                           For Overriding normal port functionalit to OCRnA outputs.
                                            {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit
Mode*/
        
        TCCR5B = 0x0B;        //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     c3e:	8b e0       	ldi	r24, 0x0B	; 11
     c40:	80 83       	st	Z, r24
int i;


void init_lcd()
{
        DDRF = 0x00; 
     c42:	10 ba       	out	0x10, r1	; 16
        PORTF = 0x00;
     c44:	11 ba       	out	0x11, r1	; 17
        DDRA = 0x0F;
     c46:	8f e0       	ldi	r24, 0x0F	; 15
     c48:	81 b9       	out	0x01, r24	; 1
        PORTA = 0x00;
     c4a:	12 b8       	out	0x02, r1	; 2
        DDRL = 0x18;
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	f9 01       	movw	r30, r18
     c50:	80 83       	st	Z, r24
        PORTL = 0x18;
     c52:	8c 93       	st	X, r24
        DDRC = 0xFF;
     c54:	97 b9       	out	0x07, r25	; 7
        PORTC = 0x00;
     c56:	18 b8       	out	0x08, r1	; 8
        DDRJ = 0x00;
     c58:	10 92 04 01 	sts	0x0104, r1
        PORTJ = 0xFF;
     c5c:	90 93 05 01 	sts	0x0105, r25
 motion_pin_config();
 port_init();
 init_adc();
 timer5_init();
init_lcd();
lcd_init();
     c60:	0e 94 cf 05 	call	0xb9e	; 0xb9e <lcd_init>
lcd_set_4bit();
     c64:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <lcd_set_4bit>
// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
        DDRC = DDRC | 0x08;                                //Setting PORTC pin3 as outpt
     c68:	3b 9a       	sbi	0x07, 3	; 7
        PORTC = 0x00;                                //Initialize Values of PORTC to 0.
     c6a:	18 b8       	out	0x08, r1	; 8
init_xbee();
}

void init_intrrupt()
{
	EIMSK = 0x10;
     c6c:	80 e1       	ldi	r24, 0x10	; 16
     c6e:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x00;
     c70:	10 92 69 00 	sts	0x0069, r1
	EICRB = 0x02;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 6a 00 	sts	0x006A, r24
lcd_init();
lcd_set_4bit();

init_buzzer();
init_intrrupt();
sei();
     c7a:	78 94       	sei
servo_init();
     c7c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <servo_init>


//Function To Initialize all The Devices
void init_xbee()
{
 cli(); //Clears the global interrupts
     c80:	f8 94       	cli


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     c82:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     c84:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     c86:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     c8a:	10 92 08 01 	sts	0x0108, r1
// baud rate:9600
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
  UCSR2B = 0x00; //disable while setting baud rate
     c8e:	e1 ed       	ldi	r30, 0xD1	; 209
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     c94:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     c9e:	8f e5       	ldi	r24, 0x5F	; 95
     ca0:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     ca4:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     ca8:	88 e9       	ldi	r24, 0x98	; 152
     caa:	80 83       	st	Z, r24
void init_xbee()
{
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart0_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
     cac:	78 94       	sei
init_buzzer();
init_intrrupt();
sei();
servo_init();
init_xbee();
}
     cae:	08 95       	ret

00000cb0 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
        char temp;
        temp = letter;
        temp = (temp & 0xF0);
        lcd_port &= 0x0F;
     cb0:	98 b1       	in	r25, 0x08	; 8
     cb2:	9f 70       	andi	r25, 0x0F	; 15
     cb4:	98 b9       	out	0x08, r25	; 8
        lcd_port |= temp;
     cb6:	28 b1       	in	r18, 0x08	; 8
     cb8:	98 2f       	mov	r25, r24
     cba:	90 7f       	andi	r25, 0xF0	; 240
     cbc:	92 2b       	or	r25, r18
     cbe:	98 b9       	out	0x08, r25	; 8
        sbit(lcd_port,RS);
     cc0:	40 9a       	sbi	0x08, 0	; 8
        cbit(lcd_port,RW);
     cc2:	41 98       	cbi	0x08, 1	; 8
        sbit(lcd_port,EN);
     cc4:	42 9a       	sbi	0x08, 2	; 8
     cc6:	22 ee       	ldi	r18, 0xE2	; 226
     cc8:	34 e0       	ldi	r19, 0x04	; 4
     cca:	f9 01       	movw	r30, r18
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcd_wr_char+0x1c>
        _delay_ms(5);
        cbit(lcd_port,EN);
     cd0:	42 98       	cbi	0x08, 2	; 8

        letter = letter & 0x0F;
        letter = letter<<4;
        lcd_port &= 0x0F;
     cd2:	98 b1       	in	r25, 0x08	; 8
     cd4:	9f 70       	andi	r25, 0x0F	; 15
     cd6:	98 b9       	out	0x08, r25	; 8
        lcd_port |= letter;
     cd8:	98 b1       	in	r25, 0x08	; 8
     cda:	82 95       	swap	r24
     cdc:	80 7f       	andi	r24, 0xF0	; 240
     cde:	98 2b       	or	r25, r24
     ce0:	98 b9       	out	0x08, r25	; 8
        sbit(lcd_port,RS);
     ce2:	40 9a       	sbi	0x08, 0	; 8
        cbit(lcd_port,RW);
     ce4:	41 98       	cbi	0x08, 1	; 8
        sbit(lcd_port,EN);
     ce6:	42 9a       	sbi	0x08, 2	; 8
     ce8:	c9 01       	movw	r24, r18
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <lcd_wr_char+0x3a>
        _delay_ms(5);
        cbit(lcd_port,EN);
     cee:	42 98       	cbi	0x08, 2	; 8
}
     cf0:	08 95       	ret

00000cf2 <lcd_home>:


void lcd_home()
{
        lcd_wr_command(0x80);
     cf2:	80 e8       	ldi	r24, 0x80	; 128
     cf4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
}
     cf8:	08 95       	ret

00000cfa <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <lcd_string+0xe>
        while(*str != '\0')
        {
                lcd_wr_char(*str);
     d02:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
                str++;
     d06:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
        while(*str != '\0')
     d08:	88 81       	ld	r24, Y
     d0a:	88 23       	and	r24, r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <lcd_string+0x8>
        {
                lcd_wr_char(*str);
                str++;
        }
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
        switch (row) {
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	69 f0       	breq	.+26     	; 0xd32 <lcd_cursor+0x1e>
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	18 f4       	brcc	.+6      	; 0xd22 <lcd_cursor+0xe>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	a9 f4       	brne	.+42     	; 0xd4a <lcd_cursor+0x36>
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <lcd_cursor+0x18>
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	49 f0       	breq	.+18     	; 0xd38 <lcd_cursor+0x24>
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	81 f4       	brne	.+32     	; 0xd4a <lcd_cursor+0x36>
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <lcd_cursor+0x2e>
                case 1: lcd_wr_command (0x80 + column - 1); break;
     d2c:	86 2f       	mov	r24, r22
     d2e:	81 58       	subi	r24, 0x81	; 129
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <lcd_cursor+0x28>
                case 2: lcd_wr_command (0xc0 + column - 1); break;
     d32:	86 2f       	mov	r24, r22
     d34:	81 54       	subi	r24, 0x41	; 65
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <lcd_cursor+0x28>
                case 3: lcd_wr_command (0x94 + column - 1); break;
     d38:	86 2f       	mov	r24, r22
     d3a:	8d 56       	subi	r24, 0x6D	; 109
     d3c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
     d40:	08 95       	ret
                case 4: lcd_wr_command (0xd4 + column - 1); break;
     d42:	86 2f       	mov	r24, r22
     d44:	8d 52       	subi	r24, 0x2D	; 45
     d46:	0e 94 ae 05 	call	0xb5c	; 0xb5c <lcd_wr_command>
     d4a:	08 95       	ret

00000d4c <lcd_print>:
        }
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	8a 01       	movw	r16, r20
     d56:	e9 01       	movw	r28, r18
        unsigned char flag=0;
        if(row==0||coloumn==0)
     d58:	88 23       	and	r24, r24
     d5a:	11 f0       	breq	.+4      	; 0xd60 <lcd_print+0x14>
     d5c:	66 23       	and	r22, r22
     d5e:	19 f4       	brne	.+6      	; 0xd66 <lcd_print+0x1a>
        {
                lcd_home();
     d60:	0e 94 79 06 	call	0xcf2	; 0xcf2 <lcd_home>
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <lcd_print+0x1e>
        }
        else
        {
                lcd_cursor(row,coloumn);
     d66:	0e 94 8a 06 	call	0xd14	; 0xd14 <lcd_cursor>
        }
        if(digits==5 || flag==1)
     d6a:	c5 30       	cpi	r28, 0x05	; 5
     d6c:	d1 05       	cpc	r29, r1
     d6e:	71 f4       	brne	.+28     	; 0xd8c <lcd_print+0x40>
        {
                million=value/10000+48;
     d70:	c8 01       	movw	r24, r16
     d72:	60 e1       	ldi	r22, 0x10	; 16
     d74:	77 e2       	ldi	r23, 0x27	; 39
     d76:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     d7a:	cb 01       	movw	r24, r22
     d7c:	c0 96       	adiw	r24, 0x30	; 48
     d7e:	90 93 f9 04 	sts	0x04F9, r25
     d82:	80 93 f8 04 	sts	0x04F8, r24
                lcd_wr_char(million);
     d86:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <lcd_print+0x4a>
                flag=1;
        }
        if(digits==4 || flag==1)
     d8c:	c4 30       	cpi	r28, 0x04	; 4
     d8e:	d1 05       	cpc	r29, r1
     d90:	11 f0       	breq	.+4      	; 0xd96 <lcd_print+0x4a>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	16 c0       	rjmp	.+44     	; 0xdc2 <lcd_print+0x76>
        {
                temp = value/1000;
     d96:	c8 01       	movw	r24, r16
     d98:	68 ee       	ldi	r22, 0xE8	; 232
     d9a:	73 e0       	ldi	r23, 0x03	; 3
     d9c:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     da0:	cb 01       	movw	r24, r22
     da2:	60 93 fa 04 	sts	0x04FA, r22
     da6:	90 93 fb 04 	sts	0x04FB, r25
                thousand = temp%10 + 48;
     daa:	6a e0       	ldi	r22, 0x0A	; 10
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     db2:	c0 96       	adiw	r24, 0x30	; 48
     db4:	90 93 09 05 	sts	0x0509, r25
     db8:	80 93 08 05 	sts	0x0508, r24
                lcd_wr_char(thousand);
     dbc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
                flag=1;
        }
        if(digits==3 || flag==1)
     dc2:	c3 30       	cpi	r28, 0x03	; 3
     dc4:	d1 05       	cpc	r29, r1
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <lcd_print+0x84>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	11 f0       	breq	.+4      	; 0xdd0 <lcd_print+0x84>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	16 c0       	rjmp	.+44     	; 0xdfc <lcd_print+0xb0>
        {
                temp = value/100;
     dd0:	c8 01       	movw	r24, r16
     dd2:	64 e6       	ldi	r22, 0x64	; 100
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     dda:	cb 01       	movw	r24, r22
     ddc:	60 93 fa 04 	sts	0x04FA, r22
     de0:	90 93 fb 04 	sts	0x04FB, r25
                hundred = temp%10 + 48;
     de4:	6a e0       	ldi	r22, 0x0A	; 10
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     dec:	c0 96       	adiw	r24, 0x30	; 48
     dee:	90 93 05 05 	sts	0x0505, r25
     df2:	80 93 04 05 	sts	0x0504, r24
                lcd_wr_char(hundred);
     df6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
                flag=1;
        }
        if(digits==2 || flag==1)
     dfc:	c2 30       	cpi	r28, 0x02	; 2
     dfe:	d1 05       	cpc	r29, r1
     e00:	21 f0       	breq	.+8      	; 0xe0a <lcd_print+0xbe>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	11 f0       	breq	.+4      	; 0xe0a <lcd_print+0xbe>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	16 c0       	rjmp	.+44     	; 0xe36 <lcd_print+0xea>
        {
                temp = value/10;
     e0a:	c8 01       	movw	r24, r16
     e0c:	6a e0       	ldi	r22, 0x0A	; 10
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     e14:	cb 01       	movw	r24, r22
     e16:	60 93 fa 04 	sts	0x04FA, r22
     e1a:	90 93 fb 04 	sts	0x04FB, r25
                tens = temp%10 + 48;
     e1e:	6a e0       	ldi	r22, 0x0A	; 10
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     e26:	c0 96       	adiw	r24, 0x30	; 48
     e28:	90 93 02 05 	sts	0x0502, r25
     e2c:	80 93 01 05 	sts	0x0501, r24
                lcd_wr_char(tens);
     e30:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
     e34:	81 e0       	ldi	r24, 0x01	; 1
                flag=1;
        }
        if(digits==1 || flag==1)
     e36:	c1 30       	cpi	r28, 0x01	; 1
     e38:	d1 05       	cpc	r29, r1
     e3a:	11 f0       	breq	.+4      	; 0xe40 <lcd_print+0xf4>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	61 f4       	brne	.+24     	; 0xe58 <lcd_print+0x10c>
        {
                unit = value%10 + 48;
     e40:	c8 01       	movw	r24, r16
     e42:	6a e0       	ldi	r22, 0x0A	; 10
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 2f 14 	call	0x285e	; 0x285e <__udivmodhi4>
     e4a:	c0 96       	adiw	r24, 0x30	; 48
     e4c:	90 93 07 05 	sts	0x0507, r25
     e50:	80 93 06 05 	sts	0x0506, r24
                lcd_wr_char(unit);
     e54:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
        }
        if(digits>5)
     e58:	26 97       	sbiw	r28, 0x06	; 6
     e5a:	1c f0       	brlt	.+6      	; 0xe62 <lcd_print+0x116>
        {
                lcd_wr_char('E');
     e5c:	85 e4       	ldi	r24, 0x45	; 69
     e5e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_wr_char>
        }
        
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
     e6c:	ac 01       	movw	r20, r24


 lcd_print(1,1,val,4);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	24 e0       	ldi	r18, 0x04	; 4
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_print>

}
     e7a:	08 95       	ret

00000e7c <LCD_DISPLAY_INT_2>:

}*/
        

void LCD_DISPLAY_INT_2(int val)
{        
     e7c:	ac 01       	movw	r20, r24


lcd_print(2,1,val,4);
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	24 e0       	ldi	r18, 0x04	; 4
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_print>

}
     e8a:	08 95       	ret

00000e8c <init_buzzer>:
// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
        DDRC = DDRC | 0x08;                                //Setting PORTC pin3 as outpt
     e8c:	3b 9a       	sbi	0x07, 3	; 7
        PORTC = 0x00;                                //Initialize Values of PORTC to 0.
     e8e:	18 b8       	out	0x08, r1	; 8
}
     e90:	08 95       	ret

00000e92 <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e96:	31 e2       	ldi	r19, 0x21	; 33
     e98:	23 2f       	mov	r18, r19
     e9a:	2a 95       	dec	r18
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <buzzer_delay+0x8>
        unsigned int i;
        for(i=0; i<10;i++)
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	8a 30       	cpi	r24, 0x0A	; 10
     ea2:	91 05       	cpc	r25, r1
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <buzzer_delay+0x6>
        {
                _delay_us(100);
        }
}
     ea6:	08 95       	ret

00000ea8 <BUZZER_ON>:
//   port_C_copy = port_C_copy & 0xF7;
 //  PORTC = port_C_copy;        



PORTC = 0x08;                        //Set pin3 to turn the "buzzer ON"
     ea8:	88 e0       	ldi	r24, 0x08	; 8
     eaa:	88 b9       	out	0x08, r24	; 8
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	31 e2       	ldi	r19, 0x21	; 33
     eb2:	23 2f       	mov	r18, r19
     eb4:	2a 95       	dec	r18
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <BUZZER_ON+0xc>

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
        unsigned int i;
        for(i=0; i<10;i++)
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	91 05       	cpc	r25, r1
     ebe:	c9 f7       	brne	.-14     	; 0xeb2 <BUZZER_ON+0xa>

PORTC = 0x08;                        //Set pin3 to turn the "buzzer ON"
buzzer_delay();                        //delay


}
     ec0:	08 95       	ret

00000ec2 <BUZZER_OFF>:


void BUZZER_OFF()
{

PORTC = 0x00;                        //Clear pin3 to turn the "buzzer OFF"
     ec2:	18 b8       	out	0x08, r1	; 8
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	31 e2       	ldi	r19, 0x21	; 33
     eca:	23 2f       	mov	r18, r19
     ecc:	2a 95       	dec	r18
     ece:	f1 f7       	brne	.-4      	; 0xecc <BUZZER_OFF+0xa>

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
        unsigned int i;
        for(i=0; i<10;i++)
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	8a 30       	cpi	r24, 0x0A	; 10
     ed4:	91 05       	cpc	r25, r1
     ed6:	c9 f7       	brne	.-14     	; 0xeca <BUZZER_OFF+0x8>
{

PORTC = 0x00;                        //Clear pin3 to turn the "buzzer OFF"
buzzer_delay();                        //delay

}
     ed8:	08 95       	ret

00000eda <rangoli_I_IS_DRAW>:
static integer length;
static integer move_bot;
static integer state_movement;
static unsigned char _state_1 = 9;
void rangoli_I_IS_DRAW(integer _v) {
  _s.IS_DRAW = 1;
     eda:	20 91 be 04 	lds	r18, 0x04BE
     ede:	21 60       	ori	r18, 0x01	; 1
     ee0:	20 93 be 04 	sts	0x04BE, r18
  IS_DRAW_v = _v;
     ee4:	90 93 c3 04 	sts	0x04C3, r25
     ee8:	80 93 c2 04 	sts	0x04C2, r24
}
     eec:	08 95       	ret

00000eee <rangoli_I_MOTOR_SHAFT_LEFT>:
void rangoli_I_MOTOR_SHAFT_LEFT(integer _v) {
  _s.MOTOR_SHAFT_LEFT = 1;
     eee:	20 91 be 04 	lds	r18, 0x04BE
     ef2:	22 60       	ori	r18, 0x02	; 2
     ef4:	20 93 be 04 	sts	0x04BE, r18
  MOTOR_SHAFT_LEFT_v = _v;
     ef8:	90 93 c5 04 	sts	0x04C5, r25
     efc:	80 93 c4 04 	sts	0x04C4, r24
}
     f00:	08 95       	ret

00000f02 <rangoli_I_MAX_ROW>:
void rangoli_I_MAX_ROW(integer _v) {
  _s.MAX_ROW = 1;
     f02:	20 91 be 04 	lds	r18, 0x04BE
     f06:	24 60       	ori	r18, 0x04	; 4
     f08:	20 93 be 04 	sts	0x04BE, r18
  MAX_ROW_v = _v;
     f0c:	90 93 c7 04 	sts	0x04C7, r25
     f10:	80 93 c6 04 	sts	0x04C6, r24
}
     f14:	08 95       	ret

00000f16 <rangoli_I_MAX_COLUMN>:
void rangoli_I_MAX_COLUMN(integer _v) {
  _s.MAX_COLUMN = 1;
     f16:	20 91 be 04 	lds	r18, 0x04BE
     f1a:	28 60       	ori	r18, 0x08	; 8
     f1c:	20 93 be 04 	sts	0x04BE, r18
  MAX_COLUMN_v = _v;
     f20:	90 93 c9 04 	sts	0x04C9, r25
     f24:	80 93 c8 04 	sts	0x04C8, r24
}
     f28:	08 95       	ret

00000f2a <rangoli_I_GET_COLOR>:
void rangoli_I_GET_COLOR(integer _v) {
  _s.GET_COLOR = 1;
     f2a:	20 91 be 04 	lds	r18, 0x04BE
     f2e:	20 61       	ori	r18, 0x10	; 16
     f30:	20 93 be 04 	sts	0x04BE, r18
  GET_COLOR_v = _v;
     f34:	90 93 cb 04 	sts	0x04CB, r25
     f38:	80 93 ca 04 	sts	0x04CA, r24
}
     f3c:	08 95       	ret

00000f3e <rangoli_I_GET_LENGTH>:
void rangoli_I_GET_LENGTH(integer _v) {
  _s.GET_LENGTH = 1;
     f3e:	20 91 be 04 	lds	r18, 0x04BE
     f42:	20 62       	ori	r18, 0x20	; 32
     f44:	20 93 be 04 	sts	0x04BE, r18
  GET_LENGTH_v = _v;
     f48:	90 93 cd 04 	sts	0x04CD, r25
     f4c:	80 93 cc 04 	sts	0x04CC, r24
}
     f50:	08 95       	ret

00000f52 <rangoli_I_IS_FWD>:
void rangoli_I_IS_FWD(integer _v) {
  _s.IS_FWD = 1;
     f52:	20 91 be 04 	lds	r18, 0x04BE
     f56:	20 64       	ori	r18, 0x40	; 64
     f58:	20 93 be 04 	sts	0x04BE, r18
  IS_FWD_v = _v;
     f5c:	90 93 cf 04 	sts	0x04CF, r25
     f60:	80 93 ce 04 	sts	0x04CE, r24
}
     f64:	08 95       	ret

00000f66 <rangoli_I_BOT_MOVE>:
void rangoli_I_BOT_MOVE(integer _v) {
  _s.BOT_MOVE = 1;
     f66:	20 91 be 04 	lds	r18, 0x04BE
     f6a:	20 68       	ori	r18, 0x80	; 128
     f6c:	20 93 be 04 	sts	0x04BE, r18
  BOT_MOVE_v = _v;
     f70:	90 93 d1 04 	sts	0x04D1, r25
     f74:	80 93 d0 04 	sts	0x04D0, r24
}
     f78:	08 95       	ret

00000f7a <rangoli_I_MOVEMENT_STATE>:
void rangoli_I_MOVEMENT_STATE(integer _v) {
  _s.MOVEMENT_STATE = 1;
     f7a:	20 91 bf 04 	lds	r18, 0x04BF
     f7e:	21 60       	ori	r18, 0x01	; 1
     f80:	20 93 bf 04 	sts	0x04BF, r18
  MOVEMENT_STATE_v = _v;
     f84:	90 93 d3 04 	sts	0x04D3, r25
     f88:	80 93 d2 04 	sts	0x04D2, r24
}
     f8c:	08 95       	ret

00000f8e <rangoli_reset>:
  _s.MAX_ROW = 0;
  _s.MAX_COLUMN = 0;
  _s.GET_COLOR = 0;
  _s.GET_LENGTH = 0;
  _s.IS_FWD = 0;
  _s.BOT_MOVE = 0;
     f8e:	10 92 be 04 	sts	0x04BE, r1
  _s.MOVEMENT_STATE = 0;
     f92:	80 91 bf 04 	lds	r24, 0x04BF
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	80 93 bf 04 	sts	0x04BF, r24
  return 0;
}
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	08 95       	ret

00000fa2 <rangoli_O_INCREASE_CELL_COUNT>:
	return noofpixels[cellCountinImage];

}
void increase_cell_count()			// Increment cell count.
{
	currentCol+=noofpixels[cellCountinImage];
     fa2:	40 91 b8 04 	lds	r20, 0x04B8
     fa6:	50 91 b9 04 	lds	r21, 0x04B9
     faa:	fa 01       	movw	r30, r20
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	ec 51       	subi	r30, 0x1C	; 28
     fb2:	fc 4f       	sbci	r31, 0xFC	; 252
     fb4:	80 91 08 02 	lds	r24, 0x0208
     fb8:	90 91 09 02 	lds	r25, 0x0209
     fbc:	20 81       	ld	r18, Z
     fbe:	31 81       	ldd	r19, Z+1	; 0x01
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	90 93 09 02 	sts	0x0209, r25
     fc8:	80 93 08 02 	sts	0x0208, r24
	cellCountinImage++;
     fcc:	4f 5f       	subi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	50 93 b9 04 	sts	0x04B9, r21
     fd4:	40 93 b8 04 	sts	0x04B8, r20
/****************************** Fire Bird Specific part ***************************/
static int  IR_THRESHHOLD[3] = {50, 50, 50};
rangoli_O_INCREASE_CELL_COUNT(void)
{
	increase_cell_count();
}
     fd8:	08 95       	ret

00000fda <rangoli_O_MOTOR_LEFT_SPEED>:
}


void MOTOR_LEFT_SPEED(int val)
{
    if ( val > 254 )   //limiting the max velocity
     fda:	8f 3f       	cpi	r24, 0xFF	; 255
     fdc:	91 05       	cpc	r25, r1
     fde:	14 f0       	brlt	.+4      	; 0xfe4 <rangoli_O_MOTOR_LEFT_SPEED+0xa>
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	90 e0       	ldi	r25, 0x00	; 0
           val = 255;        
    OCR5AL = (unsigned char) val;
     fe4:	80 93 28 01 	sts	0x0128, r24
rangoli_O_MOTOR_LEFT_SPEED(int val)
{
	MOTOR_LEFT_SPEED(val);
}
     fe8:	08 95       	ret

00000fea <rangoli_O_DELAY>:
rangoli_O_DELAY(integer val)
{
	DELAY(val);
     fea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DELAY>
}
     fee:	08 95       	ret

00000ff0 <rangoli_O_SERVO_C_ON>:
rangoli_O_SERVO_C_ON(integer val)
{
	SERVO_C_DIRECTION(val);
     ff0:	0e 94 14 05 	call	0xa28	; 0xa28 <SERVO_C_DIRECTION>
}
     ff4:	08 95       	ret

00000ff6 <rangoli_O_SERVO_B_ON>:
rangoli_O_SERVO_B_ON(integer val)
{
	SERVO_B_DIRECTION(val);
     ff6:	0e 94 08 05 	call	0xa10	; 0xa10 <SERVO_B_DIRECTION>
}
     ffa:	08 95       	ret

00000ffc <rangoli_O_MOVE_REV>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
     ffc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
     ffe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    1000:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore;                         // setting the command to the port
    1002:	82 b9       	out	0x02, r24	; 2
 rangoli_O_MOVE_REV(void)
{
	MOVE_REV();
}
    1004:	08 95       	ret

00001006 <rangoli_O_SET_ROW>:
}


void set_currentCol()		// Set bot parameters when its ready to draw the next line.
{
	currentRow++;
    1006:	80 91 06 02 	lds	r24, 0x0206
    100a:	90 91 07 02 	lds	r25, 0x0207
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	90 93 07 02 	sts	0x0207, r25
    1014:	80 93 06 02 	sts	0x0206, r24
	currentCol=0;
    1018:	10 92 09 02 	sts	0x0209, r1
    101c:	10 92 08 02 	sts	0x0208, r1
	endofRow=0;
    1020:	10 92 0d 02 	sts	0x020D, r1
    1024:	10 92 0c 02 	sts	0x020C, r1
	movementState=0;
    1028:	10 92 05 02 	sts	0x0205, r1
    102c:	10 92 04 02 	sts	0x0204, r1
	if(is_Fwd==0)
    1030:	80 91 0a 02 	lds	r24, 0x020A
    1034:	90 91 0b 02 	lds	r25, 0x020B
    1038:	89 2b       	or	r24, r25
    103a:	39 f4       	brne	.+14     	; 0x104a <rangoli_O_SET_ROW+0x44>
		is_Fwd=1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 0b 02 	sts	0x020B, r25
    1044:	80 93 0a 02 	sts	0x020A, r24
    1048:	08 95       	ret
	else
		is_Fwd=0;
    104a:	10 92 0b 02 	sts	0x020B, r1
    104e:	10 92 0a 02 	sts	0x020A, r1
rangoli_O_SET_ROW(void)
{
	set_currentCol();
}
    1052:	08 95       	ret

00001054 <rangoli_O_SERVO_A_ON>:
rangoli_O_SERVO_A_ON(integer val)
{
	SERVO_A_DIRECTION(val);
    1054:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SERVO_A_DIRECTION>
}
    1058:	08 95       	ret

0000105a <rangoli_O_SERVO_A_OFF>:
rangoli_O_SERVO_A_OFF(integer val)
{
	SERVO_A_DIRECTION(val);
    105a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SERVO_A_DIRECTION>
}
    105e:	08 95       	ret

00001060 <rangoli_O_MOVE_FWD>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
    1060:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
    1062:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    1064:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore;                         // setting the command to the port
    1066:	82 b9       	out	0x02, r24	; 2
rangoli_O_MOVE_FWD(void)
{
	MOVE_FWD();
}
    1068:	08 95       	ret

0000106a <rangoli_O_SET_MOVEMENT_STATE>:
	botMove=0;
}

void set_movement_state()			// Increments movementState
{
	movementState++;
    106a:	80 91 04 02 	lds	r24, 0x0204
    106e:	90 91 05 02 	lds	r25, 0x0205
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	90 93 05 02 	sts	0x0205, r25
    1078:	80 93 04 02 	sts	0x0204, r24
rangoli_O_SET_MOVEMENT_STATE(void)
{
	set_movement_state();
}
    107c:	08 95       	ret

0000107e <rangoli_O_SET_SHAFT_L>:
}
void set_shaft_l()				// Set the leftShaftCounter to 0
{
	leftShaftCounter=0;
    107e:	10 92 1b 03 	sts	0x031B, r1
    1082:	10 92 1a 03 	sts	0x031A, r1
rangoli_O_SET_SHAFT_L(void)
{
	set_shaft_l();
}
    1086:	08 95       	ret

00001088 <rangoli_O_SET_BOT_MOVE>:
	_delay_ms(val);
}

void set_bot_move()				// Returns botMove status.
{
	botMove=0;
    1088:	10 92 b7 04 	sts	0x04B7, r1
    108c:	10 92 b6 04 	sts	0x04B6, r1
rangoli_O_SET_BOT_MOVE(void)
{
	set_bot_move();
}
    1090:	08 95       	ret

00001092 <rangoli_O_MOTOR_RIGHT_SPEED>:
    OCR5AL = (unsigned char) val;
}

void MOTOR_RIGHT_SPEED(int val)
{
  if ( val > 254 )     //limiting the max velocity
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	91 05       	cpc	r25, r1
    1096:	14 f0       	brlt	.+4      	; 0x109c <rangoli_O_MOTOR_RIGHT_SPEED+0xa>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	90 e0       	ldi	r25, 0x00	; 0
          val = 255;
  OCR5BL = (unsigned char) val;
    109c:	80 93 2a 01 	sts	0x012A, r24
rangoli_O_MOTOR_RIGHT_SPEED(int val)
{
	MOTOR_RIGHT_SPEED(val);
}
    10a0:	08 95       	ret

000010a2 <rangoli_O_MOVE_SOFT_RIGHT>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
    10a2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
    10a4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    10a6:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore;                         // setting the command to the port
    10a8:	82 b9       	out	0x02, r24	; 2
 rangoli_O_MOVE_SOFT_RIGHT(void)
{
	MOVE_SOFT_RIGHT();
}
    10aa:	08 95       	ret

000010ac <rangoli_O_SERVO_B_OFF>:
rangoli_O_SERVO_B_OFF(integer val)
{
	SERVO_B_DIRECTION(val);
    10ac:	0e 94 08 05 	call	0xa10	; 0xa10 <SERVO_B_DIRECTION>
}
    10b0:	08 95       	ret

000010b2 <rangoli_O_SERVO_C_OFF>:
rangoli_O_SERVO_C_OFF(integer val)
{
	SERVO_C_DIRECTION(val);
    10b2:	0e 94 14 05 	call	0xa28	; 0xa28 <SERVO_C_DIRECTION>
}
    10b6:	08 95       	ret

000010b8 <rangoli>:
  _s.MOVEMENT_STATE = 1;
  MOVEMENT_STATE_v = _v;
}

int rangoli(void)
{
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
  /* Vacuous terminate */;
  switch (_state_1) {
    10c8:	90 91 0e 02 	lds	r25, 0x020E
    10cc:	94 30       	cpi	r25, 0x04	; 4
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <rangoli+0x1a>
    10d0:	a1 c1       	rjmp	.+834    	; 0x1414 <rangoli+0x35c>
    10d2:	95 30       	cpi	r25, 0x05	; 5
    10d4:	60 f4       	brcc	.+24     	; 0x10ee <rangoli+0x36>
    10d6:	91 30       	cpi	r25, 0x01	; 1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <rangoli+0x24>
    10da:	89 c1       	rjmp	.+786    	; 0x13ee <rangoli+0x336>
    10dc:	91 30       	cpi	r25, 0x01	; 1
    10de:	d0 f0       	brcs	.+52     	; 0x1114 <rangoli+0x5c>
    10e0:	92 30       	cpi	r25, 0x02	; 2
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <rangoli+0x2e>
    10e4:	8b c1       	rjmp	.+790    	; 0x13fc <rangoli+0x344>
    10e6:	93 30       	cpi	r25, 0x03	; 3
    10e8:	09 f0       	breq	.+2      	; 0x10ec <rangoli+0x34>
    10ea:	d4 c1       	rjmp	.+936    	; 0x1494 <rangoli+0x3dc>
    10ec:	8d c1       	rjmp	.+794    	; 0x1408 <rangoli+0x350>
    10ee:	97 30       	cpi	r25, 0x07	; 7
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <rangoli+0x3c>
    10f2:	a2 c1       	rjmp	.+836    	; 0x1438 <rangoli+0x380>
    10f4:	98 30       	cpi	r25, 0x08	; 8
    10f6:	38 f4       	brcc	.+14     	; 0x1106 <rangoli+0x4e>
    10f8:	95 30       	cpi	r25, 0x05	; 5
    10fa:	09 f4       	brne	.+2      	; 0x10fe <rangoli+0x46>
    10fc:	91 c1       	rjmp	.+802    	; 0x1420 <rangoli+0x368>
    10fe:	96 30       	cpi	r25, 0x06	; 6
    1100:	09 f0       	breq	.+2      	; 0x1104 <rangoli+0x4c>
    1102:	c8 c1       	rjmp	.+912    	; 0x1494 <rangoli+0x3dc>
    1104:	93 c1       	rjmp	.+806    	; 0x142c <rangoli+0x374>
    1106:	98 30       	cpi	r25, 0x08	; 8
    1108:	09 f4       	brne	.+2      	; 0x110c <rangoli+0x54>
    110a:	9c c1       	rjmp	.+824    	; 0x1444 <rangoli+0x38c>
    110c:	99 30       	cpi	r25, 0x09	; 9
    110e:	09 f0       	breq	.+2      	; 0x1112 <rangoli+0x5a>
    1110:	c1 c1       	rjmp	.+898    	; 0x1494 <rangoli+0x3dc>
    1112:	a1 c1       	rjmp	.+834    	; 0x1456 <rangoli+0x39e>
  case 0:
    if (_s.MOVEMENT_STATE) {
    1114:	60 91 bf 04 	lds	r22, 0x04BF
    1118:	60 ff       	sbrs	r22, 0
    111a:	6d c1       	rjmp	.+730    	; 0x13f6 <rangoli+0x33e>
      _state_1 = 8;
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	80 93 0e 02 	sts	0x020E, r24
      isDrawingFinished = MAX_ROW_v;
    1122:	c0 90 c6 04 	lds	r12, 0x04C6
    1126:	d0 90 c7 04 	lds	r13, 0x04C7
    112a:	d0 92 ed 04 	sts	0x04ED, r13
    112e:	c0 92 ec 04 	sts	0x04EC, r12
      is_Draw = IS_DRAW_v;
    1132:	20 91 c2 04 	lds	r18, 0x04C2
    1136:	30 91 c3 04 	lds	r19, 0x04C3
    113a:	30 93 e7 04 	sts	0x04E7, r19
    113e:	20 93 e6 04 	sts	0x04E6, r18
      dist = MOTOR_SHAFT_LEFT_v;
    1142:	c0 91 c4 04 	lds	r28, 0x04C4
    1146:	d0 91 c5 04 	lds	r29, 0x04C5
    114a:	d0 93 eb 04 	sts	0x04EB, r29
    114e:	c0 93 ea 04 	sts	0x04EA, r28
      isRowFinished = MAX_COLUMN_v;
    1152:	00 91 c8 04 	lds	r16, 0x04C8
    1156:	10 91 c9 04 	lds	r17, 0x04C9
    115a:	10 93 ef 04 	sts	0x04EF, r17
    115e:	00 93 ee 04 	sts	0x04EE, r16
      color = GET_COLOR_v;
    1162:	e0 91 ca 04 	lds	r30, 0x04CA
    1166:	f0 91 cb 04 	lds	r31, 0x04CB
    116a:	f0 93 f1 04 	sts	0x04F1, r31
    116e:	e0 93 f0 04 	sts	0x04F0, r30
      length = GET_LENGTH_v;
    1172:	40 91 cc 04 	lds	r20, 0x04CC
    1176:	50 91 cd 04 	lds	r21, 0x04CD
    117a:	50 93 f3 04 	sts	0x04F3, r21
    117e:	40 93 f2 04 	sts	0x04F2, r20
      isFwd = IS_FWD_v;
    1182:	a0 91 ce 04 	lds	r26, 0x04CE
    1186:	b0 91 cf 04 	lds	r27, 0x04CF
    118a:	b0 93 e9 04 	sts	0x04E9, r27
    118e:	a0 93 e8 04 	sts	0x04E8, r26
      move_bot = BOT_MOVE_v;
    1192:	80 91 d0 04 	lds	r24, 0x04D0
    1196:	90 91 d1 04 	lds	r25, 0x04D1
    119a:	90 93 f5 04 	sts	0x04F5, r25
    119e:	80 93 f4 04 	sts	0x04F4, r24
      state_movement = MOVEMENT_STATE_v;
    11a2:	e0 90 d2 04 	lds	r14, 0x04D2
    11a6:	f0 90 d3 04 	lds	r15, 0x04D3
    11aa:	f0 92 f7 04 	sts	0x04F7, r15
    11ae:	e0 92 f6 04 	sts	0x04F6, r14
      if ((is_Draw == 1)) {
    11b2:	21 30       	cpi	r18, 0x01	; 1
    11b4:	31 05       	cpc	r19, r1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <rangoli+0x102>
    11b8:	6d c1       	rjmp	.+730    	; 0x1494 <rangoli+0x3dc>
        if ((isDrawingFinished == 0)) {
    11ba:	cd 28       	or	r12, r13
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <rangoli+0x108>
    11be:	07 c1       	rjmp	.+526    	; 0x13ce <rangoli+0x316>
          if ((isRowFinished == 0)) {
    11c0:	01 2b       	or	r16, r17
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <rangoli+0x10e>
    11c4:	85 c0       	rjmp	.+266    	; 0x12d0 <rangoli+0x218>
            if ((dist < (3 * length))) {
    11c6:	ca 01       	movw	r24, r20
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	84 0f       	add	r24, r20
    11ce:	95 1f       	adc	r25, r21
    11d0:	26 2f       	mov	r18, r22
    11d2:	20 63       	ori	r18, 0x30	; 48
    11d4:	c8 17       	cp	r28, r24
    11d6:	d9 07       	cpc	r29, r25
    11d8:	0c f0       	brlt	.+2      	; 0x11dc <rangoli+0x124>
    11da:	54 c0       	rjmp	.+168    	; 0x1284 <rangoli+0x1cc>
              (MOTOR_LEFT_SPEED_v = 110), (_s.MOTOR_LEFT_SPEED = 1);
    11dc:	8e e6       	ldi	r24, 0x6E	; 110
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 d5 04 	sts	0x04D5, r25
    11e4:	80 93 d4 04 	sts	0x04D4, r24
              (MOTOR_RIGHT_SPEED_v = 110), (_s.MOTOR_RIGHT_SPEED = 1);
    11e8:	90 93 d7 04 	sts	0x04D7, r25
    11ec:	80 93 d6 04 	sts	0x04D6, r24
    11f0:	20 93 bf 04 	sts	0x04BF, r18
              if ((color == 1)) {
    11f4:	e1 30       	cpi	r30, 0x01	; 1
    11f6:	f1 05       	cpc	r31, r1
    11f8:	59 f4       	brne	.+22     	; 0x1210 <rangoli+0x158>
                (SERVO_A_ON_v = 145), (_s.SERVO_A_ON = 1);
    11fa:	81 e9       	ldi	r24, 0x91	; 145
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 d9 04 	sts	0x04D9, r25
    1202:	80 93 d8 04 	sts	0x04D8, r24
    1206:	82 2f       	mov	r24, r18
    1208:	80 64       	ori	r24, 0x40	; 64
    120a:	80 93 bf 04 	sts	0x04BF, r24
    120e:	33 c0       	rjmp	.+102    	; 0x1276 <rangoli+0x1be>
              }
              else if ((color == 2)) {
    1210:	e2 30       	cpi	r30, 0x02	; 2
    1212:	f1 05       	cpc	r31, r1
    1214:	51 f4       	brne	.+20     	; 0x122a <rangoli+0x172>
                (SERVO_B_ON_v = 145), (_s.SERVO_B_ON = 1);
    1216:	81 e9       	ldi	r24, 0x91	; 145
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 93 dd 04 	sts	0x04DD, r25
    121e:	80 93 dc 04 	sts	0x04DC, r24
    1222:	80 91 c0 04 	lds	r24, 0x04C0
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <rangoli+0x188>
              }
              else if ((color == 3)) {
    122a:	33 97       	sbiw	r30, 0x03	; 3
    122c:	61 f4       	brne	.+24     	; 0x1246 <rangoli+0x18e>
                (SERVO_C_ON_v = 145), (_s.SERVO_C_ON = 1);
    122e:	81 e9       	ldi	r24, 0x91	; 145
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 e1 04 	sts	0x04E1, r25
    1236:	80 93 e0 04 	sts	0x04E0, r24
    123a:	80 91 c0 04 	lds	r24, 0x04C0
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	80 93 c0 04 	sts	0x04C0, r24
    1244:	18 c0       	rjmp	.+48     	; 0x1276 <rangoli+0x1be>
              } 
              else {
                (SERVO_A_OFF_v = 160), (_s.SERVO_A_OFF = 1);
    1246:	80 ea       	ldi	r24, 0xA0	; 160
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	90 93 db 04 	sts	0x04DB, r25
    124e:	80 93 da 04 	sts	0x04DA, r24
    1252:	20 91 bf 04 	lds	r18, 0x04BF
    1256:	20 68       	ori	r18, 0x80	; 128
    1258:	20 93 bf 04 	sts	0x04BF, r18
                (SERVO_B_OFF_v = 160), (_s.SERVO_B_OFF = 1);
    125c:	90 93 df 04 	sts	0x04DF, r25
    1260:	80 93 de 04 	sts	0x04DE, r24
    1264:	20 91 c0 04 	lds	r18, 0x04C0
                (SERVO_C_OFF_v = 160), (_s.SERVO_C_OFF = 1);
    1268:	90 93 e3 04 	sts	0x04E3, r25
    126c:	80 93 e2 04 	sts	0x04E2, r24
    1270:	2a 60       	ori	r18, 0x0A	; 10
    1272:	20 93 c0 04 	sts	0x04C0, r18
              }
              if ((isFwd == 1)) {
    1276:	80 91 e8 04 	lds	r24, 0x04E8
    127a:	90 91 e9 04 	lds	r25, 0x04E9
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	09 f5       	brne	.+66     	; 0x12c4 <rangoli+0x20c>
    1282:	1c c0       	rjmp	.+56     	; 0x12bc <rangoli+0x204>
                _s.MOVE_REV = 1;
              } else {
                _s.MOVE_FWD = 1;
              }
            } else {
              (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
    1284:	10 92 d5 04 	sts	0x04D5, r1
    1288:	10 92 d4 04 	sts	0x04D4, r1
              (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    128c:	10 92 d7 04 	sts	0x04D7, r1
    1290:	10 92 d6 04 	sts	0x04D6, r1
    1294:	20 93 bf 04 	sts	0x04BF, r18
              _s.SET_SHAFT_L = 1;
    1298:	80 91 c0 04 	lds	r24, 0x04C0
              _s.INCREASE_CELL_COUNT = 1;
    129c:	90 91 c1 04 	lds	r25, 0x04C1
    12a0:	91 60       	ori	r25, 0x01	; 1
    12a2:	90 93 c1 04 	sts	0x04C1, r25
              (DELAY_v = 2000), (_s.DELAY = 1);
    12a6:	20 ed       	ldi	r18, 0xD0	; 208
    12a8:	37 e0       	ldi	r19, 0x07	; 7
    12aa:	30 93 e5 04 	sts	0x04E5, r19
    12ae:	20 93 e4 04 	sts	0x04E4, r18
    12b2:	80 63       	ori	r24, 0x30	; 48
    12b4:	80 93 c0 04 	sts	0x04C0, r24
              if ((isFwd == 1)) {
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <rangoli+0x20c>
                _s.MOVE_REV = 1;
    12bc:	80 91 bf 04 	lds	r24, 0x04BF
    12c0:	88 60       	ori	r24, 0x08	; 8
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <rangoli+0x212>
              } else {
                _s.MOVE_FWD = 1;
    12c4:	80 91 bf 04 	lds	r24, 0x04BF
    12c8:	84 60       	ori	r24, 0x04	; 4
    12ca:	80 93 bf 04 	sts	0x04BF, r24
    12ce:	e2 c0       	rjmp	.+452    	; 0x1494 <rangoli+0x3dc>
              }
            }
          } else {
            (SERVO_A_OFF_v = 160), (_s.SERVO_A_OFF = 1);
    12d0:	80 ea       	ldi	r24, 0xA0	; 160
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	90 93 db 04 	sts	0x04DB, r25
    12d8:	80 93 da 04 	sts	0x04DA, r24
    12dc:	60 68       	ori	r22, 0x80	; 128
    12de:	60 93 bf 04 	sts	0x04BF, r22
			(SERVO_B_OFF_v = 160), (_s.SERVO_B_OFF = 1);
    12e2:	90 93 df 04 	sts	0x04DF, r25
    12e6:	80 93 de 04 	sts	0x04DE, r24
    12ea:	20 91 c0 04 	lds	r18, 0x04C0
			(SERVO_C_OFF_v = 160), (_s.SERVO_C_OFF = 1);
    12ee:	90 93 e3 04 	sts	0x04E3, r25
    12f2:	80 93 e2 04 	sts	0x04E2, r24
              (DELAY_v = 8000), (_s.DELAY = 1);
    12f6:	80 e4       	ldi	r24, 0x40	; 64
    12f8:	9f e1       	ldi	r25, 0x1F	; 31
    12fa:	90 93 e5 04 	sts	0x04E5, r25
    12fe:	80 93 e4 04 	sts	0x04E4, r24
    1302:	2a 61       	ori	r18, 0x1A	; 26
    1304:	20 93 c0 04 	sts	0x04C0, r18
            if ((state_movement == 1)) {
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	e8 16       	cp	r14, r24
    130c:	f1 04       	cpc	r15, r1
    130e:	d9 f4       	brne	.+54     	; 0x1346 <rangoli+0x28e>
                  _s.SET_ROW = 1;
                }
              }
              */
              
               if ((dist < 15)) {
    1310:	2f 97       	sbiw	r28, 0x0f	; 15
    1312:	7c f4       	brge	.+30     	; 0x1332 <rangoli+0x27a>
					_s.MOVE_REV = 1;
    1314:	26 2f       	mov	r18, r22
					(MOTOR_LEFT_SPEED_v = 100), (_s.MOTOR_LEFT_SPEED = 1);
    1316:	84 e6       	ldi	r24, 0x64	; 100
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	90 93 d5 04 	sts	0x04D5, r25
    131e:	80 93 d4 04 	sts	0x04D4, r24
					(MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    1322:	10 92 d7 04 	sts	0x04D7, r1
    1326:	10 92 d6 04 	sts	0x04D6, r1
    132a:	28 63       	ori	r18, 0x38	; 56
    132c:	20 93 bf 04 	sts	0x04BF, r18
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <rangoli+0x28e>
				} else {
                _s.SET_MOVEMENT_STATE = 1;
    1332:	80 91 c0 04 	lds	r24, 0x04C0
                  _s.SET_SHAFT_L = 1;
                  _s.SET_BOT_MOVE = 1;
    1336:	80 6e       	ori	r24, 0xE0	; 224
    1338:	80 93 c0 04 	sts	0x04C0, r24
                  _s.SET_ROW = 1;
    133c:	80 91 c1 04 	lds	r24, 0x04C1
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	80 93 c1 04 	sts	0x04C1, r24
                (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
                _s.SET_SHAFT_L = 1;
                _s.SET_BOT_MOVE = 1;
              */}
            }
            if ((state_movement == 0)) {
    1346:	80 91 f6 04 	lds	r24, 0x04F6
    134a:	90 91 f7 04 	lds	r25, 0x04F7
    134e:	89 2b       	or	r24, r25
    1350:	09 f0       	breq	.+2      	; 0x1354 <rangoli+0x29c>
    1352:	a0 c0       	rjmp	.+320    	; 0x1494 <rangoli+0x3dc>
              if ((dist < 15)) {
    1354:	80 91 ea 04 	lds	r24, 0x04EA
    1358:	90 91 eb 04 	lds	r25, 0x04EB
    135c:	8f 30       	cpi	r24, 0x0F	; 15
    135e:	91 05       	cpc	r25, r1
    1360:	74 f4       	brge	.+28     	; 0x137e <rangoli+0x2c6>
                _s.MOVE_FWD = 1;
    1362:	20 91 bf 04 	lds	r18, 0x04BF
                (MOTOR_LEFT_SPEED_v = 100), (_s.MOTOR_LEFT_SPEED = 1);
    1366:	84 e6       	ldi	r24, 0x64	; 100
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 d5 04 	sts	0x04D5, r25
    136e:	80 93 d4 04 	sts	0x04D4, r24
                (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    1372:	10 92 d7 04 	sts	0x04D7, r1
    1376:	10 92 d6 04 	sts	0x04D6, r1
    137a:	24 63       	ori	r18, 0x34	; 52
    137c:	0f c0       	rjmp	.+30     	; 0x139c <rangoli+0x2e4>
              } else {
                _s.MOVE_FWD = 1;
    137e:	20 91 bf 04 	lds	r18, 0x04BF
                (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
                (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    1382:	24 63       	ori	r18, 0x34	; 52
                if ((dist < 22)) {
    1384:	46 97       	sbiw	r24, 0x16	; 22
    1386:	6c f4       	brge	.+26     	; 0x13a2 <rangoli+0x2ea>
                  _s.MOVE_FWD = 1;
                  (MOTOR_LEFT_SPEED_v = 100), (_s.MOTOR_LEFT_SPEED = 1);
    1388:	84 e6       	ldi	r24, 0x64	; 100
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	90 93 d5 04 	sts	0x04D5, r25
    1390:	80 93 d4 04 	sts	0x04D4, r24
                  (MOTOR_RIGHT_SPEED_v = 100), (_s.MOTOR_RIGHT_SPEED = 1);
    1394:	90 93 d7 04 	sts	0x04D7, r25
    1398:	80 93 d6 04 	sts	0x04D6, r24
    139c:	20 93 bf 04 	sts	0x04BF, r18
    13a0:	79 c0       	rjmp	.+242    	; 0x1494 <rangoli+0x3dc>
                } else {
                  _s.MOVE_FWD = 1;
                  (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
    13a2:	10 92 d5 04 	sts	0x04D5, r1
    13a6:	10 92 d4 04 	sts	0x04D4, r1
                  (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    13aa:	10 92 d7 04 	sts	0x04D7, r1
    13ae:	10 92 d6 04 	sts	0x04D6, r1
    13b2:	20 93 bf 04 	sts	0x04BF, r18
                  _s.SET_SHAFT_L = 1;
    13b6:	20 91 c0 04 	lds	r18, 0x04C0
                  _s.SET_MOVEMENT_STATE = 1;
                  (DELAY_v = 8000), (_s.DELAY = 1);
    13ba:	80 e4       	ldi	r24, 0x40	; 64
    13bc:	9f e1       	ldi	r25, 0x1F	; 31
    13be:	90 93 e5 04 	sts	0x04E5, r25
    13c2:	80 93 e4 04 	sts	0x04E4, r24
    13c6:	20 6b       	ori	r18, 0xB0	; 176
    13c8:	20 93 c0 04 	sts	0x04C0, r18
    13cc:	63 c0       	rjmp	.+198    	; 0x1494 <rangoli+0x3dc>
                }
              }
            }
          }
        } else {
          (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
    13ce:	10 92 d5 04 	sts	0x04D5, r1
    13d2:	10 92 d4 04 	sts	0x04D4, r1
          (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    13d6:	10 92 d7 04 	sts	0x04D7, r1
    13da:	10 92 d6 04 	sts	0x04D6, r1
          if ((isFwd == 0)) {
    13de:	ab 2b       	or	r26, r27
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <rangoli+0x32e>
            _s.MOVE_FWD = 1;
    13e2:	64 63       	ori	r22, 0x34	; 52
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <rangoli+0x330>
          } else {
            _s.MOVE_REV = 1;
    13e6:	68 63       	ori	r22, 0x38	; 56
    13e8:	60 93 bf 04 	sts	0x04BF, r22
    13ec:	53 c0       	rjmp	.+166    	; 0x1494 <rangoli+0x3dc>
    } else {
      _state_1 = 0;
    }
    break;
  case 1:
    if (_s.BOT_MOVE) {
    13ee:	80 91 be 04 	lds	r24, 0x04BE
    13f2:	87 ff       	sbrs	r24, 7
    13f4:	2d c0       	rjmp	.+90     	; 0x1450 <rangoli+0x398>
      _state_1 = 0;
    13f6:	10 92 0e 02 	sts	0x020E, r1
    13fa:	4c c0       	rjmp	.+152    	; 0x1494 <rangoli+0x3dc>
    } else {
      _state_1 = 1;
    }
    break;
  case 2:
    if (_s.IS_FWD) {
    13fc:	80 91 be 04 	lds	r24, 0x04BE
    1400:	86 ff       	sbrs	r24, 6
    1402:	26 c0       	rjmp	.+76     	; 0x1450 <rangoli+0x398>
      _state_1 = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	44 c0       	rjmp	.+136    	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 2;
    }
    break;
  case 3:
    if (_s.GET_LENGTH) {
    1408:	80 91 be 04 	lds	r24, 0x04BE
    140c:	85 ff       	sbrs	r24, 5
    140e:	20 c0       	rjmp	.+64     	; 0x1450 <rangoli+0x398>
      _state_1 = 2;
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	3e c0       	rjmp	.+124    	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 3;
    }
    break;
  case 4:
    if (_s.GET_COLOR) {
    1414:	80 91 be 04 	lds	r24, 0x04BE
    1418:	84 ff       	sbrs	r24, 4
    141a:	1a c0       	rjmp	.+52     	; 0x1450 <rangoli+0x398>
      _state_1 = 3;
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	38 c0       	rjmp	.+112    	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 4;
    }
    break;
  case 5:
    if (_s.MAX_COLUMN) {
    1420:	80 91 be 04 	lds	r24, 0x04BE
    1424:	83 ff       	sbrs	r24, 3
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <rangoli+0x398>
      _state_1 = 4;
    1428:	84 e0       	ldi	r24, 0x04	; 4
    142a:	32 c0       	rjmp	.+100    	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 5;
    }
    break;
  case 6:
    if (_s.MAX_ROW) {
    142c:	80 91 be 04 	lds	r24, 0x04BE
    1430:	82 ff       	sbrs	r24, 2
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <rangoli+0x398>
      _state_1 = 5;
    1434:	85 e0       	ldi	r24, 0x05	; 5
    1436:	2c c0       	rjmp	.+88     	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 6;
    }
    break;
  case 7:
    if (_s.MOTOR_SHAFT_LEFT) {
    1438:	80 91 be 04 	lds	r24, 0x04BE
    143c:	81 ff       	sbrs	r24, 1
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <rangoli+0x398>
      _state_1 = 6;
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	26 c0       	rjmp	.+76     	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 7;
    }
    break;
  case 8:
    if (_s.IS_DRAW) {
    1444:	80 91 be 04 	lds	r24, 0x04BE
    1448:	80 ff       	sbrs	r24, 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <rangoli+0x398>
      _state_1 = 7;
    144c:	87 e0       	ldi	r24, 0x07	; 7
    144e:	20 c0       	rjmp	.+64     	; 0x1490 <rangoli+0x3d8>
    } else {
      _state_1 = 8;
    1450:	90 93 0e 02 	sts	0x020E, r25
    1454:	1f c0       	rjmp	.+62     	; 0x1494 <rangoli+0x3dc>
    }
    break;
  case 9:
    _s.SET_ROW = 0;;
    1456:	80 91 c1 04 	lds	r24, 0x04C1
    _s.INCREASE_CELL_COUNT = 0;;
    145a:	8c 7f       	andi	r24, 0xFC	; 252
    145c:	80 93 c1 04 	sts	0x04C1, r24
    _s.DELAY = 0;;
    _s.SERVO_C_OFF = 0;;
    _s.SERVO_C_ON = 0;;
    _s.SERVO_B_OFF = 0;;
    _s.SERVO_B_ON = 0;;
    _s.SERVO_A_OFF = 0;;
    1460:	20 91 bf 04 	lds	r18, 0x04BF
    _s.SERVO_A_ON = 0;;
    _s.MOTOR_RIGHT_SPEED = 0;;
    _s.MOTOR_LEFT_SPEED = 0;;
    _s.MOVE_REV = 0;;
    _s.MOVE_FWD = 0;;
    _s.MOVE_SOFT_RIGHT = 0;;
    1464:	21 70       	andi	r18, 0x01	; 1
    (SERVO_A_OFF_v = 160), (_s.SERVO_A_OFF = 1);
    1466:	80 ea       	ldi	r24, 0xA0	; 160
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 db 04 	sts	0x04DB, r25
    146e:	80 93 da 04 	sts	0x04DA, r24
    1472:	20 68       	ori	r18, 0x80	; 128
    1474:	20 93 bf 04 	sts	0x04BF, r18
    (SERVO_B_OFF_v = 160), (_s.SERVO_B_OFF = 1);
    1478:	90 93 df 04 	sts	0x04DF, r25
    147c:	80 93 de 04 	sts	0x04DE, r24
    (SERVO_C_OFF_v = 160), (_s.SERVO_C_OFF = 1);
    1480:	90 93 e3 04 	sts	0x04E3, r25
    1484:	80 93 e2 04 	sts	0x04E2, r24
    1488:	8a e0       	ldi	r24, 0x0A	; 10
    148a:	80 93 c0 04 	sts	0x04C0, r24
    _state_1 = 8;
    148e:	88 e0       	ldi	r24, 0x08	; 8
    1490:	80 93 0e 02 	sts	0x020E, r24
    break;
  default: break;
  }
  if (_s.MOVE_SOFT_RIGHT) { rangoli_O_MOVE_SOFT_RIGHT(); _s.MOVE_SOFT_RIGHT = 0; }
    1494:	90 91 bf 04 	lds	r25, 0x04BF
    1498:	91 ff       	sbrs	r25, 1
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <rangoli+0x3f2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
    149c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
    149e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    14a0:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore;                         // setting the command to the port
    14a2:	82 b9       	out	0x02, r24	; 2
    14a4:	9d 7f       	andi	r25, 0xFD	; 253
    14a6:	90 93 bf 04 	sts	0x04BF, r25
  if (_s.MOVE_FWD) { rangoli_O_MOVE_FWD(); _s.MOVE_FWD = 0; }
    14aa:	90 91 bf 04 	lds	r25, 0x04BF
    14ae:	92 ff       	sbrs	r25, 2
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <rangoli+0x408>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
    14b2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
    14b4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    14b6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore;                         // setting the command to the port
    14b8:	82 b9       	out	0x02, r24	; 2
    14ba:	9b 7f       	andi	r25, 0xFB	; 251
    14bc:	90 93 bf 04 	sts	0x04BF, r25
  if (_s.MOVE_REV) { rangoli_O_MOVE_REV(); _s.MOVE_REV = 0; }
    14c0:	90 91 bf 04 	lds	r25, 0x04BF
    14c4:	93 ff       	sbrs	r25, 3
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <rangoli+0x41e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F;                         // removing upper nibbel as it is not needed
 PortARestore = PORTA;                         // reading the PORTA's original status
    14c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0;                         // setting lower direction nibbel to 0
    14ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction;         // adding lower nibbel for direction command and restoring the PORTA status
    14cc:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore;                         // setting the command to the port
    14ce:	82 b9       	out	0x02, r24	; 2
    14d0:	97 7f       	andi	r25, 0xF7	; 247
    14d2:	90 93 bf 04 	sts	0x04BF, r25
  if (_s.MOTOR_LEFT_SPEED) { rangoli_O_MOTOR_LEFT_SPEED(MOTOR_LEFT_SPEED_v); _s.MOTOR_LEFT_SPEED = 0; }
    14d6:	80 91 bf 04 	lds	r24, 0x04BF
    14da:	84 ff       	sbrs	r24, 4
    14dc:	0b c0       	rjmp	.+22     	; 0x14f4 <rangoli+0x43c>
    14de:	80 91 d4 04 	lds	r24, 0x04D4
    14e2:	90 91 d5 04 	lds	r25, 0x04D5
    14e6:	0e 94 ed 07 	call	0xfda	; 0xfda <rangoli_O_MOTOR_LEFT_SPEED>
    14ea:	80 91 bf 04 	lds	r24, 0x04BF
    14ee:	8f 7e       	andi	r24, 0xEF	; 239
    14f0:	80 93 bf 04 	sts	0x04BF, r24
  if (_s.MOTOR_RIGHT_SPEED) { rangoli_O_MOTOR_RIGHT_SPEED(MOTOR_RIGHT_SPEED_v); _s.MOTOR_RIGHT_SPEED = 0; }
    14f4:	80 91 bf 04 	lds	r24, 0x04BF
    14f8:	85 ff       	sbrs	r24, 5
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <rangoli+0x45a>
    14fc:	80 91 d6 04 	lds	r24, 0x04D6
    1500:	90 91 d7 04 	lds	r25, 0x04D7
    1504:	0e 94 49 08 	call	0x1092	; 0x1092 <rangoli_O_MOTOR_RIGHT_SPEED>
    1508:	80 91 bf 04 	lds	r24, 0x04BF
    150c:	8f 7d       	andi	r24, 0xDF	; 223
    150e:	80 93 bf 04 	sts	0x04BF, r24
  if (_s.SERVO_A_ON) { rangoli_O_SERVO_A_ON(SERVO_A_ON_v); _s.SERVO_A_ON = 0; }
    1512:	80 91 bf 04 	lds	r24, 0x04BF
    1516:	86 ff       	sbrs	r24, 6
    1518:	0b c0       	rjmp	.+22     	; 0x1530 <rangoli+0x478>
    151a:	80 91 d8 04 	lds	r24, 0x04D8
    151e:	90 91 d9 04 	lds	r25, 0x04D9
    1522:	0e 94 2a 08 	call	0x1054	; 0x1054 <rangoli_O_SERVO_A_ON>
    1526:	80 91 bf 04 	lds	r24, 0x04BF
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	80 93 bf 04 	sts	0x04BF, r24
  if (_s.SERVO_A_OFF) { rangoli_O_SERVO_A_OFF(SERVO_A_OFF_v); _s.SERVO_A_OFF = 0; }
    1530:	80 91 bf 04 	lds	r24, 0x04BF
    1534:	87 ff       	sbrs	r24, 7
    1536:	0b c0       	rjmp	.+22     	; 0x154e <rangoli+0x496>
    1538:	80 91 da 04 	lds	r24, 0x04DA
    153c:	90 91 db 04 	lds	r25, 0x04DB
    1540:	0e 94 2d 08 	call	0x105a	; 0x105a <rangoli_O_SERVO_A_OFF>
    1544:	80 91 bf 04 	lds	r24, 0x04BF
    1548:	8f 77       	andi	r24, 0x7F	; 127
    154a:	80 93 bf 04 	sts	0x04BF, r24
  if (_s.SERVO_B_ON) { rangoli_O_SERVO_B_ON(SERVO_B_ON_v); _s.SERVO_B_ON = 0; }
    154e:	80 91 c0 04 	lds	r24, 0x04C0
    1552:	80 ff       	sbrs	r24, 0
    1554:	0b c0       	rjmp	.+22     	; 0x156c <rangoli+0x4b4>
    1556:	80 91 dc 04 	lds	r24, 0x04DC
    155a:	90 91 dd 04 	lds	r25, 0x04DD
    155e:	0e 94 fb 07 	call	0xff6	; 0xff6 <rangoli_O_SERVO_B_ON>
    1562:	80 91 c0 04 	lds	r24, 0x04C0
    1566:	8e 7f       	andi	r24, 0xFE	; 254
    1568:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SERVO_B_OFF) { rangoli_O_SERVO_B_OFF(SERVO_B_OFF_v); _s.SERVO_B_OFF = 0; }
    156c:	80 91 c0 04 	lds	r24, 0x04C0
    1570:	81 ff       	sbrs	r24, 1
    1572:	0b c0       	rjmp	.+22     	; 0x158a <rangoli+0x4d2>
    1574:	80 91 de 04 	lds	r24, 0x04DE
    1578:	90 91 df 04 	lds	r25, 0x04DF
    157c:	0e 94 56 08 	call	0x10ac	; 0x10ac <rangoli_O_SERVO_B_OFF>
    1580:	80 91 c0 04 	lds	r24, 0x04C0
    1584:	8d 7f       	andi	r24, 0xFD	; 253
    1586:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SERVO_C_ON) { rangoli_O_SERVO_C_ON(SERVO_C_ON_v); _s.SERVO_C_ON = 0; }
    158a:	80 91 c0 04 	lds	r24, 0x04C0
    158e:	82 ff       	sbrs	r24, 2
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <rangoli+0x4f0>
    1592:	80 91 e0 04 	lds	r24, 0x04E0
    1596:	90 91 e1 04 	lds	r25, 0x04E1
    159a:	0e 94 f8 07 	call	0xff0	; 0xff0 <rangoli_O_SERVO_C_ON>
    159e:	80 91 c0 04 	lds	r24, 0x04C0
    15a2:	8b 7f       	andi	r24, 0xFB	; 251
    15a4:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SERVO_C_OFF) { rangoli_O_SERVO_C_OFF(SERVO_C_OFF_v); _s.SERVO_C_OFF = 0; }
    15a8:	80 91 c0 04 	lds	r24, 0x04C0
    15ac:	83 ff       	sbrs	r24, 3
    15ae:	0b c0       	rjmp	.+22     	; 0x15c6 <rangoli+0x50e>
    15b0:	80 91 e2 04 	lds	r24, 0x04E2
    15b4:	90 91 e3 04 	lds	r25, 0x04E3
    15b8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <rangoli_O_SERVO_C_OFF>
    15bc:	80 91 c0 04 	lds	r24, 0x04C0
    15c0:	87 7f       	andi	r24, 0xF7	; 247
    15c2:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.DELAY) { rangoli_O_DELAY(DELAY_v); _s.DELAY = 0; }
    15c6:	80 91 c0 04 	lds	r24, 0x04C0
    15ca:	84 ff       	sbrs	r24, 4
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <rangoli+0x52c>
    15ce:	80 91 e4 04 	lds	r24, 0x04E4
    15d2:	90 91 e5 04 	lds	r25, 0x04E5
    15d6:	0e 94 f5 07 	call	0xfea	; 0xfea <rangoli_O_DELAY>
    15da:	80 91 c0 04 	lds	r24, 0x04C0
    15de:	8f 7e       	andi	r24, 0xEF	; 239
    15e0:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SET_SHAFT_L) { rangoli_O_SET_SHAFT_L(); _s.SET_SHAFT_L = 0; }
    15e4:	80 91 c0 04 	lds	r24, 0x04C0
    15e8:	85 ff       	sbrs	r24, 5
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <rangoli+0x542>
{
	movementState++;
}
void set_shaft_l()				// Set the leftShaftCounter to 0
{
	leftShaftCounter=0;
    15ec:	10 92 1b 03 	sts	0x031B, r1
    15f0:	10 92 1a 03 	sts	0x031A, r1
    15f4:	8f 7d       	andi	r24, 0xDF	; 223
    15f6:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SET_BOT_MOVE) { rangoli_O_SET_BOT_MOVE(); _s.SET_BOT_MOVE = 0; }
    15fa:	80 91 c0 04 	lds	r24, 0x04C0
    15fe:	86 ff       	sbrs	r24, 6
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <rangoli+0x558>
	_delay_ms(val);
}

void set_bot_move()				// Returns botMove status.
{
	botMove=0;
    1602:	10 92 b7 04 	sts	0x04B7, r1
    1606:	10 92 b6 04 	sts	0x04B6, r1
    160a:	8f 7b       	andi	r24, 0xBF	; 191
    160c:	80 93 c0 04 	sts	0x04C0, r24
  if (_s.SET_MOVEMENT_STATE) { rangoli_O_SET_MOVEMENT_STATE(); _s.SET_MOVEMENT_STATE = 0; }
    1610:	20 91 c0 04 	lds	r18, 0x04C0
    1614:	27 ff       	sbrs	r18, 7
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <rangoli+0x578>
}

void set_movement_state()			// Increments movementState
{
	movementState++;
    1618:	80 91 04 02 	lds	r24, 0x0204
    161c:	90 91 05 02 	lds	r25, 0x0205
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	90 93 05 02 	sts	0x0205, r25
    1626:	80 93 04 02 	sts	0x0204, r24
    162a:	2f 77       	andi	r18, 0x7F	; 127
    162c:	20 93 c0 04 	sts	0x04C0, r18
  if (_s.INCREASE_CELL_COUNT) { rangoli_O_INCREASE_CELL_COUNT(); _s.INCREASE_CELL_COUNT = 0; }
    1630:	60 91 c1 04 	lds	r22, 0x04C1
    1634:	60 ff       	sbrs	r22, 0
    1636:	1e c0       	rjmp	.+60     	; 0x1674 <rangoli+0x5bc>
	return noofpixels[cellCountinImage];

}
void increase_cell_count()			// Increment cell count.
{
	currentCol+=noofpixels[cellCountinImage];
    1638:	40 91 b8 04 	lds	r20, 0x04B8
    163c:	50 91 b9 04 	lds	r21, 0x04B9
    1640:	fa 01       	movw	r30, r20
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	ec 51       	subi	r30, 0x1C	; 28
    1648:	fc 4f       	sbci	r31, 0xFC	; 252
    164a:	80 91 08 02 	lds	r24, 0x0208
    164e:	90 91 09 02 	lds	r25, 0x0209
    1652:	20 81       	ld	r18, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	90 93 09 02 	sts	0x0209, r25
    165e:	80 93 08 02 	sts	0x0208, r24
	cellCountinImage++;
    1662:	4f 5f       	subi	r20, 0xFF	; 255
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	50 93 b9 04 	sts	0x04B9, r21
    166a:	40 93 b8 04 	sts	0x04B8, r20
    166e:	6e 7f       	andi	r22, 0xFE	; 254
    1670:	60 93 c1 04 	sts	0x04C1, r22
  if (_s.SET_ROW) { rangoli_O_SET_ROW(); _s.SET_ROW = 0; }
    1674:	80 91 c1 04 	lds	r24, 0x04C1
    1678:	81 ff       	sbrs	r24, 1
    167a:	2b c0       	rjmp	.+86     	; 0x16d2 <rangoli+0x61a>
}


void set_currentCol()		// Set bot parameters when its ready to draw the next line.
{
	currentRow++;
    167c:	80 91 06 02 	lds	r24, 0x0206
    1680:	90 91 07 02 	lds	r25, 0x0207
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	90 93 07 02 	sts	0x0207, r25
    168a:	80 93 06 02 	sts	0x0206, r24
	currentCol=0;
    168e:	10 92 09 02 	sts	0x0209, r1
    1692:	10 92 08 02 	sts	0x0208, r1
	endofRow=0;
    1696:	10 92 0d 02 	sts	0x020D, r1
    169a:	10 92 0c 02 	sts	0x020C, r1
	movementState=0;
    169e:	10 92 05 02 	sts	0x0205, r1
    16a2:	10 92 04 02 	sts	0x0204, r1
	if(is_Fwd==0)
    16a6:	80 91 0a 02 	lds	r24, 0x020A
    16aa:	90 91 0b 02 	lds	r25, 0x020B
    16ae:	89 2b       	or	r24, r25
    16b0:	39 f4       	brne	.+14     	; 0x16c0 <rangoli+0x608>
		is_Fwd=1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 0b 02 	sts	0x020B, r25
    16ba:	80 93 0a 02 	sts	0x020A, r24
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <rangoli+0x610>
	else
		is_Fwd=0;
    16c0:	10 92 0b 02 	sts	0x020B, r1
    16c4:	10 92 0a 02 	sts	0x020A, r1
    16c8:	80 91 c1 04 	lds	r24, 0x04C1
    16cc:	8d 7f       	andi	r24, 0xFD	; 253
    16ce:	80 93 c1 04 	sts	0x04C1, r24
  _s.MAX_ROW = 0;
  _s.MAX_COLUMN = 0;
  _s.GET_COLOR = 0;
  _s.GET_LENGTH = 0;
  _s.IS_FWD = 0;
  _s.BOT_MOVE = 0;
    16d2:	10 92 be 04 	sts	0x04BE, r1
  _s.MOVEMENT_STATE = 0;
    16d6:	80 91 bf 04 	lds	r24, 0x04BF
    16da:	8e 7f       	andi	r24, 0xFE	; 254
    16dc:	80 93 bf 04 	sts	0x04BF, r24
  return 1;
}
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	df 90       	pop	r13
    16f2:	cf 90       	pop	r12
    16f4:	08 95       	ret

000016f6 <help>:
static integer move_bot;
static integer state_movement;
static unsigned char _state_1 = 9;
void rangoli_I_IS_DRAW(integer _v) {
  _s.IS_DRAW = 1;
  IS_DRAW_v = _v;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 c3 04 	sts	0x04C3, r25
    16fe:	80 93 c2 04 	sts	0x04C2, r24
}
void rangoli_I_MOTOR_SHAFT_LEFT(integer _v) {
  _s.MOTOR_SHAFT_LEFT = 1;
  MOTOR_SHAFT_LEFT_v = _v;
    1702:	10 92 c5 04 	sts	0x04C5, r1
    1706:	10 92 c4 04 	sts	0x04C4, r1
}
void rangoli_I_MAX_ROW(integer _v) {
  _s.MAX_ROW = 1;
  MAX_ROW_v = _v;
    170a:	10 92 c7 04 	sts	0x04C7, r1
    170e:	10 92 c6 04 	sts	0x04C6, r1
}
void rangoli_I_MAX_COLUMN(integer _v) {
  _s.MAX_COLUMN = 1;
  MAX_COLUMN_v = _v;
    1712:	90 93 c9 04 	sts	0x04C9, r25
    1716:	80 93 c8 04 	sts	0x04C8, r24
}
void rangoli_I_GET_COLOR(integer _v) {
  _s.GET_COLOR = 1;
  GET_COLOR_v = _v;
    171a:	90 93 cb 04 	sts	0x04CB, r25
    171e:	80 93 ca 04 	sts	0x04CA, r24
}
void rangoli_I_GET_LENGTH(integer _v) {
  _s.GET_LENGTH = 1;
  GET_LENGTH_v = _v;
    1722:	25 e0       	ldi	r18, 0x05	; 5
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	30 93 cd 04 	sts	0x04CD, r19
    172a:	20 93 cc 04 	sts	0x04CC, r18
}
void rangoli_I_IS_FWD(integer _v) {
  _s.IS_FWD = 1;
  IS_FWD_v = _v;
    172e:	10 92 cf 04 	sts	0x04CF, r1
    1732:	10 92 ce 04 	sts	0x04CE, r1
}
void rangoli_I_BOT_MOVE(integer _v) {
  _s.BOT_MOVE = 1;
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	80 93 be 04 	sts	0x04BE, r24
  BOT_MOVE_v = _v;
    173c:	30 93 d1 04 	sts	0x04D1, r19
    1740:	20 93 d0 04 	sts	0x04D0, r18
}
void rangoli_I_MOVEMENT_STATE(integer _v) {
  _s.MOVEMENT_STATE = 1;
    1744:	80 91 bf 04 	lds	r24, 0x04BF
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	80 93 bf 04 	sts	0x04BF, r24
  MOVEMENT_STATE_v = _v;
    174e:	10 92 d3 04 	sts	0x04D3, r1
    1752:	10 92 d2 04 	sts	0x04D2, r1
    rangoli_I_GET_COLOR(1);
    rangoli_I_GET_LENGTH(5);
    rangoli_I_IS_FWD(0);
    rangoli_I_BOT_MOVE(5);
    rangoli_I_MOVEMENT_STATE(0);
}
    1756:	08 95       	ret

00001758 <help2>:
static integer move_bot;
static integer state_movement;
static unsigned char _state_1 = 9;
void rangoli_I_IS_DRAW(integer _v) {
  _s.IS_DRAW = 1;
  IS_DRAW_v = _v;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	90 93 c3 04 	sts	0x04C3, r25
    1760:	80 93 c2 04 	sts	0x04C2, r24
}
void rangoli_I_MOTOR_SHAFT_LEFT(integer _v) {
  _s.MOTOR_SHAFT_LEFT = 1;
  MOTOR_SHAFT_LEFT_v = _v;
    1764:	10 92 c5 04 	sts	0x04C5, r1
    1768:	10 92 c4 04 	sts	0x04C4, r1
}
void rangoli_I_MAX_ROW(integer _v) {
  _s.MAX_ROW = 1;
  MAX_ROW_v = _v;
    176c:	10 92 c7 04 	sts	0x04C7, r1
    1770:	10 92 c6 04 	sts	0x04C6, r1
}
void rangoli_I_MAX_COLUMN(integer _v) {
  _s.MAX_COLUMN = 1;
  MAX_COLUMN_v = _v;
    1774:	10 92 c9 04 	sts	0x04C9, r1
    1778:	10 92 c8 04 	sts	0x04C8, r1
}
void rangoli_I_GET_COLOR(integer _v) {
  _s.GET_COLOR = 1;
  GET_COLOR_v = _v;
    177c:	10 92 cb 04 	sts	0x04CB, r1
    1780:	10 92 ca 04 	sts	0x04CA, r1
}
void rangoli_I_GET_LENGTH(integer _v) {
  _s.GET_LENGTH = 1;
  GET_LENGTH_v = _v;
    1784:	25 e0       	ldi	r18, 0x05	; 5
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	30 93 cd 04 	sts	0x04CD, r19
    178c:	20 93 cc 04 	sts	0x04CC, r18
}
void rangoli_I_IS_FWD(integer _v) {
  _s.IS_FWD = 1;
  IS_FWD_v = _v;
    1790:	10 92 cf 04 	sts	0x04CF, r1
    1794:	10 92 ce 04 	sts	0x04CE, r1
}
void rangoli_I_BOT_MOVE(integer _v) {
  _s.BOT_MOVE = 1;
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	80 93 be 04 	sts	0x04BE, r24
  BOT_MOVE_v = _v;
    179e:	30 93 d1 04 	sts	0x04D1, r19
    17a2:	20 93 d0 04 	sts	0x04D0, r18
}
void rangoli_I_MOVEMENT_STATE(integer _v) {
  _s.MOVEMENT_STATE = 1;
    17a6:	80 91 bf 04 	lds	r24, 0x04BF
    17aa:	81 60       	ori	r24, 0x01	; 1
    17ac:	80 93 bf 04 	sts	0x04BF, r24
  MOVEMENT_STATE_v = _v;
    17b0:	10 92 d3 04 	sts	0x04D3, r1
    17b4:	10 92 d2 04 	sts	0x04D2, r1
    rangoli_I_GET_COLOR(0);
    rangoli_I_GET_LENGTH(5);
    rangoli_I_IS_FWD(0);
    rangoli_I_BOT_MOVE(5);
    rangoli_I_MOVEMENT_STATE(0);
}
    17b8:	08 95       	ret

000017ba <main>:

/****************************** Main function ***************************/
void main()
{
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
 init_devices();
    17be:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <init_devices>
  _s.MAX_ROW = 0;
  _s.MAX_COLUMN = 0;
  _s.GET_COLOR = 0;
  _s.GET_LENGTH = 0;
  _s.IS_FWD = 0;
  _s.BOT_MOVE = 0;
    17c2:	10 92 be 04 	sts	0x04BE, r1
  _s.MOVEMENT_STATE = 0;
    17c6:	80 91 bf 04 	lds	r24, 0x04BF
    17ca:	8e 7f       	andi	r24, 0xFE	; 254
    17cc:	80 93 bf 04 	sts	0x04BF, r24
/****************************** Main function ***************************/
void main()
{
 init_devices();
 rangoli_reset();
 rangoli();
    17d0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rangoli>
  _s.IS_DRAW = 1;
  IS_DRAW_v = _v;
}
void rangoli_I_MOTOR_SHAFT_LEFT(integer _v) {
  _s.MOTOR_SHAFT_LEFT = 1;
  MOTOR_SHAFT_LEFT_v = _v;
    17d4:	c1 e0       	ldi	r28, 0x01	; 1
    17d6:	d0 e0       	ldi	r29, 0x00	; 0
{
	return botMove;
}
int isDraw()			// Returns the value of inputFinished
{
	return inputFinished;
    17d8:	80 91 b2 04 	lds	r24, 0x04B2
    17dc:	90 91 b3 04 	lds	r25, 0x04B3
static integer length;
static integer move_bot;
static integer state_movement;
static unsigned char _state_1 = 9;
void rangoli_I_IS_DRAW(integer _v) {
  _s.IS_DRAW = 1;
    17e0:	20 91 be 04 	lds	r18, 0x04BE
  IS_DRAW_v = _v;
    17e4:	90 93 c3 04 	sts	0x04C3, r25
    17e8:	80 93 c2 04 	sts	0x04C2, r24
{
	leftShaftCounter=0;
}
int get_shaft_l()				// Returns the value of leftShaftCounter
{
	return leftShaftCounter;
    17ec:	80 91 1a 03 	lds	r24, 0x031A
    17f0:	90 91 1b 03 	lds	r25, 0x031B
}
void rangoli_I_MOTOR_SHAFT_LEFT(integer _v) {
  _s.MOTOR_SHAFT_LEFT = 1;
    17f4:	23 60       	ori	r18, 0x03	; 3
    17f6:	20 93 be 04 	sts	0x04BE, r18
  MOTOR_SHAFT_LEFT_v = _v;
    17fa:	90 93 c5 04 	sts	0x04C5, r25
    17fe:	80 93 c4 04 	sts	0x04C4, r24
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	20 91 06 02 	lds	r18, 0x0206
    180a:	30 91 07 02 	lds	r19, 0x0207
    180e:	80 91 ac 04 	lds	r24, 0x04AC
    1812:	90 91 ad 04 	lds	r25, 0x04AD
    1816:	28 17       	cp	r18, r24
    1818:	39 07       	cpc	r19, r25
    181a:	14 f0       	brlt	.+4      	; 0x1820 <main+0x66>
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	50 e0       	ldi	r21, 0x00	; 0
}
void rangoli_I_MAX_ROW(integer _v) {
  _s.MAX_ROW = 1;
    1820:	80 91 be 04 	lds	r24, 0x04BE
    1824:	84 60       	ori	r24, 0x04	; 4
    1826:	80 93 be 04 	sts	0x04BE, r24
  MAX_ROW_v = _v;
    182a:	50 93 c7 04 	sts	0x04C7, r21
    182e:	40 93 c6 04 	sts	0x04C6, r20
		return 1;
		
}
int maxCol()			// Returns whether we have drawn all columns of a row or not.
{
	if(currentCol < max_col)
    1832:	20 91 08 02 	lds	r18, 0x0208
    1836:	30 91 09 02 	lds	r19, 0x0209
    183a:	80 91 ae 04 	lds	r24, 0x04AE
    183e:	90 91 af 04 	lds	r25, 0x04AF
    1842:	28 17       	cp	r18, r24
    1844:	39 07       	cpc	r19, r25
    1846:	1c f4       	brge	.+6      	; 0x184e <main+0x94>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	06 c0       	rjmp	.+12     	; 0x185a <main+0xa0>
		return 0;
	else
	{
		

		endofRow=1;
    184e:	d0 93 0d 02 	sts	0x020D, r29
    1852:	c0 93 0c 02 	sts	0x020C, r28
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
}
void rangoli_I_MAX_COLUMN(integer _v) {
  _s.MAX_COLUMN = 1;
    185a:	20 91 be 04 	lds	r18, 0x04BE
  MAX_COLUMN_v = _v;
    185e:	90 93 c9 04 	sts	0x04C9, r25
    1862:	80 93 c8 04 	sts	0x04C8, r24

	}
}
int get_col()					// Returns the color value.
{
	return colourValue[cellCountinImage];
    1866:	e0 91 b8 04 	lds	r30, 0x04B8
    186a:	f0 91 b9 04 	lds	r31, 0x04B9
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	df 01       	movw	r26, r30
    1874:	a4 5e       	subi	r26, 0xE4	; 228
    1876:	bc 4f       	sbci	r27, 0xFC	; 252
    1878:	8d 91       	ld	r24, X+
    187a:	9c 91       	ld	r25, X
}
void rangoli_I_GET_COLOR(integer _v) {
  _s.GET_COLOR = 1;
  GET_COLOR_v = _v;
    187c:	90 93 cb 04 	sts	0x04CB, r25
    1880:	80 93 ca 04 	sts	0x04CA, r24
}
int get_length()				// Returns the length value.
{
	return noofpixels[cellCountinImage];
    1884:	ec 51       	subi	r30, 0x1C	; 28
    1886:	fc 4f       	sbci	r31, 0xFC	; 252
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
}
void rangoli_I_GET_LENGTH(integer _v) {
  _s.GET_LENGTH = 1;
  GET_LENGTH_v = _v;
    188c:	90 93 cd 04 	sts	0x04CD, r25
    1890:	80 93 cc 04 	sts	0x04CC, r24

char ch[3];

int get_isFwd() 		// Returns the value of is_Fwd
{
	return is_Fwd;
    1894:	80 91 0a 02 	lds	r24, 0x020A
    1898:	90 91 0b 02 	lds	r25, 0x020B
}
void rangoli_I_IS_FWD(integer _v) {
  _s.IS_FWD = 1;
  IS_FWD_v = _v;
    189c:	90 93 cf 04 	sts	0x04CF, r25
    18a0:	80 93 ce 04 	sts	0x04CE, r24
{
	return movementState;
}
int get_botmove()		// Returns the value of botMove
{
	return botMove;
    18a4:	80 91 b6 04 	lds	r24, 0x04B6
    18a8:	90 91 b7 04 	lds	r25, 0x04B7
}
void rangoli_I_BOT_MOVE(integer _v) {
  _s.BOT_MOVE = 1;
    18ac:	28 6f       	ori	r18, 0xF8	; 248
    18ae:	20 93 be 04 	sts	0x04BE, r18
  BOT_MOVE_v = _v;
    18b2:	90 93 d1 04 	sts	0x04D1, r25
    18b6:	80 93 d0 04 	sts	0x04D0, r24
{
	return is_Fwd;
}
int get_movementstate()		// Returns the value of movementState
{
	return movementState;
    18ba:	20 91 04 02 	lds	r18, 0x0204
    18be:	30 91 05 02 	lds	r19, 0x0205
}
void rangoli_I_MOVEMENT_STATE(integer _v) {
  _s.MOVEMENT_STATE = 1;
    18c2:	80 91 bf 04 	lds	r24, 0x04BF
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	80 93 bf 04 	sts	0x04BF, r24
  MOVEMENT_STATE_v = _v;
    18cc:	30 93 d3 04 	sts	0x04D3, r19
    18d0:	20 93 d2 04 	sts	0x04D2, r18
		    
   // if (i==0) help();
	//	if(i == 1) help2();
	
    
    rangoli();
    18d4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <rangoli>
    18d8:	7f cf       	rjmp	.-258    	; 0x17d8 <main+0x1e>

000018da <reverse>:

}

/* reverse: reverse string s in place */
void reverse(char s[])
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    18de:	dc 01       	movw	r26, r24
    18e0:	0d 90       	ld	r0, X+
    18e2:	00 20       	and	r0, r0
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <reverse+0x6>
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	a8 1b       	sub	r26, r24
    18ea:	b9 0b       	sbc	r27, r25
    18ec:	ad 01       	movw	r20, r26
    18ee:	41 50       	subi	r20, 0x01	; 1
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	ec 01       	movw	r28, r24
    18f4:	fc 01       	movw	r30, r24
    18f6:	ea 0f       	add	r30, r26
    18f8:	fb 1f       	adc	r31, r27
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <reverse+0x36>
        c = s[i];
    1900:	98 81       	ld	r25, Y
        s[i] = s[j];
    1902:	80 81       	ld	r24, Z
    1904:	89 93       	st	Y+, r24
        s[j] = c;
    1906:	90 83       	st	Z, r25

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	41 50       	subi	r20, 0x01	; 1
    190e:	50 40       	sbci	r21, 0x00	; 0
    1910:	31 97       	sbiw	r30, 0x01	; 1
    1912:	24 17       	cp	r18, r20
    1914:	35 07       	cpc	r19, r21
    1916:	a4 f3       	brlt	.-24     	; 0x1900 <reverse+0x26>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <itoa1>:
void itoa1(int n, char s[])
{
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	8c 01       	movw	r16, r24
    192c:	7b 01       	movw	r14, r22
    192e:	9c 01       	movw	r18, r24
    1930:	97 ff       	sbrs	r25, 7
    1932:	04 c0       	rjmp	.+8      	; 0x193c <itoa1+0x1e>
    1934:	22 27       	eor	r18, r18
    1936:	33 27       	eor	r19, r19
    1938:	28 1b       	sub	r18, r24
    193a:	39 0b       	sbc	r19, r25
    193c:	c0 e0       	ldi	r28, 0x00	; 0
    193e:	d0 e0       	ldi	r29, 0x00	; 0
    int i, sign;
    if ((sign = n) < 0) /* record sign */
         n = -n;          /* make n positive */
    i = 0;
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
    1940:	f7 01       	movw	r30, r14
    1942:	ec 0f       	add	r30, r28
    1944:	fd 1f       	adc	r31, r29
    1946:	c9 01       	movw	r24, r18
    1948:	6a e0       	ldi	r22, 0x0A	; 10
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 43 14 	call	0x2886	; 0x2886 <__divmodhi4>
    1950:	80 5d       	subi	r24, 0xD0	; 208
    1952:	80 83       	st	Z, r24
    1954:	21 96       	adiw	r28, 0x01	; 1
    } while ((n /= 10) > 0);     /* delete it */
    1956:	c9 01       	movw	r24, r18
    1958:	6a e0       	ldi	r22, 0x0A	; 10
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 43 14 	call	0x2886	; 0x2886 <__divmodhi4>
    1960:	9b 01       	movw	r18, r22
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	64 f3       	brlt	.-40     	; 0x1940 <itoa1+0x22>
    if (sign < 0)
    1968:	17 ff       	sbrs	r17, 7
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <itoa1+0x5a>
         s[i++] = '-';
    196c:	f7 01       	movw	r30, r14
    196e:	ec 0f       	add	r30, r28
    1970:	fd 1f       	adc	r31, r29
    1972:	8d e2       	ldi	r24, 0x2D	; 45
    1974:	80 83       	st	Z, r24
    1976:	21 96       	adiw	r28, 0x01	; 1
    s[i] = '\0';
    1978:	ce 0d       	add	r28, r14
    197a:	df 1d       	adc	r29, r15
    197c:	18 82       	st	Y, r1
    reverse(s);
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 6d 0c 	call	0x18da	; 0x18da <reverse>
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	08 95       	ret

00001992 <Sharp_estimation>:

unsigned int Sharp_estimation(unsigned char adc_reading)
{
        float distance;
        unsigned int distanceInt;
        distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
    19a0:	2f ee       	ldi	r18, 0xEF	; 239
    19a2:	39 ec       	ldi	r19, 0xC9	; 201
    19a4:	43 e9       	ldi	r20, 0x93	; 147
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 8d 14 	call	0x291a	; 0x291a <pow>
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
        distanceInt = (int)distance;
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	80 e8       	ldi	r24, 0x80	; 128
    19b6:	9f e3       	ldi	r25, 0x3F	; 63
    19b8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
    19bc:	2a e9       	ldi	r18, 0x9A	; 154
    19be:	39 ef       	ldi	r19, 0xF9	; 249
    19c0:	4e e2       	ldi	r20, 0x2E	; 46
    19c2:	55 e4       	ldi	r21, 0x45	; 69
    19c4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__mulsf3>
    19d4:	0e 94 6d 11 	call	0x22da	; 0x22da <__fixsfsi>
    19d8:	88 27       	eor	r24, r24
    19da:	77 fd       	sbrc	r23, 7
    19dc:	80 95       	com	r24
    19de:	98 2f       	mov	r25, r24
    19e0:	0e 94 0f 11 	call	0x221e	; 0x221e <__floatsisf>
    19e4:	0e 94 6d 11 	call	0x22da	; 0x22da <__fixsfsi>
    19e8:	9b 01       	movw	r18, r22
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	61 32       	cpi	r22, 0x21	; 33
    19ee:	78 07       	cpc	r23, r24
    19f0:	10 f0       	brcs	.+4      	; 0x19f6 <Sharp_estimation+0x64>
    19f2:	20 e2       	ldi	r18, 0x20	; 32
    19f4:	33 e0       	ldi	r19, 0x03	; 3
        if(distanceInt>800)
        {
                distanceInt=800;
        }
        return distanceInt;
}
    19f6:	c9 01       	movw	r24, r18
    19f8:	08 95       	ret

000019fa <front_dist_mm>:
int front_dist_mm(void) 
{
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
    19fa:	8b e0       	ldi	r24, 0x0B	; 11
    19fc:	0e 94 3b 05 	call	0xa76	; 0xa76 <ADC_Conversion>
 

 front_distance_mm=Sharp_estimation(analog_val);
    1a00:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Sharp_estimation>
  return front_distance_mm;         

  //return 100;
}
    1a04:	08 95       	ret

00001a06 <__fixunssfsi>:
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	7b 01       	movw	r14, r22
    1a10:	8c 01       	movw	r16, r24
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	5f e4       	ldi	r21, 0x4F	; 79
    1a1a:	0e 94 af 10 	call	0x215e	; 0x215e <__gesf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	8c f0       	brlt	.+34     	; 0x1a44 <__fixunssfsi+0x3e>
    1a22:	c8 01       	movw	r24, r16
    1a24:	b7 01       	movw	r22, r14
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	5f e4       	ldi	r21, 0x4F	; 79
    1a2e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__subsf3>
    1a32:	0e 94 6d 11 	call	0x22da	; 0x22da <__fixsfsi>
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	20 50       	subi	r18, 0x00	; 0
    1a3c:	30 40       	sbci	r19, 0x00	; 0
    1a3e:	40 40       	sbci	r20, 0x00	; 0
    1a40:	50 48       	sbci	r21, 0x80	; 128
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <__fixunssfsi+0x4a>
    1a44:	c8 01       	movw	r24, r16
    1a46:	b7 01       	movw	r22, r14
    1a48:	0e 94 6d 11 	call	0x22da	; 0x22da <__fixsfsi>
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	b9 01       	movw	r22, r18
    1a52:	ca 01       	movw	r24, r20
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	08 95       	ret

00001a5e <_fpadd_parts>:
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e3       	ldi	r30, 0x35	; 53
    1a64:	fd e0       	ldi	r31, 0x0D	; 13
    1a66:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	fa 01       	movw	r30, r20
    1a70:	9c 91       	ld	r25, X
    1a72:	92 30       	cpi	r25, 0x02	; 2
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <_fpadd_parts+0x1a>
    1a76:	39 c1       	rjmp	.+626    	; 0x1cea <_fpadd_parts+0x28c>
    1a78:	eb 01       	movw	r28, r22
    1a7a:	88 81       	ld	r24, Y
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <_fpadd_parts+0x24>
    1a80:	33 c1       	rjmp	.+614    	; 0x1ce8 <_fpadd_parts+0x28a>
    1a82:	94 30       	cpi	r25, 0x04	; 4
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <_fpadd_parts+0x42>
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <_fpadd_parts+0x2e>
    1a8a:	2f c1       	rjmp	.+606    	; 0x1cea <_fpadd_parts+0x28c>
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	9c 91       	ld	r25, X
    1a90:	11 97       	sbiw	r26, 0x01	; 1
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	98 17       	cp	r25, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <_fpadd_parts+0x3c>
    1a98:	28 c1       	rjmp	.+592    	; 0x1cea <_fpadd_parts+0x28c>
    1a9a:	af e0       	ldi	r26, 0x0F	; 15
    1a9c:	b2 e0       	ldi	r27, 0x02	; 2
    1a9e:	25 c1       	rjmp	.+586    	; 0x1cea <_fpadd_parts+0x28c>
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <_fpadd_parts+0x48>
    1aa4:	21 c1       	rjmp	.+578    	; 0x1ce8 <_fpadd_parts+0x28a>
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	a9 f4       	brne	.+42     	; 0x1ad4 <_fpadd_parts+0x76>
    1aaa:	92 30       	cpi	r25, 0x02	; 2
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <_fpadd_parts+0x52>
    1aae:	1d c1       	rjmp	.+570    	; 0x1cea <_fpadd_parts+0x28c>
    1ab0:	9a 01       	movw	r18, r20
    1ab2:	ad 01       	movw	r20, r26
    1ab4:	88 e0       	ldi	r24, 0x08	; 8
    1ab6:	ea 01       	movw	r28, r20
    1ab8:	09 90       	ld	r0, Y+
    1aba:	ae 01       	movw	r20, r28
    1abc:	e9 01       	movw	r28, r18
    1abe:	09 92       	st	Y+, r0
    1ac0:	9e 01       	movw	r18, r28
    1ac2:	81 50       	subi	r24, 0x01	; 1
    1ac4:	c1 f7       	brne	.-16     	; 0x1ab6 <_fpadd_parts+0x58>
    1ac6:	e2 01       	movw	r28, r4
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	9c 91       	ld	r25, X
    1ace:	89 23       	and	r24, r25
    1ad0:	81 83       	std	Z+1, r24	; 0x01
    1ad2:	08 c1       	rjmp	.+528    	; 0x1ce4 <_fpadd_parts+0x286>
    1ad4:	92 30       	cpi	r25, 0x02	; 2
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <_fpadd_parts+0x7c>
    1ad8:	07 c1       	rjmp	.+526    	; 0x1ce8 <_fpadd_parts+0x28a>
    1ada:	12 96       	adiw	r26, 0x02	; 2
    1adc:	2d 90       	ld	r2, X+
    1ade:	3c 90       	ld	r3, X
    1ae0:	13 97       	sbiw	r26, 0x03	; 3
    1ae2:	eb 01       	movw	r28, r22
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae8:	14 96       	adiw	r26, 0x04	; 4
    1aea:	ad 90       	ld	r10, X+
    1aec:	bd 90       	ld	r11, X+
    1aee:	cd 90       	ld	r12, X+
    1af0:	dc 90       	ld	r13, X
    1af2:	17 97       	sbiw	r26, 0x07	; 7
    1af4:	ec 80       	ldd	r14, Y+4	; 0x04
    1af6:	fd 80       	ldd	r15, Y+5	; 0x05
    1af8:	0e 81       	ldd	r16, Y+6	; 0x06
    1afa:	1f 81       	ldd	r17, Y+7	; 0x07
    1afc:	91 01       	movw	r18, r2
    1afe:	28 1b       	sub	r18, r24
    1b00:	39 0b       	sbc	r19, r25
    1b02:	b9 01       	movw	r22, r18
    1b04:	37 ff       	sbrs	r19, 7
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <_fpadd_parts+0xb2>
    1b08:	66 27       	eor	r22, r22
    1b0a:	77 27       	eor	r23, r23
    1b0c:	62 1b       	sub	r22, r18
    1b0e:	73 0b       	sbc	r23, r19
    1b10:	60 32       	cpi	r22, 0x20	; 32
    1b12:	71 05       	cpc	r23, r1
    1b14:	0c f0       	brlt	.+2      	; 0x1b18 <_fpadd_parts+0xba>
    1b16:	61 c0       	rjmp	.+194    	; 0x1bda <_fpadd_parts+0x17c>
    1b18:	12 16       	cp	r1, r18
    1b1a:	13 06       	cpc	r1, r19
    1b1c:	6c f5       	brge	.+90     	; 0x1b78 <_fpadd_parts+0x11a>
    1b1e:	37 01       	movw	r6, r14
    1b20:	48 01       	movw	r8, r16
    1b22:	06 2e       	mov	r0, r22
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <_fpadd_parts+0xd0>
    1b26:	96 94       	lsr	r9
    1b28:	87 94       	ror	r8
    1b2a:	77 94       	ror	r7
    1b2c:	67 94       	ror	r6
    1b2e:	0a 94       	dec	r0
    1b30:	d2 f7       	brpl	.-12     	; 0x1b26 <_fpadd_parts+0xc8>
    1b32:	21 e0       	ldi	r18, 0x01	; 1
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <_fpadd_parts+0xe6>
    1b3c:	22 0f       	add	r18, r18
    1b3e:	33 1f       	adc	r19, r19
    1b40:	44 1f       	adc	r20, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	6a 95       	dec	r22
    1b46:	d2 f7       	brpl	.-12     	; 0x1b3c <_fpadd_parts+0xde>
    1b48:	21 50       	subi	r18, 0x01	; 1
    1b4a:	30 40       	sbci	r19, 0x00	; 0
    1b4c:	40 40       	sbci	r20, 0x00	; 0
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	2e 21       	and	r18, r14
    1b52:	3f 21       	and	r19, r15
    1b54:	40 23       	and	r20, r16
    1b56:	51 23       	and	r21, r17
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	41 05       	cpc	r20, r1
    1b5e:	51 05       	cpc	r21, r1
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <_fpadd_parts+0x10c>
    1b62:	21 e0       	ldi	r18, 0x01	; 1
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	79 01       	movw	r14, r18
    1b6c:	8a 01       	movw	r16, r20
    1b6e:	e6 28       	or	r14, r6
    1b70:	f7 28       	or	r15, r7
    1b72:	08 29       	or	r16, r8
    1b74:	19 29       	or	r17, r9
    1b76:	3c c0       	rjmp	.+120    	; 0x1bf0 <_fpadd_parts+0x192>
    1b78:	23 2b       	or	r18, r19
    1b7a:	d1 f1       	breq	.+116    	; 0x1bf0 <_fpadd_parts+0x192>
    1b7c:	26 0e       	add	r2, r22
    1b7e:	37 1e       	adc	r3, r23
    1b80:	35 01       	movw	r6, r10
    1b82:	46 01       	movw	r8, r12
    1b84:	06 2e       	mov	r0, r22
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <_fpadd_parts+0x132>
    1b88:	96 94       	lsr	r9
    1b8a:	87 94       	ror	r8
    1b8c:	77 94       	ror	r7
    1b8e:	67 94       	ror	r6
    1b90:	0a 94       	dec	r0
    1b92:	d2 f7       	brpl	.-12     	; 0x1b88 <_fpadd_parts+0x12a>
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <_fpadd_parts+0x148>
    1b9e:	22 0f       	add	r18, r18
    1ba0:	33 1f       	adc	r19, r19
    1ba2:	44 1f       	adc	r20, r20
    1ba4:	55 1f       	adc	r21, r21
    1ba6:	6a 95       	dec	r22
    1ba8:	d2 f7       	brpl	.-12     	; 0x1b9e <_fpadd_parts+0x140>
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	30 40       	sbci	r19, 0x00	; 0
    1bae:	40 40       	sbci	r20, 0x00	; 0
    1bb0:	50 40       	sbci	r21, 0x00	; 0
    1bb2:	2a 21       	and	r18, r10
    1bb4:	3b 21       	and	r19, r11
    1bb6:	4c 21       	and	r20, r12
    1bb8:	5d 21       	and	r21, r13
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	41 05       	cpc	r20, r1
    1bc0:	51 05       	cpc	r21, r1
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <_fpadd_parts+0x16e>
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	59 01       	movw	r10, r18
    1bce:	6a 01       	movw	r12, r20
    1bd0:	a6 28       	or	r10, r6
    1bd2:	b7 28       	or	r11, r7
    1bd4:	c8 28       	or	r12, r8
    1bd6:	d9 28       	or	r13, r9
    1bd8:	0b c0       	rjmp	.+22     	; 0x1bf0 <_fpadd_parts+0x192>
    1bda:	82 15       	cp	r24, r2
    1bdc:	93 05       	cpc	r25, r3
    1bde:	2c f0       	brlt	.+10     	; 0x1bea <_fpadd_parts+0x18c>
    1be0:	1c 01       	movw	r2, r24
    1be2:	aa 24       	eor	r10, r10
    1be4:	bb 24       	eor	r11, r11
    1be6:	65 01       	movw	r12, r10
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <_fpadd_parts+0x192>
    1bea:	ee 24       	eor	r14, r14
    1bec:	ff 24       	eor	r15, r15
    1bee:	87 01       	movw	r16, r14
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	9c 91       	ld	r25, X
    1bf4:	d2 01       	movw	r26, r4
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	8c 91       	ld	r24, X
    1bfa:	98 17       	cp	r25, r24
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <_fpadd_parts+0x1a2>
    1bfe:	45 c0       	rjmp	.+138    	; 0x1c8a <_fpadd_parts+0x22c>
    1c00:	99 23       	and	r25, r25
    1c02:	39 f0       	breq	.+14     	; 0x1c12 <_fpadd_parts+0x1b4>
    1c04:	a8 01       	movw	r20, r16
    1c06:	97 01       	movw	r18, r14
    1c08:	2a 19       	sub	r18, r10
    1c0a:	3b 09       	sbc	r19, r11
    1c0c:	4c 09       	sbc	r20, r12
    1c0e:	5d 09       	sbc	r21, r13
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <_fpadd_parts+0x1c0>
    1c12:	a6 01       	movw	r20, r12
    1c14:	95 01       	movw	r18, r10
    1c16:	2e 19       	sub	r18, r14
    1c18:	3f 09       	sbc	r19, r15
    1c1a:	40 0b       	sbc	r20, r16
    1c1c:	51 0b       	sbc	r21, r17
    1c1e:	57 fd       	sbrc	r21, 7
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <_fpadd_parts+0x1d4>
    1c22:	11 82       	std	Z+1, r1	; 0x01
    1c24:	33 82       	std	Z+3, r3	; 0x03
    1c26:	22 82       	std	Z+2, r2	; 0x02
    1c28:	24 83       	std	Z+4, r18	; 0x04
    1c2a:	35 83       	std	Z+5, r19	; 0x05
    1c2c:	46 83       	std	Z+6, r20	; 0x06
    1c2e:	57 83       	std	Z+7, r21	; 0x07
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <_fpadd_parts+0x20e>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	81 83       	std	Z+1, r24	; 0x01
    1c36:	33 82       	std	Z+3, r3	; 0x03
    1c38:	22 82       	std	Z+2, r2	; 0x02
    1c3a:	88 27       	eor	r24, r24
    1c3c:	99 27       	eor	r25, r25
    1c3e:	dc 01       	movw	r26, r24
    1c40:	82 1b       	sub	r24, r18
    1c42:	93 0b       	sbc	r25, r19
    1c44:	a4 0b       	sbc	r26, r20
    1c46:	b5 0b       	sbc	r27, r21
    1c48:	84 83       	std	Z+4, r24	; 0x04
    1c4a:	95 83       	std	Z+5, r25	; 0x05
    1c4c:	a6 83       	std	Z+6, r26	; 0x06
    1c4e:	b7 83       	std	Z+7, r27	; 0x07
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <_fpadd_parts+0x20e>
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	44 1f       	adc	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	24 83       	std	Z+4, r18	; 0x04
    1c5c:	35 83       	std	Z+5, r19	; 0x05
    1c5e:	46 83       	std	Z+6, r20	; 0x06
    1c60:	57 83       	std	Z+7, r21	; 0x07
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	93 83       	std	Z+3, r25	; 0x03
    1c6a:	82 83       	std	Z+2, r24	; 0x02
    1c6c:	24 81       	ldd	r18, Z+4	; 0x04
    1c6e:	35 81       	ldd	r19, Z+5	; 0x05
    1c70:	46 81       	ldd	r20, Z+6	; 0x06
    1c72:	57 81       	ldd	r21, Z+7	; 0x07
    1c74:	da 01       	movw	r26, r20
    1c76:	c9 01       	movw	r24, r18
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	a1 09       	sbc	r26, r1
    1c7c:	b1 09       	sbc	r27, r1
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	af 4f       	sbci	r26, 0xFF	; 255
    1c84:	bf 43       	sbci	r27, 0x3F	; 63
    1c86:	28 f3       	brcs	.-54     	; 0x1c52 <_fpadd_parts+0x1f4>
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <_fpadd_parts+0x242>
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	ea 0c       	add	r14, r10
    1c92:	fb 1c       	adc	r15, r11
    1c94:	0c 1d       	adc	r16, r12
    1c96:	1d 1d       	adc	r17, r13
    1c98:	e4 82       	std	Z+4, r14	; 0x04
    1c9a:	f5 82       	std	Z+5, r15	; 0x05
    1c9c:	06 83       	std	Z+6, r16	; 0x06
    1c9e:	17 83       	std	Z+7, r17	; 0x07
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	80 83       	st	Z, r24
    1ca4:	24 81       	ldd	r18, Z+4	; 0x04
    1ca6:	35 81       	ldd	r19, Z+5	; 0x05
    1ca8:	46 81       	ldd	r20, Z+6	; 0x06
    1caa:	57 81       	ldd	r21, Z+7	; 0x07
    1cac:	57 ff       	sbrs	r21, 7
    1cae:	1a c0       	rjmp	.+52     	; 0x1ce4 <_fpadd_parts+0x286>
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	aa 27       	eor	r26, r26
    1cb4:	97 fd       	sbrc	r25, 7
    1cb6:	a0 95       	com	r26
    1cb8:	ba 2f       	mov	r27, r26
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	90 70       	andi	r25, 0x00	; 0
    1cbe:	a0 70       	andi	r26, 0x00	; 0
    1cc0:	b0 70       	andi	r27, 0x00	; 0
    1cc2:	56 95       	lsr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	37 95       	ror	r19
    1cc8:	27 95       	ror	r18
    1cca:	82 2b       	or	r24, r18
    1ccc:	93 2b       	or	r25, r19
    1cce:	a4 2b       	or	r26, r20
    1cd0:	b5 2b       	or	r27, r21
    1cd2:	84 83       	std	Z+4, r24	; 0x04
    1cd4:	95 83       	std	Z+5, r25	; 0x05
    1cd6:	a6 83       	std	Z+6, r26	; 0x06
    1cd8:	b7 83       	std	Z+7, r27	; 0x07
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	93 83       	std	Z+3, r25	; 0x03
    1ce2:	82 83       	std	Z+2, r24	; 0x02
    1ce4:	df 01       	movw	r26, r30
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <_fpadd_parts+0x28c>
    1ce8:	d2 01       	movw	r26, r4
    1cea:	cd 01       	movw	r24, r26
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	e2 e1       	ldi	r30, 0x12	; 18
    1cf2:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__>

00001cf6 <__subsf3>:
    1cf6:	a0 e2       	ldi	r26, 0x20	; 32
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e8       	ldi	r30, 0x81	; 129
    1cfc:	fe e0       	ldi	r31, 0x0E	; 14
    1cfe:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x18>
    1d02:	69 83       	std	Y+1, r22	; 0x01
    1d04:	7a 83       	std	Y+2, r23	; 0x02
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	2d 83       	std	Y+5, r18	; 0x05
    1d0c:	3e 83       	std	Y+6, r19	; 0x06
    1d0e:	4f 83       	std	Y+7, r20	; 0x07
    1d10:	58 87       	std	Y+8, r21	; 0x08
    1d12:	e9 e0       	ldi	r30, 0x09	; 9
    1d14:	ee 2e       	mov	r14, r30
    1d16:	f1 2c       	mov	r15, r1
    1d18:	ec 0e       	add	r14, r28
    1d1a:	fd 1e       	adc	r15, r29
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	b7 01       	movw	r22, r14
    1d22:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1d26:	8e 01       	movw	r16, r28
    1d28:	0f 5e       	subi	r16, 0xEF	; 239
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	05 96       	adiw	r24, 0x05	; 5
    1d30:	b8 01       	movw	r22, r16
    1d32:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1d36:	8a 89       	ldd	r24, Y+18	; 0x12
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	89 27       	eor	r24, r25
    1d3c:	8a 8b       	std	Y+18, r24	; 0x12
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b8 01       	movw	r22, r16
    1d42:	ae 01       	movw	r20, r28
    1d44:	47 5e       	subi	r20, 0xE7	; 231
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_fpadd_parts>
    1d4c:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    1d50:	a0 96       	adiw	r28, 0x20	; 32
    1d52:	e6 e0       	ldi	r30, 0x06	; 6
    1d54:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x18>

00001d58 <__addsf3>:
    1d58:	a0 e2       	ldi	r26, 0x20	; 32
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1d5e:	fe e0       	ldi	r31, 0x0E	; 14
    1d60:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x18>
    1d64:	69 83       	std	Y+1, r22	; 0x01
    1d66:	7a 83       	std	Y+2, r23	; 0x02
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	2d 83       	std	Y+5, r18	; 0x05
    1d6e:	3e 83       	std	Y+6, r19	; 0x06
    1d70:	4f 83       	std	Y+7, r20	; 0x07
    1d72:	58 87       	std	Y+8, r21	; 0x08
    1d74:	f9 e0       	ldi	r31, 0x09	; 9
    1d76:	ef 2e       	mov	r14, r31
    1d78:	f1 2c       	mov	r15, r1
    1d7a:	ec 0e       	add	r14, r28
    1d7c:	fd 1e       	adc	r15, r29
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	b7 01       	movw	r22, r14
    1d84:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1d88:	8e 01       	movw	r16, r28
    1d8a:	0f 5e       	subi	r16, 0xEF	; 239
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	ce 01       	movw	r24, r28
    1d90:	05 96       	adiw	r24, 0x05	; 5
    1d92:	b8 01       	movw	r22, r16
    1d94:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1d98:	c7 01       	movw	r24, r14
    1d9a:	b8 01       	movw	r22, r16
    1d9c:	ae 01       	movw	r20, r28
    1d9e:	47 5e       	subi	r20, 0xE7	; 231
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_fpadd_parts>
    1da6:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    1daa:	a0 96       	adiw	r28, 0x20	; 32
    1dac:	e6 e0       	ldi	r30, 0x06	; 6
    1dae:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x18>

00001db2 <__mulsf3>:
    1db2:	a0 e2       	ldi	r26, 0x20	; 32
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef ed       	ldi	r30, 0xDF	; 223
    1db8:	fe e0       	ldi	r31, 0x0E	; 14
    1dba:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__prologue_saves__>
    1dbe:	69 83       	std	Y+1, r22	; 0x01
    1dc0:	7a 83       	std	Y+2, r23	; 0x02
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	2d 83       	std	Y+5, r18	; 0x05
    1dc8:	3e 83       	std	Y+6, r19	; 0x06
    1dca:	4f 83       	std	Y+7, r20	; 0x07
    1dcc:	58 87       	std	Y+8, r21	; 0x08
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	be 01       	movw	r22, r28
    1dd4:	67 5f       	subi	r22, 0xF7	; 247
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1ddc:	ce 01       	movw	r24, r28
    1dde:	05 96       	adiw	r24, 0x05	; 5
    1de0:	be 01       	movw	r22, r28
    1de2:	6f 5e       	subi	r22, 0xEF	; 239
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1dea:	99 85       	ldd	r25, Y+9	; 0x09
    1dec:	92 30       	cpi	r25, 0x02	; 2
    1dee:	88 f0       	brcs	.+34     	; 0x1e12 <__mulsf3+0x60>
    1df0:	89 89       	ldd	r24, Y+17	; 0x11
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	c8 f0       	brcs	.+50     	; 0x1e28 <__mulsf3+0x76>
    1df6:	94 30       	cpi	r25, 0x04	; 4
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <__mulsf3+0x4e>
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	51 f4       	brne	.+20     	; 0x1e12 <__mulsf3+0x60>
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__mulsf3+0x56>
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	29 f4       	brne	.+10     	; 0x1e0e <__mulsf3+0x5c>
    1e04:	92 30       	cpi	r25, 0x02	; 2
    1e06:	81 f4       	brne	.+32     	; 0x1e28 <__mulsf3+0x76>
    1e08:	8f e0       	ldi	r24, 0x0F	; 15
    1e0a:	92 e0       	ldi	r25, 0x02	; 2
    1e0c:	c6 c0       	rjmp	.+396    	; 0x1f9a <__mulsf3+0x1e8>
    1e0e:	92 30       	cpi	r25, 0x02	; 2
    1e10:	49 f4       	brne	.+18     	; 0x1e24 <__mulsf3+0x72>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	8a 89       	ldd	r24, Y+18	; 0x12
    1e18:	98 13       	cpse	r25, r24
    1e1a:	21 e0       	ldi	r18, 0x01	; 1
    1e1c:	2a 87       	std	Y+10, r18	; 0x0a
    1e1e:	ce 01       	movw	r24, r28
    1e20:	09 96       	adiw	r24, 0x09	; 9
    1e22:	bb c0       	rjmp	.+374    	; 0x1f9a <__mulsf3+0x1e8>
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	49 f4       	brne	.+18     	; 0x1e3a <__mulsf3+0x88>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e2e:	98 13       	cpse	r25, r24
    1e30:	21 e0       	ldi	r18, 0x01	; 1
    1e32:	2a 8b       	std	Y+18, r18	; 0x12
    1e34:	ce 01       	movw	r24, r28
    1e36:	41 96       	adiw	r24, 0x11	; 17
    1e38:	b0 c0       	rjmp	.+352    	; 0x1f9a <__mulsf3+0x1e8>
    1e3a:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e3c:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e3e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e40:	58 88       	ldd	r5, Y+16	; 0x10
    1e42:	6d 88       	ldd	r6, Y+21	; 0x15
    1e44:	7e 88       	ldd	r7, Y+22	; 0x16
    1e46:	8f 88       	ldd	r8, Y+23	; 0x17
    1e48:	98 8c       	ldd	r9, Y+24	; 0x18
    1e4a:	ee 24       	eor	r14, r14
    1e4c:	ff 24       	eor	r15, r15
    1e4e:	87 01       	movw	r16, r14
    1e50:	aa 24       	eor	r10, r10
    1e52:	bb 24       	eor	r11, r11
    1e54:	65 01       	movw	r12, r10
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	e0 e0       	ldi	r30, 0x00	; 0
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	c1 01       	movw	r24, r2
    1e64:	81 70       	andi	r24, 0x01	; 1
    1e66:	90 70       	andi	r25, 0x00	; 0
    1e68:	89 2b       	or	r24, r25
    1e6a:	e9 f0       	breq	.+58     	; 0x1ea6 <__mulsf3+0xf4>
    1e6c:	e6 0c       	add	r14, r6
    1e6e:	f7 1c       	adc	r15, r7
    1e70:	08 1d       	adc	r16, r8
    1e72:	19 1d       	adc	r17, r9
    1e74:	9a 01       	movw	r18, r20
    1e76:	ab 01       	movw	r20, r22
    1e78:	2a 0d       	add	r18, r10
    1e7a:	3b 1d       	adc	r19, r11
    1e7c:	4c 1d       	adc	r20, r12
    1e7e:	5d 1d       	adc	r21, r13
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e0       	ldi	r26, 0x00	; 0
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e6 14       	cp	r14, r6
    1e8a:	f7 04       	cpc	r15, r7
    1e8c:	08 05       	cpc	r16, r8
    1e8e:	19 05       	cpc	r17, r9
    1e90:	20 f4       	brcc	.+8      	; 0x1e9a <__mulsf3+0xe8>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e0       	ldi	r26, 0x00	; 0
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ba 01       	movw	r22, r20
    1e9c:	a9 01       	movw	r20, r18
    1e9e:	48 0f       	add	r20, r24
    1ea0:	59 1f       	adc	r21, r25
    1ea2:	6a 1f       	adc	r22, r26
    1ea4:	7b 1f       	adc	r23, r27
    1ea6:	aa 0c       	add	r10, r10
    1ea8:	bb 1c       	adc	r11, r11
    1eaa:	cc 1c       	adc	r12, r12
    1eac:	dd 1c       	adc	r13, r13
    1eae:	97 fe       	sbrs	r9, 7
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <__mulsf3+0x110>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e0       	ldi	r26, 0x00	; 0
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	a8 2a       	or	r10, r24
    1ebc:	b9 2a       	or	r11, r25
    1ebe:	ca 2a       	or	r12, r26
    1ec0:	db 2a       	or	r13, r27
    1ec2:	31 96       	adiw	r30, 0x01	; 1
    1ec4:	e0 32       	cpi	r30, 0x20	; 32
    1ec6:	f1 05       	cpc	r31, r1
    1ec8:	49 f0       	breq	.+18     	; 0x1edc <__mulsf3+0x12a>
    1eca:	66 0c       	add	r6, r6
    1ecc:	77 1c       	adc	r7, r7
    1ece:	88 1c       	adc	r8, r8
    1ed0:	99 1c       	adc	r9, r9
    1ed2:	56 94       	lsr	r5
    1ed4:	47 94       	ror	r4
    1ed6:	37 94       	ror	r3
    1ed8:	27 94       	ror	r2
    1eda:	c3 cf       	rjmp	.-122    	; 0x1e62 <__mulsf3+0xb0>
    1edc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ede:	ea 89       	ldd	r30, Y+18	; 0x12
    1ee0:	2b 89       	ldd	r18, Y+19	; 0x13
    1ee2:	3c 89       	ldd	r19, Y+20	; 0x14
    1ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee8:	28 0f       	add	r18, r24
    1eea:	39 1f       	adc	r19, r25
    1eec:	2e 5f       	subi	r18, 0xFE	; 254
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	17 c0       	rjmp	.+46     	; 0x1f20 <__mulsf3+0x16e>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	90 70       	andi	r25, 0x00	; 0
    1ef8:	89 2b       	or	r24, r25
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <__mulsf3+0x162>
    1efc:	16 95       	lsr	r17
    1efe:	07 95       	ror	r16
    1f00:	f7 94       	ror	r15
    1f02:	e7 94       	ror	r14
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e8       	ldi	r27, 0x80	; 128
    1f0c:	e8 2a       	or	r14, r24
    1f0e:	f9 2a       	or	r15, r25
    1f10:	0a 2b       	or	r16, r26
    1f12:	1b 2b       	or	r17, r27
    1f14:	76 95       	lsr	r23
    1f16:	67 95       	ror	r22
    1f18:	57 95       	ror	r21
    1f1a:	47 95       	ror	r20
    1f1c:	2f 5f       	subi	r18, 0xFF	; 255
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	77 fd       	sbrc	r23, 7
    1f22:	e7 cf       	rjmp	.-50     	; 0x1ef2 <__mulsf3+0x140>
    1f24:	0c c0       	rjmp	.+24     	; 0x1f3e <__mulsf3+0x18c>
    1f26:	44 0f       	add	r20, r20
    1f28:	55 1f       	adc	r21, r21
    1f2a:	66 1f       	adc	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	17 fd       	sbrc	r17, 7
    1f30:	41 60       	ori	r20, 0x01	; 1
    1f32:	ee 0c       	add	r14, r14
    1f34:	ff 1c       	adc	r15, r15
    1f36:	00 1f       	adc	r16, r16
    1f38:	11 1f       	adc	r17, r17
    1f3a:	21 50       	subi	r18, 0x01	; 1
    1f3c:	30 40       	sbci	r19, 0x00	; 0
    1f3e:	40 30       	cpi	r20, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	59 07       	cpc	r21, r25
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	69 07       	cpc	r22, r25
    1f48:	90 e4       	ldi	r25, 0x40	; 64
    1f4a:	79 07       	cpc	r23, r25
    1f4c:	60 f3       	brcs	.-40     	; 0x1f26 <__mulsf3+0x174>
    1f4e:	2b 8f       	std	Y+27, r18	; 0x1b
    1f50:	3c 8f       	std	Y+28, r19	; 0x1c
    1f52:	db 01       	movw	r26, r22
    1f54:	ca 01       	movw	r24, r20
    1f56:	8f 77       	andi	r24, 0x7F	; 127
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	a0 70       	andi	r26, 0x00	; 0
    1f5c:	b0 70       	andi	r27, 0x00	; 0
    1f5e:	80 34       	cpi	r24, 0x40	; 64
    1f60:	91 05       	cpc	r25, r1
    1f62:	a1 05       	cpc	r26, r1
    1f64:	b1 05       	cpc	r27, r1
    1f66:	61 f4       	brne	.+24     	; 0x1f80 <__mulsf3+0x1ce>
    1f68:	47 fd       	sbrc	r20, 7
    1f6a:	0a c0       	rjmp	.+20     	; 0x1f80 <__mulsf3+0x1ce>
    1f6c:	e1 14       	cp	r14, r1
    1f6e:	f1 04       	cpc	r15, r1
    1f70:	01 05       	cpc	r16, r1
    1f72:	11 05       	cpc	r17, r1
    1f74:	29 f0       	breq	.+10     	; 0x1f80 <__mulsf3+0x1ce>
    1f76:	40 5c       	subi	r20, 0xC0	; 192
    1f78:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7a:	6f 4f       	sbci	r22, 0xFF	; 255
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	40 78       	andi	r20, 0x80	; 128
    1f80:	1a 8e       	std	Y+26, r1	; 0x1a
    1f82:	fe 17       	cp	r31, r30
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <__mulsf3+0x1d8>
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	8a 8f       	std	Y+26, r24	; 0x1a
    1f8a:	4d 8f       	std	Y+29, r20	; 0x1d
    1f8c:	5e 8f       	std	Y+30, r21	; 0x1e
    1f8e:	6f 8f       	std	Y+31, r22	; 0x1f
    1f90:	78 a3       	std	Y+32, r23	; 0x20
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	89 8f       	std	Y+25, r24	; 0x19
    1f96:	ce 01       	movw	r24, r28
    1f98:	49 96       	adiw	r24, 0x19	; 25
    1f9a:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    1f9e:	a0 96       	adiw	r28, 0x20	; 32
    1fa0:	e2 e1       	ldi	r30, 0x12	; 18
    1fa2:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__epilogue_restores__>

00001fa6 <__divsf3>:
    1fa6:	a8 e1       	ldi	r26, 0x18	; 24
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e9 ed       	ldi	r30, 0xD9	; 217
    1fac:	ff e0       	ldi	r31, 0x0F	; 15
    1fae:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__+0x10>
    1fb2:	69 83       	std	Y+1, r22	; 0x01
    1fb4:	7a 83       	std	Y+2, r23	; 0x02
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	2d 83       	std	Y+5, r18	; 0x05
    1fbc:	3e 83       	std	Y+6, r19	; 0x06
    1fbe:	4f 83       	std	Y+7, r20	; 0x07
    1fc0:	58 87       	std	Y+8, r21	; 0x08
    1fc2:	b9 e0       	ldi	r27, 0x09	; 9
    1fc4:	eb 2e       	mov	r14, r27
    1fc6:	f1 2c       	mov	r15, r1
    1fc8:	ec 0e       	add	r14, r28
    1fca:	fd 1e       	adc	r15, r29
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	0f 5e       	subi	r16, 0xEF	; 239
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	ce 01       	movw	r24, r28
    1fde:	05 96       	adiw	r24, 0x05	; 5
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    1fe6:	29 85       	ldd	r18, Y+9	; 0x09
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	08 f4       	brcc	.+2      	; 0x1fee <__divsf3+0x48>
    1fec:	7e c0       	rjmp	.+252    	; 0x20ea <__divsf3+0x144>
    1fee:	39 89       	ldd	r19, Y+17	; 0x11
    1ff0:	32 30       	cpi	r19, 0x02	; 2
    1ff2:	10 f4       	brcc	.+4      	; 0x1ff8 <__divsf3+0x52>
    1ff4:	b8 01       	movw	r22, r16
    1ff6:	7c c0       	rjmp	.+248    	; 0x20f0 <__divsf3+0x14a>
    1ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffa:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffc:	89 27       	eor	r24, r25
    1ffe:	8a 87       	std	Y+10, r24	; 0x0a
    2000:	24 30       	cpi	r18, 0x04	; 4
    2002:	11 f0       	breq	.+4      	; 0x2008 <__divsf3+0x62>
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 f4       	brne	.+12     	; 0x2014 <__divsf3+0x6e>
    2008:	23 17       	cp	r18, r19
    200a:	09 f0       	breq	.+2      	; 0x200e <__divsf3+0x68>
    200c:	6e c0       	rjmp	.+220    	; 0x20ea <__divsf3+0x144>
    200e:	6f e0       	ldi	r22, 0x0F	; 15
    2010:	72 e0       	ldi	r23, 0x02	; 2
    2012:	6e c0       	rjmp	.+220    	; 0x20f0 <__divsf3+0x14a>
    2014:	34 30       	cpi	r19, 0x04	; 4
    2016:	39 f4       	brne	.+14     	; 0x2026 <__divsf3+0x80>
    2018:	1d 86       	std	Y+13, r1	; 0x0d
    201a:	1e 86       	std	Y+14, r1	; 0x0e
    201c:	1f 86       	std	Y+15, r1	; 0x0f
    201e:	18 8a       	std	Y+16, r1	; 0x10
    2020:	1c 86       	std	Y+12, r1	; 0x0c
    2022:	1b 86       	std	Y+11, r1	; 0x0b
    2024:	04 c0       	rjmp	.+8      	; 0x202e <__divsf3+0x88>
    2026:	32 30       	cpi	r19, 0x02	; 2
    2028:	21 f4       	brne	.+8      	; 0x2032 <__divsf3+0x8c>
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	89 87       	std	Y+9, r24	; 0x09
    202e:	b7 01       	movw	r22, r14
    2030:	5f c0       	rjmp	.+190    	; 0x20f0 <__divsf3+0x14a>
    2032:	2b 85       	ldd	r18, Y+11	; 0x0b
    2034:	3c 85       	ldd	r19, Y+12	; 0x0c
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	28 1b       	sub	r18, r24
    203c:	39 0b       	sbc	r19, r25
    203e:	3c 87       	std	Y+12, r19	; 0x0c
    2040:	2b 87       	std	Y+11, r18	; 0x0b
    2042:	ed 84       	ldd	r14, Y+13	; 0x0d
    2044:	fe 84       	ldd	r15, Y+14	; 0x0e
    2046:	0f 85       	ldd	r16, Y+15	; 0x0f
    2048:	18 89       	ldd	r17, Y+16	; 0x10
    204a:	ad 88       	ldd	r10, Y+21	; 0x15
    204c:	be 88       	ldd	r11, Y+22	; 0x16
    204e:	cf 88       	ldd	r12, Y+23	; 0x17
    2050:	d8 8c       	ldd	r13, Y+24	; 0x18
    2052:	ea 14       	cp	r14, r10
    2054:	fb 04       	cpc	r15, r11
    2056:	0c 05       	cpc	r16, r12
    2058:	1d 05       	cpc	r17, r13
    205a:	40 f4       	brcc	.+16     	; 0x206c <__divsf3+0xc6>
    205c:	ee 0c       	add	r14, r14
    205e:	ff 1c       	adc	r15, r15
    2060:	00 1f       	adc	r16, r16
    2062:	11 1f       	adc	r17, r17
    2064:	21 50       	subi	r18, 0x01	; 1
    2066:	30 40       	sbci	r19, 0x00	; 0
    2068:	3c 87       	std	Y+12, r19	; 0x0c
    206a:	2b 87       	std	Y+11, r18	; 0x0b
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e0       	ldi	r26, 0x00	; 0
    207a:	b0 e4       	ldi	r27, 0x40	; 64
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	ea 14       	cp	r14, r10
    2082:	fb 04       	cpc	r15, r11
    2084:	0c 05       	cpc	r16, r12
    2086:	1d 05       	cpc	r17, r13
    2088:	40 f0       	brcs	.+16     	; 0x209a <__divsf3+0xf4>
    208a:	28 2b       	or	r18, r24
    208c:	39 2b       	or	r19, r25
    208e:	4a 2b       	or	r20, r26
    2090:	5b 2b       	or	r21, r27
    2092:	ea 18       	sub	r14, r10
    2094:	fb 08       	sbc	r15, r11
    2096:	0c 09       	sbc	r16, r12
    2098:	1d 09       	sbc	r17, r13
    209a:	b6 95       	lsr	r27
    209c:	a7 95       	ror	r26
    209e:	97 95       	ror	r25
    20a0:	87 95       	ror	r24
    20a2:	ee 0c       	add	r14, r14
    20a4:	ff 1c       	adc	r15, r15
    20a6:	00 1f       	adc	r16, r16
    20a8:	11 1f       	adc	r17, r17
    20aa:	6f 5f       	subi	r22, 0xFF	; 255
    20ac:	7f 4f       	sbci	r23, 0xFF	; 255
    20ae:	6f 31       	cpi	r22, 0x1F	; 31
    20b0:	71 05       	cpc	r23, r1
    20b2:	31 f7       	brne	.-52     	; 0x2080 <__divsf3+0xda>
    20b4:	da 01       	movw	r26, r20
    20b6:	c9 01       	movw	r24, r18
    20b8:	8f 77       	andi	r24, 0x7F	; 127
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	a0 70       	andi	r26, 0x00	; 0
    20be:	b0 70       	andi	r27, 0x00	; 0
    20c0:	80 34       	cpi	r24, 0x40	; 64
    20c2:	91 05       	cpc	r25, r1
    20c4:	a1 05       	cpc	r26, r1
    20c6:	b1 05       	cpc	r27, r1
    20c8:	61 f4       	brne	.+24     	; 0x20e2 <__divsf3+0x13c>
    20ca:	27 fd       	sbrc	r18, 7
    20cc:	0a c0       	rjmp	.+20     	; 0x20e2 <__divsf3+0x13c>
    20ce:	e1 14       	cp	r14, r1
    20d0:	f1 04       	cpc	r15, r1
    20d2:	01 05       	cpc	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <__divsf3+0x13c>
    20d8:	20 5c       	subi	r18, 0xC0	; 192
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	4f 4f       	sbci	r20, 0xFF	; 255
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	20 78       	andi	r18, 0x80	; 128
    20e2:	2d 87       	std	Y+13, r18	; 0x0d
    20e4:	3e 87       	std	Y+14, r19	; 0x0e
    20e6:	4f 87       	std	Y+15, r20	; 0x0f
    20e8:	58 8b       	std	Y+16, r21	; 0x10
    20ea:	be 01       	movw	r22, r28
    20ec:	67 5f       	subi	r22, 0xF7	; 247
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	cb 01       	movw	r24, r22
    20f2:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    20f6:	68 96       	adiw	r28, 0x18	; 24
    20f8:	ea e0       	ldi	r30, 0x0A	; 10
    20fa:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__+0x10>

000020fe <__gtsf2>:
    20fe:	a8 e1       	ldi	r26, 0x18	; 24
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e8       	ldi	r30, 0x85	; 133
    2104:	f0 e1       	ldi	r31, 0x10	; 16
    2106:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x18>
    210a:	69 83       	std	Y+1, r22	; 0x01
    210c:	7a 83       	std	Y+2, r23	; 0x02
    210e:	8b 83       	std	Y+3, r24	; 0x03
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	2d 83       	std	Y+5, r18	; 0x05
    2114:	3e 83       	std	Y+6, r19	; 0x06
    2116:	4f 83       	std	Y+7, r20	; 0x07
    2118:	58 87       	std	Y+8, r21	; 0x08
    211a:	89 e0       	ldi	r24, 0x09	; 9
    211c:	e8 2e       	mov	r14, r24
    211e:	f1 2c       	mov	r15, r1
    2120:	ec 0e       	add	r14, r28
    2122:	fd 1e       	adc	r15, r29
    2124:	ce 01       	movw	r24, r28
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	b7 01       	movw	r22, r14
    212a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    212e:	8e 01       	movw	r16, r28
    2130:	0f 5e       	subi	r16, 0xEF	; 239
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	ce 01       	movw	r24, r28
    2136:	05 96       	adiw	r24, 0x05	; 5
    2138:	b8 01       	movw	r22, r16
    213a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	82 30       	cpi	r24, 0x02	; 2
    2142:	40 f0       	brcs	.+16     	; 0x2154 <__gtsf2+0x56>
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	28 f0       	brcs	.+10     	; 0x2154 <__gtsf2+0x56>
    214a:	c7 01       	movw	r24, r14
    214c:	b8 01       	movw	r22, r16
    214e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__fpcmp_parts_f>
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <__gtsf2+0x58>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	68 96       	adiw	r28, 0x18	; 24
    2158:	e6 e0       	ldi	r30, 0x06	; 6
    215a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x18>

0000215e <__gesf2>:
    215e:	a8 e1       	ldi	r26, 0x18	; 24
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 eb       	ldi	r30, 0xB5	; 181
    2164:	f0 e1       	ldi	r31, 0x10	; 16
    2166:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x18>
    216a:	69 83       	std	Y+1, r22	; 0x01
    216c:	7a 83       	std	Y+2, r23	; 0x02
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	2d 83       	std	Y+5, r18	; 0x05
    2174:	3e 83       	std	Y+6, r19	; 0x06
    2176:	4f 83       	std	Y+7, r20	; 0x07
    2178:	58 87       	std	Y+8, r21	; 0x08
    217a:	89 e0       	ldi	r24, 0x09	; 9
    217c:	e8 2e       	mov	r14, r24
    217e:	f1 2c       	mov	r15, r1
    2180:	ec 0e       	add	r14, r28
    2182:	fd 1e       	adc	r15, r29
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	b7 01       	movw	r22, r14
    218a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    218e:	8e 01       	movw	r16, r28
    2190:	0f 5e       	subi	r16, 0xEF	; 239
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	ce 01       	movw	r24, r28
    2196:	05 96       	adiw	r24, 0x05	; 5
    2198:	b8 01       	movw	r22, r16
    219a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	40 f0       	brcs	.+16     	; 0x21b4 <__gesf2+0x56>
    21a4:	89 89       	ldd	r24, Y+17	; 0x11
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	28 f0       	brcs	.+10     	; 0x21b4 <__gesf2+0x56>
    21aa:	c7 01       	movw	r24, r14
    21ac:	b8 01       	movw	r22, r16
    21ae:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__fpcmp_parts_f>
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <__gesf2+0x58>
    21b4:	8f ef       	ldi	r24, 0xFF	; 255
    21b6:	68 96       	adiw	r28, 0x18	; 24
    21b8:	e6 e0       	ldi	r30, 0x06	; 6
    21ba:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x18>

000021be <__ltsf2>:
    21be:	a8 e1       	ldi	r26, 0x18	; 24
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 ee       	ldi	r30, 0xE5	; 229
    21c4:	f0 e1       	ldi	r31, 0x10	; 16
    21c6:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__+0x18>
    21ca:	69 83       	std	Y+1, r22	; 0x01
    21cc:	7a 83       	std	Y+2, r23	; 0x02
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	2d 83       	std	Y+5, r18	; 0x05
    21d4:	3e 83       	std	Y+6, r19	; 0x06
    21d6:	4f 83       	std	Y+7, r20	; 0x07
    21d8:	58 87       	std	Y+8, r21	; 0x08
    21da:	89 e0       	ldi	r24, 0x09	; 9
    21dc:	e8 2e       	mov	r14, r24
    21de:	f1 2c       	mov	r15, r1
    21e0:	ec 0e       	add	r14, r28
    21e2:	fd 1e       	adc	r15, r29
    21e4:	ce 01       	movw	r24, r28
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	b7 01       	movw	r22, r14
    21ea:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    21ee:	8e 01       	movw	r16, r28
    21f0:	0f 5e       	subi	r16, 0xEF	; 239
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	ce 01       	movw	r24, r28
    21f6:	05 96       	adiw	r24, 0x05	; 5
    21f8:	b8 01       	movw	r22, r16
    21fa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	82 30       	cpi	r24, 0x02	; 2
    2202:	40 f0       	brcs	.+16     	; 0x2214 <__stack+0x15>
    2204:	89 89       	ldd	r24, Y+17	; 0x11
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	28 f0       	brcs	.+10     	; 0x2214 <__stack+0x15>
    220a:	c7 01       	movw	r24, r14
    220c:	b8 01       	movw	r22, r16
    220e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__fpcmp_parts_f>
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <__stack+0x17>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	68 96       	adiw	r28, 0x18	; 24
    2218:	e6 e0       	ldi	r30, 0x06	; 6
    221a:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__+0x18>

0000221e <__floatsisf>:
    221e:	a8 e0       	ldi	r26, 0x08	; 8
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e1       	ldi	r30, 0x15	; 21
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__prologue_saves__+0x12>
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	da 01       	movw	r26, r20
    2234:	c9 01       	movw	r24, r18
    2236:	88 27       	eor	r24, r24
    2238:	b7 fd       	sbrc	r27, 7
    223a:	83 95       	inc	r24
    223c:	99 27       	eor	r25, r25
    223e:	aa 27       	eor	r26, r26
    2240:	bb 27       	eor	r27, r27
    2242:	b8 2e       	mov	r11, r24
    2244:	21 15       	cp	r18, r1
    2246:	31 05       	cpc	r19, r1
    2248:	41 05       	cpc	r20, r1
    224a:	51 05       	cpc	r21, r1
    224c:	19 f4       	brne	.+6      	; 0x2254 <__floatsisf+0x36>
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	3a c0       	rjmp	.+116    	; 0x22c8 <__floatsisf+0xaa>
    2254:	88 23       	and	r24, r24
    2256:	a9 f0       	breq	.+42     	; 0x2282 <__floatsisf+0x64>
    2258:	20 30       	cpi	r18, 0x00	; 0
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	38 07       	cpc	r19, r24
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	48 07       	cpc	r20, r24
    2262:	80 e8       	ldi	r24, 0x80	; 128
    2264:	58 07       	cpc	r21, r24
    2266:	29 f4       	brne	.+10     	; 0x2272 <__floatsisf+0x54>
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	9f ec       	ldi	r25, 0xCF	; 207
    2270:	30 c0       	rjmp	.+96     	; 0x22d2 <__floatsisf+0xb4>
    2272:	ee 24       	eor	r14, r14
    2274:	ff 24       	eor	r15, r15
    2276:	87 01       	movw	r16, r14
    2278:	e2 1a       	sub	r14, r18
    227a:	f3 0a       	sbc	r15, r19
    227c:	04 0b       	sbc	r16, r20
    227e:	15 0b       	sbc	r17, r21
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <__floatsisf+0x68>
    2282:	79 01       	movw	r14, r18
    2284:	8a 01       	movw	r16, r20
    2286:	8e e1       	ldi	r24, 0x1E	; 30
    2288:	c8 2e       	mov	r12, r24
    228a:	d1 2c       	mov	r13, r1
    228c:	dc 82       	std	Y+4, r13	; 0x04
    228e:	cb 82       	std	Y+3, r12	; 0x03
    2290:	ed 82       	std	Y+5, r14	; 0x05
    2292:	fe 82       	std	Y+6, r15	; 0x06
    2294:	0f 83       	std	Y+7, r16	; 0x07
    2296:	18 87       	std	Y+8, r17	; 0x08
    2298:	c8 01       	movw	r24, r16
    229a:	b7 01       	movw	r22, r14
    229c:	0e 94 3a 12 	call	0x2474	; 0x2474 <__clzsi2>
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	18 16       	cp	r1, r24
    22a4:	19 06       	cpc	r1, r25
    22a6:	84 f4       	brge	.+32     	; 0x22c8 <__floatsisf+0xaa>
    22a8:	08 2e       	mov	r0, r24
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <__floatsisf+0x96>
    22ac:	ee 0c       	add	r14, r14
    22ae:	ff 1c       	adc	r15, r15
    22b0:	00 1f       	adc	r16, r16
    22b2:	11 1f       	adc	r17, r17
    22b4:	0a 94       	dec	r0
    22b6:	d2 f7       	brpl	.-12     	; 0x22ac <__floatsisf+0x8e>
    22b8:	ed 82       	std	Y+5, r14	; 0x05
    22ba:	fe 82       	std	Y+6, r15	; 0x06
    22bc:	0f 83       	std	Y+7, r16	; 0x07
    22be:	18 87       	std	Y+8, r17	; 0x08
    22c0:	c8 1a       	sub	r12, r24
    22c2:	d9 0a       	sbc	r13, r25
    22c4:	dc 82       	std	Y+4, r13	; 0x04
    22c6:	cb 82       	std	Y+3, r12	; 0x03
    22c8:	ba 82       	std	Y+2, r11	; 0x02
    22ca:	ce 01       	movw	r24, r28
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    22d2:	28 96       	adiw	r28, 0x08	; 8
    22d4:	e9 e0       	ldi	r30, 0x09	; 9
    22d6:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__epilogue_restores__+0x12>

000022da <__fixsfsi>:
    22da:	ac e0       	ldi	r26, 0x0C	; 12
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e3 e7       	ldi	r30, 0x73	; 115
    22e0:	f1 e1       	ldi	r31, 0x11	; 17
    22e2:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x20>
    22e6:	69 83       	std	Y+1, r22	; 0x01
    22e8:	7a 83       	std	Y+2, r23	; 0x02
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	be 01       	movw	r22, r28
    22f4:	6b 5f       	subi	r22, 0xFB	; 251
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__unpack_f>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	61 f1       	breq	.+88     	; 0x235a <__fixsfsi+0x80>
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	50 f1       	brcs	.+84     	; 0x235a <__fixsfsi+0x80>
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	21 f4       	brne	.+8      	; 0x2312 <__fixsfsi+0x38>
    230a:	8e 81       	ldd	r24, Y+6	; 0x06
    230c:	88 23       	and	r24, r24
    230e:	51 f1       	breq	.+84     	; 0x2364 <__fixsfsi+0x8a>
    2310:	2e c0       	rjmp	.+92     	; 0x236e <__fixsfsi+0x94>
    2312:	2f 81       	ldd	r18, Y+7	; 0x07
    2314:	38 85       	ldd	r19, Y+8	; 0x08
    2316:	37 fd       	sbrc	r19, 7
    2318:	20 c0       	rjmp	.+64     	; 0x235a <__fixsfsi+0x80>
    231a:	6e 81       	ldd	r22, Y+6	; 0x06
    231c:	2f 31       	cpi	r18, 0x1F	; 31
    231e:	31 05       	cpc	r19, r1
    2320:	1c f0       	brlt	.+6      	; 0x2328 <__fixsfsi+0x4e>
    2322:	66 23       	and	r22, r22
    2324:	f9 f0       	breq	.+62     	; 0x2364 <__fixsfsi+0x8a>
    2326:	23 c0       	rjmp	.+70     	; 0x236e <__fixsfsi+0x94>
    2328:	8e e1       	ldi	r24, 0x1E	; 30
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	82 1b       	sub	r24, r18
    232e:	93 0b       	sbc	r25, r19
    2330:	29 85       	ldd	r18, Y+9	; 0x09
    2332:	3a 85       	ldd	r19, Y+10	; 0x0a
    2334:	4b 85       	ldd	r20, Y+11	; 0x0b
    2336:	5c 85       	ldd	r21, Y+12	; 0x0c
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <__fixsfsi+0x68>
    233a:	56 95       	lsr	r21
    233c:	47 95       	ror	r20
    233e:	37 95       	ror	r19
    2340:	27 95       	ror	r18
    2342:	8a 95       	dec	r24
    2344:	d2 f7       	brpl	.-12     	; 0x233a <__fixsfsi+0x60>
    2346:	66 23       	and	r22, r22
    2348:	b1 f0       	breq	.+44     	; 0x2376 <__fixsfsi+0x9c>
    234a:	50 95       	com	r21
    234c:	40 95       	com	r20
    234e:	30 95       	com	r19
    2350:	21 95       	neg	r18
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	4f 4f       	sbci	r20, 0xFF	; 255
    2356:	5f 4f       	sbci	r21, 0xFF	; 255
    2358:	0e c0       	rjmp	.+28     	; 0x2376 <__fixsfsi+0x9c>
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <__fixsfsi+0x9c>
    2364:	2f ef       	ldi	r18, 0xFF	; 255
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f ef       	ldi	r20, 0xFF	; 255
    236a:	5f e7       	ldi	r21, 0x7F	; 127
    236c:	04 c0       	rjmp	.+8      	; 0x2376 <__fixsfsi+0x9c>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e8       	ldi	r21, 0x80	; 128
    2376:	b9 01       	movw	r22, r18
    2378:	ca 01       	movw	r24, r20
    237a:	2c 96       	adiw	r28, 0x0c	; 12
    237c:	e2 e0       	ldi	r30, 0x02	; 2
    237e:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x20>

00002382 <__floatunsisf>:
    2382:	a8 e0       	ldi	r26, 0x08	; 8
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e7 ec       	ldi	r30, 0xC7	; 199
    2388:	f1 e1       	ldi	r31, 0x11	; 17
    238a:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__+0x10>
    238e:	7b 01       	movw	r14, r22
    2390:	8c 01       	movw	r16, r24
    2392:	61 15       	cp	r22, r1
    2394:	71 05       	cpc	r23, r1
    2396:	81 05       	cpc	r24, r1
    2398:	91 05       	cpc	r25, r1
    239a:	19 f4       	brne	.+6      	; 0x23a2 <__floatunsisf+0x20>
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	60 c0       	rjmp	.+192    	; 0x2462 <__floatunsisf+0xe0>
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	8e e1       	ldi	r24, 0x1E	; 30
    23a8:	c8 2e       	mov	r12, r24
    23aa:	d1 2c       	mov	r13, r1
    23ac:	dc 82       	std	Y+4, r13	; 0x04
    23ae:	cb 82       	std	Y+3, r12	; 0x03
    23b0:	ed 82       	std	Y+5, r14	; 0x05
    23b2:	fe 82       	std	Y+6, r15	; 0x06
    23b4:	0f 83       	std	Y+7, r16	; 0x07
    23b6:	18 87       	std	Y+8, r17	; 0x08
    23b8:	c8 01       	movw	r24, r16
    23ba:	b7 01       	movw	r22, r14
    23bc:	0e 94 3a 12 	call	0x2474	; 0x2474 <__clzsi2>
    23c0:	fc 01       	movw	r30, r24
    23c2:	31 97       	sbiw	r30, 0x01	; 1
    23c4:	f7 ff       	sbrs	r31, 7
    23c6:	3b c0       	rjmp	.+118    	; 0x243e <__floatunsisf+0xbc>
    23c8:	22 27       	eor	r18, r18
    23ca:	33 27       	eor	r19, r19
    23cc:	2e 1b       	sub	r18, r30
    23ce:	3f 0b       	sbc	r19, r31
    23d0:	57 01       	movw	r10, r14
    23d2:	68 01       	movw	r12, r16
    23d4:	02 2e       	mov	r0, r18
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <__floatunsisf+0x5e>
    23d8:	d6 94       	lsr	r13
    23da:	c7 94       	ror	r12
    23dc:	b7 94       	ror	r11
    23de:	a7 94       	ror	r10
    23e0:	0a 94       	dec	r0
    23e2:	d2 f7       	brpl	.-12     	; 0x23d8 <__floatunsisf+0x56>
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <__floatunsisf+0x7c>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	aa 1f       	adc	r26, r26
    23fc:	bb 1f       	adc	r27, r27
    23fe:	2a 95       	dec	r18
    2400:	d2 f7       	brpl	.-12     	; 0x23f6 <__floatunsisf+0x74>
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	a1 09       	sbc	r26, r1
    2406:	b1 09       	sbc	r27, r1
    2408:	8e 21       	and	r24, r14
    240a:	9f 21       	and	r25, r15
    240c:	a0 23       	and	r26, r16
    240e:	b1 23       	and	r27, r17
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	a1 05       	cpc	r26, r1
    2414:	b1 05       	cpc	r27, r1
    2416:	21 f0       	breq	.+8      	; 0x2420 <__floatunsisf+0x9e>
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	4a 29       	or	r20, r10
    2422:	5b 29       	or	r21, r11
    2424:	6c 29       	or	r22, r12
    2426:	7d 29       	or	r23, r13
    2428:	4d 83       	std	Y+5, r20	; 0x05
    242a:	5e 83       	std	Y+6, r21	; 0x06
    242c:	6f 83       	std	Y+7, r22	; 0x07
    242e:	78 87       	std	Y+8, r23	; 0x08
    2430:	8e e1       	ldi	r24, 0x1E	; 30
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	8e 1b       	sub	r24, r30
    2436:	9f 0b       	sbc	r25, r31
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	12 c0       	rjmp	.+36     	; 0x2462 <__floatunsisf+0xe0>
    243e:	30 97       	sbiw	r30, 0x00	; 0
    2440:	81 f0       	breq	.+32     	; 0x2462 <__floatunsisf+0xe0>
    2442:	0e 2e       	mov	r0, r30
    2444:	04 c0       	rjmp	.+8      	; 0x244e <__floatunsisf+0xcc>
    2446:	ee 0c       	add	r14, r14
    2448:	ff 1c       	adc	r15, r15
    244a:	00 1f       	adc	r16, r16
    244c:	11 1f       	adc	r17, r17
    244e:	0a 94       	dec	r0
    2450:	d2 f7       	brpl	.-12     	; 0x2446 <__floatunsisf+0xc4>
    2452:	ed 82       	std	Y+5, r14	; 0x05
    2454:	fe 82       	std	Y+6, r15	; 0x06
    2456:	0f 83       	std	Y+7, r16	; 0x07
    2458:	18 87       	std	Y+8, r17	; 0x08
    245a:	ce 1a       	sub	r12, r30
    245c:	df 0a       	sbc	r13, r31
    245e:	dc 82       	std	Y+4, r13	; 0x04
    2460:	cb 82       	std	Y+3, r12	; 0x03
    2462:	1a 82       	std	Y+2, r1	; 0x02
    2464:	ce 01       	movw	r24, r28
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	0e 94 89 12 	call	0x2512	; 0x2512 <__pack_f>
    246c:	28 96       	adiw	r28, 0x08	; 8
    246e:	ea e0       	ldi	r30, 0x0A	; 10
    2470:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__+0x10>

00002474 <__clzsi2>:
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	7b 01       	movw	r14, r22
    247e:	8c 01       	movw	r16, r24
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	e8 16       	cp	r14, r24
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	f8 06       	cpc	r15, r24
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	08 07       	cpc	r16, r24
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	18 07       	cpc	r17, r24
    2490:	88 f4       	brcc	.+34     	; 0x24b4 <__clzsi2+0x40>
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	e8 16       	cp	r14, r24
    2496:	f1 04       	cpc	r15, r1
    2498:	01 05       	cpc	r16, r1
    249a:	11 05       	cpc	r17, r1
    249c:	31 f0       	breq	.+12     	; 0x24aa <__clzsi2+0x36>
    249e:	28 f0       	brcs	.+10     	; 0x24aa <__clzsi2+0x36>
    24a0:	88 e0       	ldi	r24, 0x08	; 8
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	a0 e0       	ldi	r26, 0x00	; 0
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	17 c0       	rjmp	.+46     	; 0x24d8 <__clzsi2+0x64>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e0       	ldi	r26, 0x00	; 0
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	12 c0       	rjmp	.+36     	; 0x24d8 <__clzsi2+0x64>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	e8 16       	cp	r14, r24
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	f8 06       	cpc	r15, r24
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	08 07       	cpc	r16, r24
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	18 07       	cpc	r17, r24
    24c4:	28 f0       	brcs	.+10     	; 0x24d0 <__clzsi2+0x5c>
    24c6:	88 e1       	ldi	r24, 0x18	; 24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <__clzsi2+0x64>
    24d0:	80 e1       	ldi	r24, 0x10	; 16
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e0       	ldi	r26, 0x00	; 0
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	20 e2       	ldi	r18, 0x20	; 32
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	28 1b       	sub	r18, r24
    24e2:	39 0b       	sbc	r19, r25
    24e4:	4a 0b       	sbc	r20, r26
    24e6:	5b 0b       	sbc	r21, r27
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <__clzsi2+0x7e>
    24ea:	16 95       	lsr	r17
    24ec:	07 95       	ror	r16
    24ee:	f7 94       	ror	r15
    24f0:	e7 94       	ror	r14
    24f2:	8a 95       	dec	r24
    24f4:	d2 f7       	brpl	.-12     	; 0x24ea <__clzsi2+0x76>
    24f6:	f7 01       	movw	r30, r14
    24f8:	e9 5e       	subi	r30, 0xE9	; 233
    24fa:	fd 4f       	sbci	r31, 0xFD	; 253
    24fc:	80 81       	ld	r24, Z
    24fe:	28 1b       	sub	r18, r24
    2500:	31 09       	sbc	r19, r1
    2502:	41 09       	sbc	r20, r1
    2504:	51 09       	sbc	r21, r1
    2506:	c9 01       	movw	r24, r18
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	08 95       	ret

00002512 <__pack_f>:
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	fc 01       	movw	r30, r24
    251e:	e4 80       	ldd	r14, Z+4	; 0x04
    2520:	f5 80       	ldd	r15, Z+5	; 0x05
    2522:	06 81       	ldd	r16, Z+6	; 0x06
    2524:	17 81       	ldd	r17, Z+7	; 0x07
    2526:	d1 80       	ldd	r13, Z+1	; 0x01
    2528:	80 81       	ld	r24, Z
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	48 f4       	brcc	.+18     	; 0x2540 <__pack_f+0x2e>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e1       	ldi	r26, 0x10	; 16
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e8 2a       	or	r14, r24
    2538:	f9 2a       	or	r15, r25
    253a:	0a 2b       	or	r16, r26
    253c:	1b 2b       	or	r17, r27
    253e:	a5 c0       	rjmp	.+330    	; 0x268a <__pack_f+0x178>
    2540:	84 30       	cpi	r24, 0x04	; 4
    2542:	09 f4       	brne	.+2      	; 0x2546 <__pack_f+0x34>
    2544:	9f c0       	rjmp	.+318    	; 0x2684 <__pack_f+0x172>
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	21 f4       	brne	.+8      	; 0x2552 <__pack_f+0x40>
    254a:	ee 24       	eor	r14, r14
    254c:	ff 24       	eor	r15, r15
    254e:	87 01       	movw	r16, r14
    2550:	05 c0       	rjmp	.+10     	; 0x255c <__pack_f+0x4a>
    2552:	e1 14       	cp	r14, r1
    2554:	f1 04       	cpc	r15, r1
    2556:	01 05       	cpc	r16, r1
    2558:	11 05       	cpc	r17, r1
    255a:	19 f4       	brne	.+6      	; 0x2562 <__pack_f+0x50>
    255c:	e0 e0       	ldi	r30, 0x00	; 0
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	96 c0       	rjmp	.+300    	; 0x268e <__pack_f+0x17c>
    2562:	62 81       	ldd	r22, Z+2	; 0x02
    2564:	73 81       	ldd	r23, Z+3	; 0x03
    2566:	9f ef       	ldi	r25, 0xFF	; 255
    2568:	62 38       	cpi	r22, 0x82	; 130
    256a:	79 07       	cpc	r23, r25
    256c:	0c f0       	brlt	.+2      	; 0x2570 <__pack_f+0x5e>
    256e:	5b c0       	rjmp	.+182    	; 0x2626 <__pack_f+0x114>
    2570:	22 e8       	ldi	r18, 0x82	; 130
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	26 1b       	sub	r18, r22
    2576:	37 0b       	sbc	r19, r23
    2578:	2a 31       	cpi	r18, 0x1A	; 26
    257a:	31 05       	cpc	r19, r1
    257c:	2c f0       	brlt	.+10     	; 0x2588 <__pack_f+0x76>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	2a c0       	rjmp	.+84     	; 0x25dc <__pack_f+0xca>
    2588:	b8 01       	movw	r22, r16
    258a:	a7 01       	movw	r20, r14
    258c:	02 2e       	mov	r0, r18
    258e:	04 c0       	rjmp	.+8      	; 0x2598 <__pack_f+0x86>
    2590:	76 95       	lsr	r23
    2592:	67 95       	ror	r22
    2594:	57 95       	ror	r21
    2596:	47 95       	ror	r20
    2598:	0a 94       	dec	r0
    259a:	d2 f7       	brpl	.-12     	; 0x2590 <__pack_f+0x7e>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e0       	ldi	r26, 0x00	; 0
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <__pack_f+0x9c>
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	aa 1f       	adc	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	2a 95       	dec	r18
    25b0:	d2 f7       	brpl	.-12     	; 0x25a6 <__pack_f+0x94>
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	a1 09       	sbc	r26, r1
    25b6:	b1 09       	sbc	r27, r1
    25b8:	8e 21       	and	r24, r14
    25ba:	9f 21       	and	r25, r15
    25bc:	a0 23       	and	r26, r16
    25be:	b1 23       	and	r27, r17
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	a1 05       	cpc	r26, r1
    25c4:	b1 05       	cpc	r27, r1
    25c6:	21 f0       	breq	.+8      	; 0x25d0 <__pack_f+0xbe>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	9a 01       	movw	r18, r20
    25d2:	ab 01       	movw	r20, r22
    25d4:	28 2b       	or	r18, r24
    25d6:	39 2b       	or	r19, r25
    25d8:	4a 2b       	or	r20, r26
    25da:	5b 2b       	or	r21, r27
    25dc:	da 01       	movw	r26, r20
    25de:	c9 01       	movw	r24, r18
    25e0:	8f 77       	andi	r24, 0x7F	; 127
    25e2:	90 70       	andi	r25, 0x00	; 0
    25e4:	a0 70       	andi	r26, 0x00	; 0
    25e6:	b0 70       	andi	r27, 0x00	; 0
    25e8:	80 34       	cpi	r24, 0x40	; 64
    25ea:	91 05       	cpc	r25, r1
    25ec:	a1 05       	cpc	r26, r1
    25ee:	b1 05       	cpc	r27, r1
    25f0:	39 f4       	brne	.+14     	; 0x2600 <__pack_f+0xee>
    25f2:	27 ff       	sbrs	r18, 7
    25f4:	09 c0       	rjmp	.+18     	; 0x2608 <__pack_f+0xf6>
    25f6:	20 5c       	subi	r18, 0xC0	; 192
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	4f 4f       	sbci	r20, 0xFF	; 255
    25fc:	5f 4f       	sbci	r21, 0xFF	; 255
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__pack_f+0xf6>
    2600:	21 5c       	subi	r18, 0xC1	; 193
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	4f 4f       	sbci	r20, 0xFF	; 255
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	e0 e0       	ldi	r30, 0x00	; 0
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	20 30       	cpi	r18, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	3a 07       	cpc	r19, r26
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	4a 07       	cpc	r20, r26
    2616:	a0 e4       	ldi	r26, 0x40	; 64
    2618:	5a 07       	cpc	r21, r26
    261a:	10 f0       	brcs	.+4      	; 0x2620 <__pack_f+0x10e>
    261c:	e1 e0       	ldi	r30, 0x01	; 1
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	79 01       	movw	r14, r18
    2622:	8a 01       	movw	r16, r20
    2624:	27 c0       	rjmp	.+78     	; 0x2674 <__pack_f+0x162>
    2626:	60 38       	cpi	r22, 0x80	; 128
    2628:	71 05       	cpc	r23, r1
    262a:	64 f5       	brge	.+88     	; 0x2684 <__pack_f+0x172>
    262c:	fb 01       	movw	r30, r22
    262e:	e1 58       	subi	r30, 0x81	; 129
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	d8 01       	movw	r26, r16
    2634:	c7 01       	movw	r24, r14
    2636:	8f 77       	andi	r24, 0x7F	; 127
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	a0 70       	andi	r26, 0x00	; 0
    263c:	b0 70       	andi	r27, 0x00	; 0
    263e:	80 34       	cpi	r24, 0x40	; 64
    2640:	91 05       	cpc	r25, r1
    2642:	a1 05       	cpc	r26, r1
    2644:	b1 05       	cpc	r27, r1
    2646:	39 f4       	brne	.+14     	; 0x2656 <__pack_f+0x144>
    2648:	e7 fe       	sbrs	r14, 7
    264a:	0d c0       	rjmp	.+26     	; 0x2666 <__pack_f+0x154>
    264c:	80 e4       	ldi	r24, 0x40	; 64
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	04 c0       	rjmp	.+8      	; 0x265e <__pack_f+0x14c>
    2656:	8f e3       	ldi	r24, 0x3F	; 63
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e0       	ldi	r26, 0x00	; 0
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e8 0e       	add	r14, r24
    2660:	f9 1e       	adc	r15, r25
    2662:	0a 1f       	adc	r16, r26
    2664:	1b 1f       	adc	r17, r27
    2666:	17 ff       	sbrs	r17, 7
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <__pack_f+0x162>
    266a:	16 95       	lsr	r17
    266c:	07 95       	ror	r16
    266e:	f7 94       	ror	r15
    2670:	e7 94       	ror	r14
    2672:	31 96       	adiw	r30, 0x01	; 1
    2674:	87 e0       	ldi	r24, 0x07	; 7
    2676:	16 95       	lsr	r17
    2678:	07 95       	ror	r16
    267a:	f7 94       	ror	r15
    267c:	e7 94       	ror	r14
    267e:	8a 95       	dec	r24
    2680:	d1 f7       	brne	.-12     	; 0x2676 <__pack_f+0x164>
    2682:	05 c0       	rjmp	.+10     	; 0x268e <__pack_f+0x17c>
    2684:	ee 24       	eor	r14, r14
    2686:	ff 24       	eor	r15, r15
    2688:	87 01       	movw	r16, r14
    268a:	ef ef       	ldi	r30, 0xFF	; 255
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	6e 2f       	mov	r22, r30
    2690:	67 95       	ror	r22
    2692:	66 27       	eor	r22, r22
    2694:	67 95       	ror	r22
    2696:	90 2f       	mov	r25, r16
    2698:	9f 77       	andi	r25, 0x7F	; 127
    269a:	d7 94       	ror	r13
    269c:	dd 24       	eor	r13, r13
    269e:	d7 94       	ror	r13
    26a0:	8e 2f       	mov	r24, r30
    26a2:	86 95       	lsr	r24
    26a4:	49 2f       	mov	r20, r25
    26a6:	46 2b       	or	r20, r22
    26a8:	58 2f       	mov	r21, r24
    26aa:	5d 29       	or	r21, r13
    26ac:	b7 01       	movw	r22, r14
    26ae:	ca 01       	movw	r24, r20
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	08 95       	ret

000026bc <__unpack_f>:
    26bc:	fc 01       	movw	r30, r24
    26be:	db 01       	movw	r26, r22
    26c0:	40 81       	ld	r20, Z
    26c2:	51 81       	ldd	r21, Z+1	; 0x01
    26c4:	22 81       	ldd	r18, Z+2	; 0x02
    26c6:	62 2f       	mov	r22, r18
    26c8:	6f 77       	andi	r22, 0x7F	; 127
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	22 1f       	adc	r18, r18
    26ce:	22 27       	eor	r18, r18
    26d0:	22 1f       	adc	r18, r18
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	89 2f       	mov	r24, r25
    26d6:	88 0f       	add	r24, r24
    26d8:	82 2b       	or	r24, r18
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	99 1f       	adc	r25, r25
    26e0:	99 27       	eor	r25, r25
    26e2:	99 1f       	adc	r25, r25
    26e4:	11 96       	adiw	r26, 0x01	; 1
    26e6:	9c 93       	st	X, r25
    26e8:	11 97       	sbiw	r26, 0x01	; 1
    26ea:	21 15       	cp	r18, r1
    26ec:	31 05       	cpc	r19, r1
    26ee:	a9 f5       	brne	.+106    	; 0x275a <__unpack_f+0x9e>
    26f0:	41 15       	cp	r20, r1
    26f2:	51 05       	cpc	r21, r1
    26f4:	61 05       	cpc	r22, r1
    26f6:	71 05       	cpc	r23, r1
    26f8:	11 f4       	brne	.+4      	; 0x26fe <__unpack_f+0x42>
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	37 c0       	rjmp	.+110    	; 0x276c <__unpack_f+0xb0>
    26fe:	82 e8       	ldi	r24, 0x82	; 130
    2700:	9f ef       	ldi	r25, 0xFF	; 255
    2702:	13 96       	adiw	r26, 0x03	; 3
    2704:	9c 93       	st	X, r25
    2706:	8e 93       	st	-X, r24
    2708:	12 97       	sbiw	r26, 0x02	; 2
    270a:	9a 01       	movw	r18, r20
    270c:	ab 01       	movw	r20, r22
    270e:	67 e0       	ldi	r22, 0x07	; 7
    2710:	22 0f       	add	r18, r18
    2712:	33 1f       	adc	r19, r19
    2714:	44 1f       	adc	r20, r20
    2716:	55 1f       	adc	r21, r21
    2718:	6a 95       	dec	r22
    271a:	d1 f7       	brne	.-12     	; 0x2710 <__unpack_f+0x54>
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	8c 93       	st	X, r24
    2720:	0d c0       	rjmp	.+26     	; 0x273c <__unpack_f+0x80>
    2722:	22 0f       	add	r18, r18
    2724:	33 1f       	adc	r19, r19
    2726:	44 1f       	adc	r20, r20
    2728:	55 1f       	adc	r21, r21
    272a:	12 96       	adiw	r26, 0x02	; 2
    272c:	8d 91       	ld	r24, X+
    272e:	9c 91       	ld	r25, X
    2730:	13 97       	sbiw	r26, 0x03	; 3
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	13 96       	adiw	r26, 0x03	; 3
    2736:	9c 93       	st	X, r25
    2738:	8e 93       	st	-X, r24
    273a:	12 97       	sbiw	r26, 0x02	; 2
    273c:	20 30       	cpi	r18, 0x00	; 0
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	38 07       	cpc	r19, r24
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	48 07       	cpc	r20, r24
    2746:	80 e4       	ldi	r24, 0x40	; 64
    2748:	58 07       	cpc	r21, r24
    274a:	58 f3       	brcs	.-42     	; 0x2722 <__unpack_f+0x66>
    274c:	14 96       	adiw	r26, 0x04	; 4
    274e:	2d 93       	st	X+, r18
    2750:	3d 93       	st	X+, r19
    2752:	4d 93       	st	X+, r20
    2754:	5c 93       	st	X, r21
    2756:	17 97       	sbiw	r26, 0x07	; 7
    2758:	08 95       	ret
    275a:	2f 3f       	cpi	r18, 0xFF	; 255
    275c:	31 05       	cpc	r19, r1
    275e:	79 f4       	brne	.+30     	; 0x277e <__unpack_f+0xc2>
    2760:	41 15       	cp	r20, r1
    2762:	51 05       	cpc	r21, r1
    2764:	61 05       	cpc	r22, r1
    2766:	71 05       	cpc	r23, r1
    2768:	19 f4       	brne	.+6      	; 0x2770 <__unpack_f+0xb4>
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	8c 93       	st	X, r24
    276e:	08 95       	ret
    2770:	64 ff       	sbrs	r22, 4
    2772:	03 c0       	rjmp	.+6      	; 0x277a <__unpack_f+0xbe>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	8c 93       	st	X, r24
    2778:	12 c0       	rjmp	.+36     	; 0x279e <__unpack_f+0xe2>
    277a:	1c 92       	st	X, r1
    277c:	10 c0       	rjmp	.+32     	; 0x279e <__unpack_f+0xe2>
    277e:	2f 57       	subi	r18, 0x7F	; 127
    2780:	30 40       	sbci	r19, 0x00	; 0
    2782:	13 96       	adiw	r26, 0x03	; 3
    2784:	3c 93       	st	X, r19
    2786:	2e 93       	st	-X, r18
    2788:	12 97       	sbiw	r26, 0x02	; 2
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	8c 93       	st	X, r24
    278e:	87 e0       	ldi	r24, 0x07	; 7
    2790:	44 0f       	add	r20, r20
    2792:	55 1f       	adc	r21, r21
    2794:	66 1f       	adc	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	8a 95       	dec	r24
    279a:	d1 f7       	brne	.-12     	; 0x2790 <__unpack_f+0xd4>
    279c:	70 64       	ori	r23, 0x40	; 64
    279e:	14 96       	adiw	r26, 0x04	; 4
    27a0:	4d 93       	st	X+, r20
    27a2:	5d 93       	st	X+, r21
    27a4:	6d 93       	st	X+, r22
    27a6:	7c 93       	st	X, r23
    27a8:	17 97       	sbiw	r26, 0x07	; 7
    27aa:	08 95       	ret

000027ac <__fpcmp_parts_f>:
    27ac:	1f 93       	push	r17
    27ae:	dc 01       	movw	r26, r24
    27b0:	fb 01       	movw	r30, r22
    27b2:	9c 91       	ld	r25, X
    27b4:	92 30       	cpi	r25, 0x02	; 2
    27b6:	08 f4       	brcc	.+2      	; 0x27ba <__fpcmp_parts_f+0xe>
    27b8:	47 c0       	rjmp	.+142    	; 0x2848 <__fpcmp_parts_f+0x9c>
    27ba:	80 81       	ld	r24, Z
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	08 f4       	brcc	.+2      	; 0x27c2 <__fpcmp_parts_f+0x16>
    27c0:	43 c0       	rjmp	.+134    	; 0x2848 <__fpcmp_parts_f+0x9c>
    27c2:	94 30       	cpi	r25, 0x04	; 4
    27c4:	51 f4       	brne	.+20     	; 0x27da <__fpcmp_parts_f+0x2e>
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	1c 91       	ld	r17, X
    27ca:	84 30       	cpi	r24, 0x04	; 4
    27cc:	99 f5       	brne	.+102    	; 0x2834 <__fpcmp_parts_f+0x88>
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	68 2f       	mov	r22, r24
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	61 1b       	sub	r22, r17
    27d6:	71 09       	sbc	r23, r1
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <__fpcmp_parts_f+0xac>
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	21 f0       	breq	.+8      	; 0x27e6 <__fpcmp_parts_f+0x3a>
    27de:	92 30       	cpi	r25, 0x02	; 2
    27e0:	31 f4       	brne	.+12     	; 0x27ee <__fpcmp_parts_f+0x42>
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	b9 f1       	breq	.+110    	; 0x2854 <__fpcmp_parts_f+0xa8>
    27e6:	81 81       	ldd	r24, Z+1	; 0x01
    27e8:	88 23       	and	r24, r24
    27ea:	89 f1       	breq	.+98     	; 0x284e <__fpcmp_parts_f+0xa2>
    27ec:	2d c0       	rjmp	.+90     	; 0x2848 <__fpcmp_parts_f+0x9c>
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	1c 91       	ld	r17, X
    27f2:	11 97       	sbiw	r26, 0x01	; 1
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	f1 f0       	breq	.+60     	; 0x2834 <__fpcmp_parts_f+0x88>
    27f8:	81 81       	ldd	r24, Z+1	; 0x01
    27fa:	18 17       	cp	r17, r24
    27fc:	d9 f4       	brne	.+54     	; 0x2834 <__fpcmp_parts_f+0x88>
    27fe:	12 96       	adiw	r26, 0x02	; 2
    2800:	2d 91       	ld	r18, X+
    2802:	3c 91       	ld	r19, X
    2804:	13 97       	sbiw	r26, 0x03	; 3
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	93 81       	ldd	r25, Z+3	; 0x03
    280a:	82 17       	cp	r24, r18
    280c:	93 07       	cpc	r25, r19
    280e:	94 f0       	brlt	.+36     	; 0x2834 <__fpcmp_parts_f+0x88>
    2810:	28 17       	cp	r18, r24
    2812:	39 07       	cpc	r19, r25
    2814:	bc f0       	brlt	.+46     	; 0x2844 <__fpcmp_parts_f+0x98>
    2816:	14 96       	adiw	r26, 0x04	; 4
    2818:	8d 91       	ld	r24, X+
    281a:	9d 91       	ld	r25, X+
    281c:	0d 90       	ld	r0, X+
    281e:	bc 91       	ld	r27, X
    2820:	a0 2d       	mov	r26, r0
    2822:	24 81       	ldd	r18, Z+4	; 0x04
    2824:	35 81       	ldd	r19, Z+5	; 0x05
    2826:	46 81       	ldd	r20, Z+6	; 0x06
    2828:	57 81       	ldd	r21, Z+7	; 0x07
    282a:	28 17       	cp	r18, r24
    282c:	39 07       	cpc	r19, r25
    282e:	4a 07       	cpc	r20, r26
    2830:	5b 07       	cpc	r21, r27
    2832:	18 f4       	brcc	.+6      	; 0x283a <__fpcmp_parts_f+0x8e>
    2834:	11 23       	and	r17, r17
    2836:	41 f0       	breq	.+16     	; 0x2848 <__fpcmp_parts_f+0x9c>
    2838:	0a c0       	rjmp	.+20     	; 0x284e <__fpcmp_parts_f+0xa2>
    283a:	82 17       	cp	r24, r18
    283c:	93 07       	cpc	r25, r19
    283e:	a4 07       	cpc	r26, r20
    2840:	b5 07       	cpc	r27, r21
    2842:	40 f4       	brcc	.+16     	; 0x2854 <__fpcmp_parts_f+0xa8>
    2844:	11 23       	and	r17, r17
    2846:	19 f0       	breq	.+6      	; 0x284e <__fpcmp_parts_f+0xa2>
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <__fpcmp_parts_f+0xac>
    284e:	6f ef       	ldi	r22, 0xFF	; 255
    2850:	7f ef       	ldi	r23, 0xFF	; 255
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <__fpcmp_parts_f+0xac>
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	cb 01       	movw	r24, r22
    285a:	1f 91       	pop	r17
    285c:	08 95       	ret

0000285e <__udivmodhi4>:
    285e:	aa 1b       	sub	r26, r26
    2860:	bb 1b       	sub	r27, r27
    2862:	51 e1       	ldi	r21, 0x11	; 17
    2864:	07 c0       	rjmp	.+14     	; 0x2874 <__udivmodhi4_ep>

00002866 <__udivmodhi4_loop>:
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	a6 17       	cp	r26, r22
    286c:	b7 07       	cpc	r27, r23
    286e:	10 f0       	brcs	.+4      	; 0x2874 <__udivmodhi4_ep>
    2870:	a6 1b       	sub	r26, r22
    2872:	b7 0b       	sbc	r27, r23

00002874 <__udivmodhi4_ep>:
    2874:	88 1f       	adc	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	5a 95       	dec	r21
    287a:	a9 f7       	brne	.-22     	; 0x2866 <__udivmodhi4_loop>
    287c:	80 95       	com	r24
    287e:	90 95       	com	r25
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	08 95       	ret

00002886 <__divmodhi4>:
    2886:	97 fb       	bst	r25, 7
    2888:	09 2e       	mov	r0, r25
    288a:	07 26       	eor	r0, r23
    288c:	0a d0       	rcall	.+20     	; 0x28a2 <__divmodhi4_neg1>
    288e:	77 fd       	sbrc	r23, 7
    2890:	04 d0       	rcall	.+8      	; 0x289a <__divmodhi4_neg2>
    2892:	e5 df       	rcall	.-54     	; 0x285e <__udivmodhi4>
    2894:	06 d0       	rcall	.+12     	; 0x28a2 <__divmodhi4_neg1>
    2896:	00 20       	and	r0, r0
    2898:	1a f4       	brpl	.+6      	; 0x28a0 <__divmodhi4_exit>

0000289a <__divmodhi4_neg2>:
    289a:	70 95       	com	r23
    289c:	61 95       	neg	r22
    289e:	7f 4f       	sbci	r23, 0xFF	; 255

000028a0 <__divmodhi4_exit>:
    28a0:	08 95       	ret

000028a2 <__divmodhi4_neg1>:
    28a2:	f6 f7       	brtc	.-4      	; 0x28a0 <__divmodhi4_exit>
    28a4:	90 95       	com	r25
    28a6:	81 95       	neg	r24
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	08 95       	ret

000028ac <__prologue_saves__>:
    28ac:	2f 92       	push	r2
    28ae:	3f 92       	push	r3
    28b0:	4f 92       	push	r4
    28b2:	5f 92       	push	r5
    28b4:	6f 92       	push	r6
    28b6:	7f 92       	push	r7
    28b8:	8f 92       	push	r8
    28ba:	9f 92       	push	r9
    28bc:	af 92       	push	r10
    28be:	bf 92       	push	r11
    28c0:	cf 92       	push	r12
    28c2:	df 92       	push	r13
    28c4:	ef 92       	push	r14
    28c6:	ff 92       	push	r15
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	ca 1b       	sub	r28, r26
    28d6:	db 0b       	sbc	r29, r27
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	19 94       	eijmp

000028e4 <__epilogue_restores__>:
    28e4:	2a 88       	ldd	r2, Y+18	; 0x12
    28e6:	39 88       	ldd	r3, Y+17	; 0x11
    28e8:	48 88       	ldd	r4, Y+16	; 0x10
    28ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28f6:	b9 84       	ldd	r11, Y+9	; 0x09
    28f8:	c8 84       	ldd	r12, Y+8	; 0x08
    28fa:	df 80       	ldd	r13, Y+7	; 0x07
    28fc:	ee 80       	ldd	r14, Y+6	; 0x06
    28fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2900:	0c 81       	ldd	r16, Y+4	; 0x04
    2902:	1b 81       	ldd	r17, Y+3	; 0x03
    2904:	aa 81       	ldd	r26, Y+2	; 0x02
    2906:	b9 81       	ldd	r27, Y+1	; 0x01
    2908:	ce 0f       	add	r28, r30
    290a:	d1 1d       	adc	r29, r1
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	ed 01       	movw	r28, r26
    2918:	08 95       	ret

0000291a <pow>:
    291a:	fa 01       	movw	r30, r20
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	30 96       	adiw	r30, 0x00	; 0
    2922:	21 05       	cpc	r18, r1
    2924:	31 05       	cpc	r19, r1
    2926:	99 f1       	breq	.+102    	; 0x298e <pow+0x74>
    2928:	61 15       	cp	r22, r1
    292a:	71 05       	cpc	r23, r1
    292c:	61 f4       	brne	.+24     	; 0x2946 <pow+0x2c>
    292e:	80 38       	cpi	r24, 0x80	; 128
    2930:	bf e3       	ldi	r27, 0x3F	; 63
    2932:	9b 07       	cpc	r25, r27
    2934:	49 f1       	breq	.+82     	; 0x2988 <pow+0x6e>
    2936:	68 94       	set
    2938:	90 38       	cpi	r25, 0x80	; 128
    293a:	81 05       	cpc	r24, r1
    293c:	61 f0       	breq	.+24     	; 0x2956 <pow+0x3c>
    293e:	80 38       	cpi	r24, 0x80	; 128
    2940:	bf ef       	ldi	r27, 0xFF	; 255
    2942:	9b 07       	cpc	r25, r27
    2944:	41 f0       	breq	.+16     	; 0x2956 <pow+0x3c>
    2946:	99 23       	and	r25, r25
    2948:	42 f5       	brpl	.+80     	; 0x299a <pow+0x80>
    294a:	ff 3f       	cpi	r31, 0xFF	; 255
    294c:	e1 05       	cpc	r30, r1
    294e:	31 05       	cpc	r19, r1
    2950:	21 05       	cpc	r18, r1
    2952:	11 f1       	breq	.+68     	; 0x2998 <pow+0x7e>
    2954:	e8 94       	clt
    2956:	08 94       	sec
    2958:	e7 95       	ror	r30
    295a:	d9 01       	movw	r26, r18
    295c:	aa 23       	and	r26, r26
    295e:	29 f4       	brne	.+10     	; 0x296a <pow+0x50>
    2960:	ab 2f       	mov	r26, r27
    2962:	be 2f       	mov	r27, r30
    2964:	f8 5f       	subi	r31, 0xF8	; 248
    2966:	d0 f3       	brcs	.-12     	; 0x295c <pow+0x42>
    2968:	10 c0       	rjmp	.+32     	; 0x298a <pow+0x70>
    296a:	ff 5f       	subi	r31, 0xFF	; 255
    296c:	70 f4       	brcc	.+28     	; 0x298a <pow+0x70>
    296e:	a6 95       	lsr	r26
    2970:	e0 f7       	brcc	.-8      	; 0x296a <pow+0x50>
    2972:	f7 39       	cpi	r31, 0x97	; 151
    2974:	50 f0       	brcs	.+20     	; 0x298a <pow+0x70>
    2976:	19 f0       	breq	.+6      	; 0x297e <pow+0x64>
    2978:	ff 3a       	cpi	r31, 0xAF	; 175
    297a:	38 f4       	brcc	.+14     	; 0x298a <pow+0x70>
    297c:	9f 77       	andi	r25, 0x7F	; 127
    297e:	9f 93       	push	r25
    2980:	0c d0       	rcall	.+24     	; 0x299a <pow+0x80>
    2982:	0f 90       	pop	r0
    2984:	07 fc       	sbrc	r0, 7
    2986:	90 58       	subi	r25, 0x80	; 128
    2988:	08 95       	ret
    298a:	3e f0       	brts	.+14     	; 0x299a <pow+0x80>
    298c:	49 c0       	rjmp	.+146    	; 0x2a20 <__fp_nan>
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	80 e8       	ldi	r24, 0x80	; 128
    2994:	9f e3       	ldi	r25, 0x3F	; 63
    2996:	08 95       	ret
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	9f 77       	andi	r25, 0x7F	; 127
    299c:	5f 93       	push	r21
    299e:	4f 93       	push	r20
    29a0:	3f 93       	push	r19
    29a2:	2f 93       	push	r18
    29a4:	d0 d0       	rcall	.+416    	; 0x2b46 <log>
    29a6:	2f 91       	pop	r18
    29a8:	3f 91       	pop	r19
    29aa:	4f 91       	pop	r20
    29ac:	5f 91       	pop	r21
    29ae:	01 da       	rcall	.-3070   	; 0x1db2 <__mulsf3>
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <exp>
    29b2:	19 f4       	brne	.+6      	; 0x29ba <pow+0xa0>
    29b4:	0e f0       	brts	.+2      	; 0x29b8 <pow+0x9e>
    29b6:	2e c0       	rjmp	.+92     	; 0x2a14 <__fp_inf>
    29b8:	7d c0       	rjmp	.+250    	; 0x2ab4 <__fp_zero>
    29ba:	32 c0       	rjmp	.+100    	; 0x2a20 <__fp_nan>

000029bc <exp>:
    29bc:	61 d0       	rcall	.+194    	; 0x2a80 <__fp_splitA>
    29be:	c8 f3       	brcs	.-14     	; 0x29b2 <pow+0x98>
    29c0:	96 38       	cpi	r25, 0x86	; 134
    29c2:	c0 f7       	brcc	.-16     	; 0x29b4 <pow+0x9a>
    29c4:	07 f8       	bld	r0, 7
    29c6:	0f 92       	push	r0
    29c8:	e8 94       	clt
    29ca:	2b e3       	ldi	r18, 0x3B	; 59
    29cc:	3a ea       	ldi	r19, 0xAA	; 170
    29ce:	48 eb       	ldi	r20, 0xB8	; 184
    29d0:	5f e7       	ldi	r21, 0x7F	; 127
    29d2:	38 d1       	rcall	.+624    	; 0x2c44 <__mulsf3_pse>
    29d4:	0f 92       	push	r0
    29d6:	0f 92       	push	r0
    29d8:	0f 92       	push	r0
    29da:	4d b7       	in	r20, 0x3d	; 61
    29dc:	5e b7       	in	r21, 0x3e	; 62
    29de:	0f 92       	push	r0
    29e0:	f2 d0       	rcall	.+484    	; 0x2bc6 <modf>
    29e2:	e4 ee       	ldi	r30, 0xE4	; 228
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	1f d0       	rcall	.+62     	; 0x2a26 <__fp_powser>
    29e8:	4f 91       	pop	r20
    29ea:	5f 91       	pop	r21
    29ec:	ef 91       	pop	r30
    29ee:	ff 91       	pop	r31
    29f0:	e5 95       	asr	r30
    29f2:	ee 1f       	adc	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	49 f0       	breq	.+18     	; 0x2a0a <exp+0x4e>
    29f8:	fe 57       	subi	r31, 0x7E	; 126
    29fa:	e0 68       	ori	r30, 0x80	; 128
    29fc:	44 27       	eor	r20, r20
    29fe:	ee 0f       	add	r30, r30
    2a00:	44 1f       	adc	r20, r20
    2a02:	fa 95       	dec	r31
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <exp+0x42>
    2a06:	41 95       	neg	r20
    2a08:	55 0b       	sbc	r21, r21
    2a0a:	64 d0       	rcall	.+200    	; 0x2ad4 <ldexp>
    2a0c:	0f 90       	pop	r0
    2a0e:	07 fe       	sbrs	r0, 7
    2a10:	58 c0       	rjmp	.+176    	; 0x2ac2 <inverse>
    2a12:	08 95       	ret

00002a14 <__fp_inf>:
    2a14:	97 f9       	bld	r25, 7
    2a16:	9f 67       	ori	r25, 0x7F	; 127
    2a18:	80 e8       	ldi	r24, 0x80	; 128
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	08 95       	ret

00002a20 <__fp_nan>:
    2a20:	9f ef       	ldi	r25, 0xFF	; 255
    2a22:	80 ec       	ldi	r24, 0xC0	; 192
    2a24:	08 95       	ret

00002a26 <__fp_powser>:
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	1f 93       	push	r17
    2a2c:	0f 93       	push	r16
    2a2e:	ff 92       	push	r15
    2a30:	ef 92       	push	r14
    2a32:	df 92       	push	r13
    2a34:	7b 01       	movw	r14, r22
    2a36:	8c 01       	movw	r16, r24
    2a38:	68 94       	set
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <__fp_powser+0x20>
    2a3c:	da 2e       	mov	r13, r26
    2a3e:	ef 01       	movw	r28, r30
    2a40:	ff d0       	rcall	.+510    	; 0x2c40 <__mulsf3x>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e8 94       	clt
    2a46:	a5 91       	lpm	r26, Z+
    2a48:	25 91       	lpm	r18, Z+
    2a4a:	35 91       	lpm	r19, Z+
    2a4c:	45 91       	lpm	r20, Z+
    2a4e:	55 91       	lpm	r21, Z+
    2a50:	ae f3       	brts	.-22     	; 0x2a3c <__fp_powser+0x16>
    2a52:	ef 01       	movw	r28, r30
    2a54:	59 d1       	rcall	.+690    	; 0x2d08 <__addsf3x>
    2a56:	fe 01       	movw	r30, r28
    2a58:	97 01       	movw	r18, r14
    2a5a:	a8 01       	movw	r20, r16
    2a5c:	da 94       	dec	r13
    2a5e:	79 f7       	brne	.-34     	; 0x2a3e <__fp_powser+0x18>
    2a60:	df 90       	pop	r13
    2a62:	ef 90       	pop	r14
    2a64:	ff 90       	pop	r15
    2a66:	0f 91       	pop	r16
    2a68:	1f 91       	pop	r17
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <__fp_split3>:
    2a70:	57 fd       	sbrc	r21, 7
    2a72:	90 58       	subi	r25, 0x80	; 128
    2a74:	44 0f       	add	r20, r20
    2a76:	55 1f       	adc	r21, r21
    2a78:	59 f0       	breq	.+22     	; 0x2a90 <__fp_splitA+0x10>
    2a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7c:	71 f0       	breq	.+28     	; 0x2a9a <__fp_splitA+0x1a>
    2a7e:	47 95       	ror	r20

00002a80 <__fp_splitA>:
    2a80:	88 0f       	add	r24, r24
    2a82:	97 fb       	bst	r25, 7
    2a84:	99 1f       	adc	r25, r25
    2a86:	61 f0       	breq	.+24     	; 0x2aa0 <__fp_splitA+0x20>
    2a88:	9f 3f       	cpi	r25, 0xFF	; 255
    2a8a:	79 f0       	breq	.+30     	; 0x2aaa <__fp_splitA+0x2a>
    2a8c:	87 95       	ror	r24
    2a8e:	08 95       	ret
    2a90:	12 16       	cp	r1, r18
    2a92:	13 06       	cpc	r1, r19
    2a94:	14 06       	cpc	r1, r20
    2a96:	55 1f       	adc	r21, r21
    2a98:	f2 cf       	rjmp	.-28     	; 0x2a7e <__fp_split3+0xe>
    2a9a:	46 95       	lsr	r20
    2a9c:	f1 df       	rcall	.-30     	; 0x2a80 <__fp_splitA>
    2a9e:	08 c0       	rjmp	.+16     	; 0x2ab0 <__fp_splitA+0x30>
    2aa0:	16 16       	cp	r1, r22
    2aa2:	17 06       	cpc	r1, r23
    2aa4:	18 06       	cpc	r1, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	f1 cf       	rjmp	.-30     	; 0x2a8c <__fp_splitA+0xc>
    2aaa:	86 95       	lsr	r24
    2aac:	71 05       	cpc	r23, r1
    2aae:	61 05       	cpc	r22, r1
    2ab0:	08 94       	sec
    2ab2:	08 95       	ret

00002ab4 <__fp_zero>:
    2ab4:	e8 94       	clt

00002ab6 <__fp_szero>:
    2ab6:	bb 27       	eor	r27, r27
    2ab8:	66 27       	eor	r22, r22
    2aba:	77 27       	eor	r23, r23
    2abc:	cb 01       	movw	r24, r22
    2abe:	97 f9       	bld	r25, 7
    2ac0:	08 95       	ret

00002ac2 <inverse>:
    2ac2:	9b 01       	movw	r18, r22
    2ac4:	ac 01       	movw	r20, r24
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	80 e8       	ldi	r24, 0x80	; 128
    2acc:	9f e3       	ldi	r25, 0x3F	; 63
    2ace:	6b ca       	rjmp	.-2858   	; 0x1fa6 <__divsf3>
    2ad0:	a1 cf       	rjmp	.-190    	; 0x2a14 <__fp_inf>
    2ad2:	6d c1       	rjmp	.+730    	; 0x2dae <__fp_mpack>

00002ad4 <ldexp>:
    2ad4:	d5 df       	rcall	.-86     	; 0x2a80 <__fp_splitA>
    2ad6:	e8 f3       	brcs	.-6      	; 0x2ad2 <inverse+0x10>
    2ad8:	99 23       	and	r25, r25
    2ada:	d9 f3       	breq	.-10     	; 0x2ad2 <inverse+0x10>
    2adc:	94 0f       	add	r25, r20
    2ade:	51 1d       	adc	r21, r1
    2ae0:	bb f3       	brvs	.-18     	; 0x2ad0 <inverse+0xe>
    2ae2:	91 50       	subi	r25, 0x01	; 1
    2ae4:	50 40       	sbci	r21, 0x00	; 0
    2ae6:	94 f0       	brlt	.+36     	; 0x2b0c <ldexp+0x38>
    2ae8:	59 f0       	breq	.+22     	; 0x2b00 <ldexp+0x2c>
    2aea:	88 23       	and	r24, r24
    2aec:	32 f0       	brmi	.+12     	; 0x2afa <ldexp+0x26>
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	91 50       	subi	r25, 0x01	; 1
    2af6:	50 40       	sbci	r21, 0x00	; 0
    2af8:	c1 f7       	brne	.-16     	; 0x2aea <ldexp+0x16>
    2afa:	9e 3f       	cpi	r25, 0xFE	; 254
    2afc:	51 05       	cpc	r21, r1
    2afe:	44 f7       	brge	.-48     	; 0x2ad0 <inverse+0xe>
    2b00:	88 0f       	add	r24, r24
    2b02:	91 1d       	adc	r25, r1
    2b04:	96 95       	lsr	r25
    2b06:	87 95       	ror	r24
    2b08:	97 f9       	bld	r25, 7
    2b0a:	08 95       	ret
    2b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b0e:	ac f0       	brlt	.+42     	; 0x2b3a <ldexp+0x66>
    2b10:	98 3e       	cpi	r25, 0xE8	; 232
    2b12:	9c f0       	brlt	.+38     	; 0x2b3a <ldexp+0x66>
    2b14:	bb 27       	eor	r27, r27
    2b16:	86 95       	lsr	r24
    2b18:	77 95       	ror	r23
    2b1a:	67 95       	ror	r22
    2b1c:	b7 95       	ror	r27
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <ldexp+0x4e>
    2b20:	b1 60       	ori	r27, 0x01	; 1
    2b22:	93 95       	inc	r25
    2b24:	c1 f7       	brne	.-16     	; 0x2b16 <ldexp+0x42>
    2b26:	bb 0f       	add	r27, r27
    2b28:	58 f7       	brcc	.-42     	; 0x2b00 <ldexp+0x2c>
    2b2a:	11 f4       	brne	.+4      	; 0x2b30 <ldexp+0x5c>
    2b2c:	60 ff       	sbrs	r22, 0
    2b2e:	e8 cf       	rjmp	.-48     	; 0x2b00 <ldexp+0x2c>
    2b30:	6f 5f       	subi	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	e3 cf       	rjmp	.-58     	; 0x2b00 <ldexp+0x2c>
    2b3a:	bd cf       	rjmp	.-134    	; 0x2ab6 <__fp_szero>
    2b3c:	0e f0       	brts	.+2      	; 0x2b40 <ldexp+0x6c>
    2b3e:	37 c1       	rjmp	.+622    	; 0x2dae <__fp_mpack>
    2b40:	6f cf       	rjmp	.-290    	; 0x2a20 <__fp_nan>
    2b42:	68 94       	set
    2b44:	67 cf       	rjmp	.-306    	; 0x2a14 <__fp_inf>

00002b46 <log>:
    2b46:	9c df       	rcall	.-200    	; 0x2a80 <__fp_splitA>
    2b48:	c8 f3       	brcs	.-14     	; 0x2b3c <ldexp+0x68>
    2b4a:	99 23       	and	r25, r25
    2b4c:	d1 f3       	breq	.-12     	; 0x2b42 <ldexp+0x6e>
    2b4e:	c6 f3       	brts	.-16     	; 0x2b40 <ldexp+0x6c>
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	1f 93       	push	r17
    2b56:	0f 93       	push	r16
    2b58:	ff 92       	push	r15
    2b5a:	c9 2f       	mov	r28, r25
    2b5c:	dd 27       	eor	r29, r29
    2b5e:	88 23       	and	r24, r24
    2b60:	2a f0       	brmi	.+10     	; 0x2b6c <log+0x26>
    2b62:	21 97       	sbiw	r28, 0x01	; 1
    2b64:	66 0f       	add	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	88 1f       	adc	r24, r24
    2b6a:	da f7       	brpl	.-10     	; 0x2b62 <log+0x1c>
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f eb       	ldi	r21, 0xBF	; 191
    2b74:	9f e3       	ldi	r25, 0x3F	; 63
    2b76:	88 39       	cpi	r24, 0x98	; 152
    2b78:	20 f0       	brcs	.+8      	; 0x2b82 <log+0x3c>
    2b7a:	80 3e       	cpi	r24, 0xE0	; 224
    2b7c:	30 f0       	brcs	.+12     	; 0x2b8a <log+0x44>
    2b7e:	21 96       	adiw	r28, 0x01	; 1
    2b80:	8f 77       	andi	r24, 0x7F	; 127
    2b82:	ea d8       	rcall	.-3628   	; 0x1d58 <__addsf3>
    2b84:	ec e0       	ldi	r30, 0x0C	; 12
    2b86:	f1 e0       	ldi	r31, 0x01	; 1
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <log+0x4a>
    2b8a:	e6 d8       	rcall	.-3636   	; 0x1d58 <__addsf3>
    2b8c:	e9 e3       	ldi	r30, 0x39	; 57
    2b8e:	f1 e0       	ldi	r31, 0x01	; 1
    2b90:	4a df       	rcall	.-364    	; 0x2a26 <__fp_powser>
    2b92:	8b 01       	movw	r16, r22
    2b94:	be 01       	movw	r22, r28
    2b96:	ec 01       	movw	r28, r24
    2b98:	fb 2e       	mov	r15, r27
    2b9a:	6f 57       	subi	r22, 0x7F	; 127
    2b9c:	71 09       	sbc	r23, r1
    2b9e:	75 95       	asr	r23
    2ba0:	77 1f       	adc	r23, r23
    2ba2:	88 0b       	sbc	r24, r24
    2ba4:	99 0b       	sbc	r25, r25
    2ba6:	3b db       	rcall	.-2442   	; 0x221e <__floatsisf>
    2ba8:	28 e1       	ldi	r18, 0x18	; 24
    2baa:	32 e7       	ldi	r19, 0x72	; 114
    2bac:	41 e3       	ldi	r20, 0x31	; 49
    2bae:	5f e3       	ldi	r21, 0x3F	; 63
    2bb0:	47 d0       	rcall	.+142    	; 0x2c40 <__mulsf3x>
    2bb2:	af 2d       	mov	r26, r15
    2bb4:	98 01       	movw	r18, r16
    2bb6:	ae 01       	movw	r20, r28
    2bb8:	ff 90       	pop	r15
    2bba:	0f 91       	pop	r16
    2bbc:	1f 91       	pop	r17
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	a2 d0       	rcall	.+324    	; 0x2d08 <__addsf3x>
    2bc4:	10 c1       	rjmp	.+544    	; 0x2de6 <__fp_round>

00002bc6 <modf>:
    2bc6:	fa 01       	movw	r30, r20
    2bc8:	dc 01       	movw	r26, r24
    2bca:	aa 0f       	add	r26, r26
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	9b 01       	movw	r18, r22
    2bd0:	ac 01       	movw	r20, r24
    2bd2:	bf 57       	subi	r27, 0x7F	; 127
    2bd4:	28 f4       	brcc	.+10     	; 0x2be0 <modf+0x1a>
    2bd6:	22 27       	eor	r18, r18
    2bd8:	33 27       	eor	r19, r19
    2bda:	44 27       	eor	r20, r20
    2bdc:	50 78       	andi	r21, 0x80	; 128
    2bde:	1f c0       	rjmp	.+62     	; 0x2c1e <modf+0x58>
    2be0:	b7 51       	subi	r27, 0x17	; 23
    2be2:	88 f4       	brcc	.+34     	; 0x2c06 <modf+0x40>
    2be4:	ab 2f       	mov	r26, r27
    2be6:	00 24       	eor	r0, r0
    2be8:	46 95       	lsr	r20
    2bea:	37 95       	ror	r19
    2bec:	27 95       	ror	r18
    2bee:	01 1c       	adc	r0, r1
    2bf0:	a3 95       	inc	r26
    2bf2:	d2 f3       	brmi	.-12     	; 0x2be8 <modf+0x22>
    2bf4:	00 20       	and	r0, r0
    2bf6:	69 f0       	breq	.+26     	; 0x2c12 <modf+0x4c>
    2bf8:	22 0f       	add	r18, r18
    2bfa:	33 1f       	adc	r19, r19
    2bfc:	44 1f       	adc	r20, r20
    2bfe:	b3 95       	inc	r27
    2c00:	da f3       	brmi	.-10     	; 0x2bf8 <modf+0x32>
    2c02:	0d d0       	rcall	.+26     	; 0x2c1e <modf+0x58>
    2c04:	78 c8       	rjmp	.-3856   	; 0x1cf6 <__subsf3>
    2c06:	61 30       	cpi	r22, 0x01	; 1
    2c08:	71 05       	cpc	r23, r1
    2c0a:	a0 e8       	ldi	r26, 0x80	; 128
    2c0c:	8a 07       	cpc	r24, r26
    2c0e:	b9 46       	sbci	r27, 0x69	; 105
    2c10:	30 f4       	brcc	.+12     	; 0x2c1e <modf+0x58>
    2c12:	9b 01       	movw	r18, r22
    2c14:	ac 01       	movw	r20, r24
    2c16:	66 27       	eor	r22, r22
    2c18:	77 27       	eor	r23, r23
    2c1a:	88 27       	eor	r24, r24
    2c1c:	90 78       	andi	r25, 0x80	; 128
    2c1e:	30 96       	adiw	r30, 0x00	; 0
    2c20:	21 f0       	breq	.+8      	; 0x2c2a <modf+0x64>
    2c22:	20 83       	st	Z, r18
    2c24:	31 83       	std	Z+1, r19	; 0x01
    2c26:	42 83       	std	Z+2, r20	; 0x02
    2c28:	53 83       	std	Z+3, r21	; 0x03
    2c2a:	08 95       	ret
    2c2c:	ce d0       	rcall	.+412    	; 0x2dca <__fp_pscA>
    2c2e:	28 f0       	brcs	.+10     	; 0x2c3a <modf+0x74>
    2c30:	d3 d0       	rcall	.+422    	; 0x2dd8 <__fp_pscB>
    2c32:	18 f0       	brcs	.+6      	; 0x2c3a <modf+0x74>
    2c34:	95 23       	and	r25, r21
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <modf+0x74>
    2c38:	ed ce       	rjmp	.-550    	; 0x2a14 <__fp_inf>
    2c3a:	f2 ce       	rjmp	.-540    	; 0x2a20 <__fp_nan>
    2c3c:	11 24       	eor	r1, r1
    2c3e:	3b cf       	rjmp	.-394    	; 0x2ab6 <__fp_szero>

00002c40 <__mulsf3x>:
    2c40:	17 df       	rcall	.-466    	; 0x2a70 <__fp_split3>
    2c42:	a0 f3       	brcs	.-24     	; 0x2c2c <modf+0x66>

00002c44 <__mulsf3_pse>:
    2c44:	95 9f       	mul	r25, r21
    2c46:	d1 f3       	breq	.-12     	; 0x2c3c <modf+0x76>
    2c48:	95 0f       	add	r25, r21
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	55 1f       	adc	r21, r21
    2c4e:	62 9f       	mul	r22, r18
    2c50:	f0 01       	movw	r30, r0
    2c52:	72 9f       	mul	r23, r18
    2c54:	bb 27       	eor	r27, r27
    2c56:	f0 0d       	add	r31, r0
    2c58:	b1 1d       	adc	r27, r1
    2c5a:	63 9f       	mul	r22, r19
    2c5c:	aa 27       	eor	r26, r26
    2c5e:	f0 0d       	add	r31, r0
    2c60:	b1 1d       	adc	r27, r1
    2c62:	aa 1f       	adc	r26, r26
    2c64:	64 9f       	mul	r22, r20
    2c66:	66 27       	eor	r22, r22
    2c68:	b0 0d       	add	r27, r0
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	66 1f       	adc	r22, r22
    2c6e:	82 9f       	mul	r24, r18
    2c70:	22 27       	eor	r18, r18
    2c72:	b0 0d       	add	r27, r0
    2c74:	a1 1d       	adc	r26, r1
    2c76:	62 1f       	adc	r22, r18
    2c78:	73 9f       	mul	r23, r19
    2c7a:	b0 0d       	add	r27, r0
    2c7c:	a1 1d       	adc	r26, r1
    2c7e:	62 1f       	adc	r22, r18
    2c80:	83 9f       	mul	r24, r19
    2c82:	a0 0d       	add	r26, r0
    2c84:	61 1d       	adc	r22, r1
    2c86:	22 1f       	adc	r18, r18
    2c88:	74 9f       	mul	r23, r20
    2c8a:	33 27       	eor	r19, r19
    2c8c:	a0 0d       	add	r26, r0
    2c8e:	61 1d       	adc	r22, r1
    2c90:	23 1f       	adc	r18, r19
    2c92:	84 9f       	mul	r24, r20
    2c94:	60 0d       	add	r22, r0
    2c96:	21 1d       	adc	r18, r1
    2c98:	82 2f       	mov	r24, r18
    2c9a:	76 2f       	mov	r23, r22
    2c9c:	6a 2f       	mov	r22, r26
    2c9e:	11 24       	eor	r1, r1
    2ca0:	9f 57       	subi	r25, 0x7F	; 127
    2ca2:	50 40       	sbci	r21, 0x00	; 0
    2ca4:	8a f0       	brmi	.+34     	; 0x2cc8 <__mulsf3_pse+0x84>
    2ca6:	e1 f0       	breq	.+56     	; 0x2ce0 <__mulsf3_pse+0x9c>
    2ca8:	88 23       	and	r24, r24
    2caa:	4a f0       	brmi	.+18     	; 0x2cbe <__mulsf3_pse+0x7a>
    2cac:	ee 0f       	add	r30, r30
    2cae:	ff 1f       	adc	r31, r31
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	66 1f       	adc	r22, r22
    2cb4:	77 1f       	adc	r23, r23
    2cb6:	88 1f       	adc	r24, r24
    2cb8:	91 50       	subi	r25, 0x01	; 1
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	a9 f7       	brne	.-22     	; 0x2ca8 <__mulsf3_pse+0x64>
    2cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc0:	51 05       	cpc	r21, r1
    2cc2:	70 f0       	brcs	.+28     	; 0x2ce0 <__mulsf3_pse+0x9c>
    2cc4:	a7 ce       	rjmp	.-690    	; 0x2a14 <__fp_inf>
    2cc6:	f7 ce       	rjmp	.-530    	; 0x2ab6 <__fp_szero>
    2cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cca:	ec f3       	brlt	.-6      	; 0x2cc6 <__mulsf3_pse+0x82>
    2ccc:	98 3e       	cpi	r25, 0xE8	; 232
    2cce:	dc f3       	brlt	.-10     	; 0x2cc6 <__mulsf3_pse+0x82>
    2cd0:	86 95       	lsr	r24
    2cd2:	77 95       	ror	r23
    2cd4:	67 95       	ror	r22
    2cd6:	b7 95       	ror	r27
    2cd8:	f7 95       	ror	r31
    2cda:	e7 95       	ror	r30
    2cdc:	9f 5f       	subi	r25, 0xFF	; 255
    2cde:	c1 f7       	brne	.-16     	; 0x2cd0 <__mulsf3_pse+0x8c>
    2ce0:	fe 2b       	or	r31, r30
    2ce2:	88 0f       	add	r24, r24
    2ce4:	91 1d       	adc	r25, r1
    2ce6:	96 95       	lsr	r25
    2ce8:	87 95       	ror	r24
    2cea:	97 f9       	bld	r25, 7
    2cec:	08 95       	ret
    2cee:	6d d0       	rcall	.+218    	; 0x2dca <__fp_pscA>
    2cf0:	30 f0       	brcs	.+12     	; 0x2cfe <__mulsf3_pse+0xba>
    2cf2:	72 d0       	rcall	.+228    	; 0x2dd8 <__fp_pscB>
    2cf4:	20 f0       	brcs	.+8      	; 0x2cfe <__mulsf3_pse+0xba>
    2cf6:	31 f4       	brne	.+12     	; 0x2d04 <__mulsf3_pse+0xc0>
    2cf8:	9f 3f       	cpi	r25, 0xFF	; 255
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <__mulsf3_pse+0xbc>
    2cfc:	1e f4       	brtc	.+6      	; 0x2d04 <__mulsf3_pse+0xc0>
    2cfe:	90 ce       	rjmp	.-736    	; 0x2a20 <__fp_nan>
    2d00:	0e f4       	brtc	.+2      	; 0x2d04 <__mulsf3_pse+0xc0>
    2d02:	e0 95       	com	r30
    2d04:	e7 fb       	bst	r30, 7
    2d06:	86 ce       	rjmp	.-756    	; 0x2a14 <__fp_inf>

00002d08 <__addsf3x>:
    2d08:	e9 2f       	mov	r30, r25
    2d0a:	b2 de       	rcall	.-668    	; 0x2a70 <__fp_split3>
    2d0c:	80 f3       	brcs	.-32     	; 0x2cee <__mulsf3_pse+0xaa>
    2d0e:	ba 17       	cp	r27, r26
    2d10:	62 07       	cpc	r22, r18
    2d12:	73 07       	cpc	r23, r19
    2d14:	84 07       	cpc	r24, r20
    2d16:	95 07       	cpc	r25, r21
    2d18:	18 f0       	brcs	.+6      	; 0x2d20 <__addsf3x+0x18>
    2d1a:	71 f4       	brne	.+28     	; 0x2d38 <__addsf3x+0x30>
    2d1c:	9e f5       	brtc	.+102    	; 0x2d84 <__addsf3x+0x7c>
    2d1e:	ca ce       	rjmp	.-620    	; 0x2ab4 <__fp_zero>
    2d20:	0e f4       	brtc	.+2      	; 0x2d24 <__addsf3x+0x1c>
    2d22:	e0 95       	com	r30
    2d24:	0b 2e       	mov	r0, r27
    2d26:	ba 2f       	mov	r27, r26
    2d28:	a0 2d       	mov	r26, r0
    2d2a:	0b 01       	movw	r0, r22
    2d2c:	b9 01       	movw	r22, r18
    2d2e:	90 01       	movw	r18, r0
    2d30:	0c 01       	movw	r0, r24
    2d32:	ca 01       	movw	r24, r20
    2d34:	a0 01       	movw	r20, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	ff 27       	eor	r31, r31
    2d3a:	59 1b       	sub	r21, r25
    2d3c:	99 f0       	breq	.+38     	; 0x2d64 <__addsf3x+0x5c>
    2d3e:	59 3f       	cpi	r21, 0xF9	; 249
    2d40:	50 f4       	brcc	.+20     	; 0x2d56 <__addsf3x+0x4e>
    2d42:	50 3e       	cpi	r21, 0xE0	; 224
    2d44:	68 f1       	brcs	.+90     	; 0x2da0 <__addsf3x+0x98>
    2d46:	1a 16       	cp	r1, r26
    2d48:	f0 40       	sbci	r31, 0x00	; 0
    2d4a:	a2 2f       	mov	r26, r18
    2d4c:	23 2f       	mov	r18, r19
    2d4e:	34 2f       	mov	r19, r20
    2d50:	44 27       	eor	r20, r20
    2d52:	58 5f       	subi	r21, 0xF8	; 248
    2d54:	f3 cf       	rjmp	.-26     	; 0x2d3c <__addsf3x+0x34>
    2d56:	46 95       	lsr	r20
    2d58:	37 95       	ror	r19
    2d5a:	27 95       	ror	r18
    2d5c:	a7 95       	ror	r26
    2d5e:	f0 40       	sbci	r31, 0x00	; 0
    2d60:	53 95       	inc	r21
    2d62:	c9 f7       	brne	.-14     	; 0x2d56 <__addsf3x+0x4e>
    2d64:	7e f4       	brtc	.+30     	; 0x2d84 <__addsf3x+0x7c>
    2d66:	1f 16       	cp	r1, r31
    2d68:	ba 0b       	sbc	r27, r26
    2d6a:	62 0b       	sbc	r22, r18
    2d6c:	73 0b       	sbc	r23, r19
    2d6e:	84 0b       	sbc	r24, r20
    2d70:	ba f0       	brmi	.+46     	; 0x2da0 <__addsf3x+0x98>
    2d72:	91 50       	subi	r25, 0x01	; 1
    2d74:	a1 f0       	breq	.+40     	; 0x2d9e <__addsf3x+0x96>
    2d76:	ff 0f       	add	r31, r31
    2d78:	bb 1f       	adc	r27, r27
    2d7a:	66 1f       	adc	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	88 1f       	adc	r24, r24
    2d80:	c2 f7       	brpl	.-16     	; 0x2d72 <__addsf3x+0x6a>
    2d82:	0e c0       	rjmp	.+28     	; 0x2da0 <__addsf3x+0x98>
    2d84:	ba 0f       	add	r27, r26
    2d86:	62 1f       	adc	r22, r18
    2d88:	73 1f       	adc	r23, r19
    2d8a:	84 1f       	adc	r24, r20
    2d8c:	48 f4       	brcc	.+18     	; 0x2da0 <__addsf3x+0x98>
    2d8e:	87 95       	ror	r24
    2d90:	77 95       	ror	r23
    2d92:	67 95       	ror	r22
    2d94:	b7 95       	ror	r27
    2d96:	f7 95       	ror	r31
    2d98:	9e 3f       	cpi	r25, 0xFE	; 254
    2d9a:	08 f0       	brcs	.+2      	; 0x2d9e <__addsf3x+0x96>
    2d9c:	b3 cf       	rjmp	.-154    	; 0x2d04 <__mulsf3_pse+0xc0>
    2d9e:	93 95       	inc	r25
    2da0:	88 0f       	add	r24, r24
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <__addsf3x+0x9e>
    2da4:	99 27       	eor	r25, r25
    2da6:	ee 0f       	add	r30, r30
    2da8:	97 95       	ror	r25
    2daa:	87 95       	ror	r24
    2dac:	08 95       	ret

00002dae <__fp_mpack>:
    2dae:	9f 3f       	cpi	r25, 0xFF	; 255
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <__fp_mpack_finite+0xc>

00002db2 <__fp_mpack_finite>:
    2db2:	91 50       	subi	r25, 0x01	; 1
    2db4:	20 f4       	brcc	.+8      	; 0x2dbe <__fp_mpack_finite+0xc>
    2db6:	87 95       	ror	r24
    2db8:	77 95       	ror	r23
    2dba:	67 95       	ror	r22
    2dbc:	b7 95       	ror	r27
    2dbe:	88 0f       	add	r24, r24
    2dc0:	91 1d       	adc	r25, r1
    2dc2:	96 95       	lsr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	97 f9       	bld	r25, 7
    2dc8:	08 95       	ret

00002dca <__fp_pscA>:
    2dca:	00 24       	eor	r0, r0
    2dcc:	0a 94       	dec	r0
    2dce:	16 16       	cp	r1, r22
    2dd0:	17 06       	cpc	r1, r23
    2dd2:	18 06       	cpc	r1, r24
    2dd4:	09 06       	cpc	r0, r25
    2dd6:	08 95       	ret

00002dd8 <__fp_pscB>:
    2dd8:	00 24       	eor	r0, r0
    2dda:	0a 94       	dec	r0
    2ddc:	12 16       	cp	r1, r18
    2dde:	13 06       	cpc	r1, r19
    2de0:	14 06       	cpc	r1, r20
    2de2:	05 06       	cpc	r0, r21
    2de4:	08 95       	ret

00002de6 <__fp_round>:
    2de6:	09 2e       	mov	r0, r25
    2de8:	03 94       	inc	r0
    2dea:	00 0c       	add	r0, r0
    2dec:	11 f4       	brne	.+4      	; 0x2df2 <__fp_round+0xc>
    2dee:	88 23       	and	r24, r24
    2df0:	52 f0       	brmi	.+20     	; 0x2e06 <__fp_round+0x20>
    2df2:	bb 0f       	add	r27, r27
    2df4:	40 f4       	brcc	.+16     	; 0x2e06 <__fp_round+0x20>
    2df6:	bf 2b       	or	r27, r31
    2df8:	11 f4       	brne	.+4      	; 0x2dfe <__fp_round+0x18>
    2dfa:	60 ff       	sbrs	r22, 0
    2dfc:	04 c0       	rjmp	.+8      	; 0x2e06 <__fp_round+0x20>
    2dfe:	6f 5f       	subi	r22, 0xFF	; 255
    2e00:	7f 4f       	sbci	r23, 0xFF	; 255
    2e02:	8f 4f       	sbci	r24, 0xFF	; 255
    2e04:	9f 4f       	sbci	r25, 0xFF	; 255
    2e06:	08 95       	ret

00002e08 <_exit>:
    2e08:	f8 94       	cli

00002e0a <__stop_program>:
    2e0a:	ff cf       	rjmp	.-2      	; 0x2e0a <__stop_program>
